var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/interfaces/Block.html",[0,0.091,1,0.39]],["body/interfaces/Block.html",[0,0.176,1,0.787,2,0.705,3,0.191,4,0.191,5,0.174,6,0.178,7,0.296,8,1.626,9,0.28,10,2.382,11,0.748,12,0.294,13,0.736,14,1.781,15,1.952,16,1.815,17,0.92,18,1.346,19,1.121,20,3.362,21,2.199,22,2.439,23,0.017,24,0.404,25,1.402,26,2.922,27,1.626,28,1.626,29,2.314,30,2.314,31,1.338,32,1.402,33,2.314,34,0.805,35,2.441,36,2.441,37,1.171,38,0.946,39,2.199,40,2.207,41,2.439,42,2.935,43,2.199,44,2.999,45,2.199,46,1.626,47,1.716,48,1.121,49,2.199,50,2.805,51,2.441,52,1.218,53,2.441,54,1.716,55,1.705,56,1.716,57,1.568,58,1.716,59,1.716,60,1.716,61,1.716,62,2.199,63,1.626,64,1.626,65,0.007,66,0.01,67,0.007]],["title/interfaces/BlockData.html",[0,0.091,68,2.545]],["body/interfaces/BlockData.html",[0,0.158,1,0.722,2,0.726,3,0.196,4,0.196,5,0.179,6,0.182,7,0.302,9,0.471,11,0.654,12,0.29,15,1.66,16,1.869,17,1.357,18,1.237,19,1.629,23,0.017,24,0.417,31,1.945,34,0.435,38,2.182,52,1.234,55,1.496,57,0.975,65,0.007,66,0.01,67,0.007,68,4.029,69,1.984,70,3.463,71,0.521,72,1.591,73,0.481,74,3.201,75,3.201,76,1.06,77,2.985,78,2.476,79,2.985,80,2.116,81,3.5,82,2.454,83,1.206,84,1.675,85,2.269,86,1.317,87,1.984,88,4.409,89,1.964,90,3.709,91,3.709,92,1.808,93,1.767,94,1.984,95,2.454,96,1.733,97,2.116,98,2.985,99,2.454,100,2.116,101,1.444,102,2.269,103,2.454,104,1.378,105,1.26,106,2.985,107,1.984,108,2.454,109,1.378,110,2.339,111,1.444,112,0.86,113,2.269,114,1.869,115,1.984,116,2.637,117,2.116,118,1.317,119,1.444,120,2.476,121,2.476,122,1.869,123,1.515,124,0.232,125,2.153,126,1.155,127,1.887,128,2.269,129,1.155,130,2.269,131,2.454,132,2.116,133,2.454,134,1.444,135,2.269]],["title/interfaces/ChangeMap.html",[0,0.091,136,2.225]],["body/interfaces/ChangeMap.html",[0,0.165,1,0.577,2,0.92,3,0.249,4,0.249,5,0.227,6,0.214,7,0.355,9,0.365,12,0.303,16,2.37,17,1.464,18,1.295,19,1.464,23,0.017,24,0.399,48,1.464,65,0.009,66,0.012,67,0.009,71,0.682,76,1.345,92,2.433,136,3.29,137,2.877,138,4.99,139,4.501,140,3.099,141,2.668,142,1.758,143,4.391,144,1.748,145,2.241,146,2.547,147,2.241,148,2.516,149,2.286,150,1.921,151,3.099,152,2.516,153,2.516,154,2.327,155,2.37,156,2.683,157,2.394]],["title/interfaces/CreateEditorJSOptions.html",[0,0.091,158,3.011]],["body/interfaces/CreateEditorJSOptions.html",[0,0.119,2,1.063,3,0.287,4,0.287,5,0.262,6,0.189,7,0.313,9,0.422,11,0.648,12,0.264,13,1.109,14,1.847,18,1.258,23,0.016,24,0.287,48,2.282,52,1.505,65,0.01,66,0.013,67,0.01,71,0.54,76,1.553,93,3.651,96,1.927,110,2.722,111,2.984,116,3.397,154,2.289,158,4.878,159,5.071,160,5.071,161,2.892,162,5.312,163,5.07,164,2.892,165,3.288,166,4.459]],["title/interfaces/EditorJSChange.html",[0,0.091,156,2.373]],["body/interfaces/EditorJSChange.html",[0,0.165,1,0.68,2,0.912,3,0.247,4,0.247,5,0.225,6,0.162,7,0.269,9,0.362,11,0.54,12,0.302,13,0.952,14,1.676,17,1.432,18,1.243,23,0.017,24,0.398,48,2.124,65,0.009,66,0.012,67,0.009,71,0.679,76,1.332,92,2.379,136,2.493,137,2.852,138,4.881,139,4.442,140,2.349,141,2.38,142,1.332,144,1.732,145,2.221,146,2.923,147,2.221,148,2.493,149,2.272,150,1.904,151,3.081,152,2.493,153,2.493,154,2.621,155,3.081,156,3.487,157,3.004]],["title/interfaces/EditorJSClass.html",[0,0.091,167,2.225]],["body/interfaces/EditorJSClass.html",[0,0.164,1,0.359,2,0.749,3,0.203,4,0.203,5,0.185,6,0.133,7,0.221,9,0.298,11,0.545,12,0.32,13,0.782,14,1.467,15,0.965,18,1.33,22,1.9,23,0.017,24,0.403,34,0.449,40,2.095,52,1.156,55,1.095,57,1.006,65,0.01,66,0.01,67,0.007,71,0.614,72,1.643,73,0.497,76,1.095,92,1.142,96,1.53,109,1.423,118,2.495,119,1.491,120,1.564,121,1.564,125,2.191,127,1.92,141,1.491,142,2.009,144,1.989,146,2.293,149,1.423,150,1.564,154,1.301,157,1.491,161,2.296,164,2.296,165,2.647,167,2.863,168,2.184,169,2.296,170,1.25,171,2.084,172,2.549,173,3.498,174,2.697,175,1.24,176,3.274,177,3.274,178,2.697,179,2.697,180,2.184,181,2.184,182,1.729,183,3.375,184,2.612,185,3.759,186,2.343,187,2.184,188,2.549,189,2.184,190,1.93,191,1.729,192,2.049,193,2.049,194,1.824,195,1.93,196,2.049,197,2.049,198,2.049,199,2.049,200,2.184,201,2.863,202,1.93,203,2.184,204,2.049,205,1.93,206,2.343,207,2.343,208,2.343,209,1.763,210,2.863,211,3.052,212,2.049,213,2.049,214,2.184]],["title/interfaces/EditorJSInstanceConfig.html",[0,0.091,181,2.373]],["body/interfaces/EditorJSInstanceConfig.html",[0,0.158,1,0.351,2,0.732,3,0.198,4,0.198,5,0.18,6,0.13,7,0.216,9,0.291,11,0.584,12,0.314,13,0.764,14,1.443,15,0.943,18,1.275,22,1.87,23,0.017,24,0.401,34,0.438,40,1.788,52,1.392,55,1.505,57,0.983,65,0.01,66,0.01,67,0.007,71,0.606,72,1.605,73,0.485,76,1.069,92,1.116,96,1.89,109,1.39,118,2.692,119,1.457,120,1.528,121,1.528,125,2.163,127,1.896,141,1.457,142,1.992,144,1.957,146,2.264,149,1.39,150,2.15,154,1.788,157,1.457,161,2.259,164,2.259,165,3.252,167,2.001,168,2.134,169,1.605,170,1.135,171,1.457,172,1.782,173,2.985,174,1.885,175,0.867,176,2.289,177,2.289,178,1.885,179,3.511,180,3.003,181,3.003,182,2.377,183,3.423,184,2.759,185,3.971,186,3.221,187,3.771,188,2.508,189,3.771,190,1.885,191,1.69,192,2.001,193,2.001,194,1.782,195,1.885,196,2.001,197,2.001,198,2.001,199,2.001,200,2.134,201,2.816,202,1.885,203,2.134,204,2.001,205,1.885,206,2.289,207,2.289,208,2.289,209,1.741,210,2.816,211,3.003,212,2.001,213,2.001,214,2.134]],["title/interfaces/EditorJSMaterialForm.html",[0,0.091,215,3.358]],["body/interfaces/EditorJSMaterialForm.html",[0,0.133,2,0.458,3,0.124,4,0.124,5,0.113,6,0.081,7,0.135,9,0.182,10,1.547,11,0.207,12,0.237,14,1.015,18,0.789,23,0.017,24,0.243,40,1.775,52,0.694,57,1.592,65,0.004,66,0.007,67,0.004,71,0.69,73,0.303,100,2.622,102,2.266,111,3.014,112,0.858,118,1.315,123,1.877,125,0.831,127,0.728,142,1.059,145,1.114,151,3.901,154,1.258,155,1.179,162,1.547,164,1.972,170,0.636,172,2.19,175,0.858,182,2.736,185,1.251,188,2.19,190,1.179,191,1.056,194,1.114,215,4.597,216,1.693,217,3.395,218,1.547,219,1.888,220,2.989,221,3.783,222,5.318,223,2.184,224,2.184,225,2.184,226,3.327,227,1.888,228,2.68,229,3.497,230,2.989,231,2.989,232,3.457,233,2.45,234,2.45,235,3.71,236,3.457,237,2.184,238,4.88,239,1.431,240,1.888,241,3.706,242,3.04,243,1.888,244,1.693,245,2.796,246,1.888,247,1.888,248,2.459,249,1.693,250,2.622,251,2.184,252,4.59,253,2.45,254,0.59,255,1.888,256,2.266,257,0.794,258,2.184,259,1.888,260,1.693,261,2.184,262,1.547,263,1.693,264,1.888,265,2.184,266,2.184,267,2.184,268,0.565,269,4.219,270,1.888,271,1.693,272,2.622,273,2.184,274,4.039,275,2.184,276,3.04,277,2.184,278,3.457,279,2.184,280,3.788,281,3.198,282,3.457,283,3.788,284,2.184,285,2.184,286,6.144,287,4.198,288,3.249,289,2.184,290,3.457,291,2.184,292,2.184,293,5.122,294,2.184,295,4.291,296,2.184,297,2.184,298,2.184,299,3.457,300,2.184,301,3.457,302,2.184,303,2.184,304,2.184,305,2.184,306,5.656,307,2.184,308,3.457,309,2.184,310,2.184,311,2.184,312,5.122,313,2.184,314,3.457,315,2.184,316,1.888,317,2.45,318,2.184,319,2.184,320,2.812,321,2.184,322,2.989,323,3.457,324,2.184,325,2.184,326,1.693,327,2.184,328,2.184,329,2.184,330,3.457,331,2.184,332,2.184,333,2.184,334,3.457,335,3.457,336,1.251,337,2.184,338,2.184,339,2.184,340,2.68,341,2.989,342,3.457,343,2.184,344,2.184,345,1.866,346,2.184,347,2.989,348,3.04,349,2.184,350,1.334,351,1.888,352,1.888,353,1.251,354,3.71,355,2.184,356,1.693,357,4.291,358,4.291,359,4.291,360,3.71,361,2.184,362,3.457,363,1.693,364,2.184,365,1.693,366,1.888,367,1.888,368,1.547,369,1.888,370,1.888,371,1.693,372,2.184,373,1.888,374,2.184,375,2.184,376,1.888,377,2.184,378,2.184,379,2.184,380,2.184,381,2.184,382,2.184]],["title/interfaces/EditorMap.html",[0,0.091,148,2.225]],["body/interfaces/EditorMap.html",[0,0.165,1,0.579,2,0.925,3,0.25,4,0.25,5,0.228,6,0.214,7,0.356,9,0.367,12,0.296,16,2.383,17,1.465,18,1.297,19,1.472,23,0.017,24,0.4,48,1.472,65,0.009,66,0.012,67,0.009,71,0.684,76,1.352,92,2.435,136,2.53,137,2.893,138,4.995,139,4.504,140,2.383,141,2.403,142,1.352,144,1.758,145,2.253,146,2.553,147,2.94,148,3.302,149,2.294,150,1.931,151,3.11,152,2.53,153,2.53,154,2.333,155,2.383,156,2.697,157,2.403,383,4.415]],["title/interfaces/Header.html",[0,0.091,44,1.699]],["body/interfaces/Header.html",[0,0.175,1,0.783,2,0.715,3,0.193,4,0.193,5,0.176,6,0.127,7,0.211,8,1.649,9,0.284,11,0.741,12,0.281,13,0.746,14,1.648,15,1.858,17,0.655,18,1.334,21,1.567,22,2.135,23,0.017,24,0.405,25,1.422,26,2.933,27,1.649,28,1.649,29,2.337,30,2.337,31,1.357,32,1.422,33,2.337,34,0.84,35,2.466,36,2.466,37,1.187,38,0.96,39,2.221,40,2.221,41,2.452,42,3.402,43,2.221,44,3.209,45,3.076,46,2.337,47,2.466,48,1.871,49,2.221,50,2.82,51,2.466,52,1.226,53,2.466,54,1.74,55,1.718,56,1.74,57,1.58,58,1.74,59,1.74,60,1.74,61,1.74,62,2.221,63,1.649,64,1.649,65,0.007,66,0.01,67,0.007]],["title/interfaces/HeaderBlock.html",[0,0.091,49,1.785]],["body/interfaces/HeaderBlock.html",[0,0.177,1,0.788,2,0.729,3,0.197,4,0.197,5,0.18,6,0.129,7,0.215,8,1.682,9,0.289,11,0.744,12,0.29,13,0.761,14,1.666,15,1.819,17,0.668,18,1.3,21,1.598,22,2.158,23,0.017,24,0.407,25,1.45,26,2.948,27,1.682,28,1.682,29,2.37,30,2.37,31,1.384,32,1.45,33,2.37,34,0.815,35,2.5,36,2.5,37,1.211,38,0.979,39,2.252,40,2.362,41,2.47,42,2.98,43,2.252,44,3.092,45,2.252,46,1.682,47,1.775,48,1.16,49,2.607,50,2.841,51,2.5,52,1.237,53,2.5,54,1.775,55,1.737,56,1.775,57,1.597,58,1.775,59,1.775,60,1.775,61,1.775,62,2.252,63,1.682,64,1.682,65,0.007,66,0.01,67,0.007]],["title/interfaces/Image.html",[0,0.091,50,1.699]],["body/interfaces/Image.html",[0,0.174,1,0.778,2,0.679,3,0.184,4,0.184,5,0.167,6,0.121,7,0.2,8,1.568,9,0.27,11,0.742,12,0.276,13,0.709,14,1.602,15,1.831,17,0.623,18,1.35,21,1.489,22,2.076,23,0.017,24,0.401,25,1.351,26,2.894,27,1.568,28,1.568,29,2.254,30,2.254,31,1.29,32,1.351,33,2.254,34,0.826,35,2.378,36,2.378,37,1.128,38,0.912,39,2.142,40,2.171,41,2.404,42,2.886,43,2.142,44,3.036,45,2.142,46,1.568,47,1.654,48,1.081,49,2.142,50,3.036,51,3.358,52,1.517,53,3.358,54,2.378,55,2.015,56,3.045,57,1.989,58,2.378,59,3.045,60,2.378,61,3.045,62,2.142,63,1.568,64,1.568,65,0.007,66,0.01,67,0.007]],["title/interfaces/ImageBlock.html",[0,0.091,62,1.785]],["body/interfaces/ImageBlock.html",[0,0.177,1,0.788,2,0.729,3,0.197,4,0.197,5,0.18,6,0.129,7,0.215,8,1.682,9,0.289,11,0.744,12,0.29,13,0.761,14,1.666,15,1.819,17,0.668,18,1.3,21,1.598,22,2.158,23,0.017,24,0.407,25,1.45,26,2.948,27,1.682,28,1.682,29,2.37,30,2.37,31,1.384,32,1.45,33,2.37,34,0.815,35,2.5,36,2.5,37,1.211,38,0.979,39,2.252,40,2.362,41,2.47,42,2.98,43,2.252,44,3.028,45,2.252,46,1.682,47,1.775,48,1.16,49,2.252,50,2.947,51,2.5,52,1.237,53,2.5,54,1.775,55,1.737,56,1.775,57,1.597,58,1.775,59,1.775,60,1.775,61,1.775,62,2.607,63,1.682,64,1.682,65,0.007,66,0.01,67,0.007]],["title/interfaces/InjectorApiCallOptions.html",[0,0.091,210,2.225]],["body/interfaces/InjectorApiCallOptions.html",[0,0.159,1,0.354,2,0.737,3,0.199,4,0.199,5,0.182,6,0.131,7,0.217,9,0.293,11,0.586,12,0.317,13,0.77,14,1.45,15,0.95,18,1.381,22,1.879,23,0.017,24,0.402,34,0.442,40,1.797,52,1.358,55,1.077,57,0.99,65,0.01,66,0.01,67,0.007,71,0.608,72,1.617,73,0.489,76,1.077,92,1.124,96,1.513,109,1.967,118,2.481,119,1.467,120,1.539,121,1.539,125,2.172,127,1.904,141,1.467,142,2.071,144,1.967,146,2.273,149,1.4,150,1.539,154,1.28,157,1.467,161,2.624,164,2.27,165,2.624,167,2.016,168,2.149,169,1.617,170,1.139,171,1.467,172,1.795,173,2.995,174,1.899,175,0.873,176,2.305,177,2.305,178,1.899,179,1.899,180,2.149,181,2.149,182,1.702,183,3.57,184,2.868,185,3.98,186,2.305,187,2.149,188,2.521,189,2.149,190,1.899,191,1.702,192,2.016,193,2.016,194,1.795,195,1.899,196,2.016,197,2.016,198,2.016,199,2.016,200,2.149,201,2.831,202,1.899,203,2.149,204,2.016,205,1.899,206,2.305,207,2.305,208,3.237,209,1.997,210,3.271,211,4.131,212,2.016,213,2.016,214,2.149]],["title/interfaces/InjectorApiCallResponse.html",[0,0.091,213,2.225]],["body/interfaces/InjectorApiCallResponse.html",[0,0.161,1,0.368,2,0.766,3,0.207,4,0.207,5,0.189,6,0.136,7,0.226,9,0.304,11,0.48,12,0.317,13,0.8,14,1.49,15,0.987,18,1.291,22,2.395,23,0.017,24,0.406,34,0.459,40,2.12,52,1.17,55,1.119,57,1.029,65,0.014,66,0.01,67,0.007,71,0.621,72,1.68,73,0.508,76,1.119,92,1.168,96,1.554,109,1.455,118,2.516,119,1.525,120,1.599,121,1.599,125,2.217,127,1.943,141,1.525,142,1.928,144,2.02,146,2.32,149,1.455,150,1.599,154,1.33,157,1.525,161,2.332,164,2.332,165,2.679,167,2.095,168,2.234,169,1.68,170,1.158,171,1.525,172,1.866,173,3.045,174,1.973,175,0.908,176,2.396,177,2.396,178,1.973,179,1.973,180,2.234,181,2.234,182,1.769,183,3.396,184,2.633,185,3.79,186,2.396,187,2.234,188,2.589,189,2.234,190,1.973,191,1.769,192,2.095,193,2.095,194,1.866,195,1.973,196,2.095,197,2.095,198,2.095,199,2.095,200,2.234,201,2.908,202,1.973,203,2.234,204,2.095,205,1.973,206,2.396,207,2.396,208,2.396,209,1.928,210,3.34,211,3.1,212,2.908,213,2.908,214,2.234]],["title/interfaces/InjectorMethodOption.html",[0,0.091,204,2.225]],["body/interfaces/InjectorMethodOption.html",[0,0.158,1,0.35,2,0.729,3,0.197,4,0.197,5,0.18,6,0.129,7,0.215,9,0.289,11,0.615,12,0.316,13,0.761,14,1.438,15,1.663,18,1.322,22,1.864,23,0.017,24,0.401,34,0.437,40,1.783,52,1.479,55,1.065,57,1.597,65,0.01,66,0.01,67,0.007,71,0.605,72,1.598,73,0.483,76,1.065,92,1.111,96,1.5,109,1.384,118,2.733,119,1.45,120,1.521,121,1.521,125,2.158,127,1.892,141,2.044,142,1.886,144,2.452,146,2.452,149,1.384,150,1.521,154,1.265,157,1.45,161,2.607,164,2.252,165,2.607,167,1.993,168,2.125,169,1.598,170,1.133,171,1.45,172,1.775,173,2.98,174,1.877,175,0.863,176,2.279,177,2.279,178,1.877,179,1.877,180,2.125,181,2.125,182,1.682,183,3.562,184,2.682,185,3.86,186,2.279,187,2.125,188,2.5,189,2.125,190,1.877,191,1.682,192,1.993,193,1.993,194,1.775,195,1.877,196,1.993,197,1.993,198,1.993,199,1.993,200,2.125,201,3.251,202,1.877,203,2.125,204,2.808,205,2.645,206,3.211,207,4.036,208,2.279,209,1.737,210,2.808,211,2.994,212,1.993,213,1.993,214,2.125]],["title/interfaces/List.html",[0,0.091,26,1.62]],["body/interfaces/List.html",[0,0.175,1,0.783,2,0.715,3,0.193,4,0.193,5,0.176,6,0.127,7,0.211,8,1.649,9,0.284,11,0.742,12,0.281,13,0.746,14,1.648,15,1.858,17,0.655,18,1.293,21,1.567,22,2.546,23,0.017,24,0.405,25,1.422,26,3.089,27,1.649,28,1.649,29,2.337,30,2.337,31,1.357,32,1.422,33,2.953,34,0.84,35,3.416,36,3.416,37,1.187,38,0.96,39,2.221,40,2.221,41,2.452,42,2.953,43,2.221,44,3.011,45,2.221,46,1.649,47,1.74,48,1.137,49,2.221,50,2.82,51,2.466,52,1.226,53,2.466,54,1.74,55,1.718,56,1.74,57,1.58,58,1.74,59,1.74,60,1.74,61,1.74,62,2.221,63,1.649,64,1.649,65,0.007,66,0.01,67,0.007]],["title/interfaces/ListBlock.html",[0,0.091,39,1.785]],["body/interfaces/ListBlock.html",[0,0.176,1,0.788,2,0.725,3,0.196,4,0.196,5,0.179,6,0.129,7,0.214,8,1.673,9,0.288,11,0.743,12,0.296,13,0.756,14,1.66,15,1.815,17,0.665,18,1.298,21,1.589,22,2.151,23,0.017,24,0.407,25,1.442,26,3.034,27,1.673,28,1.673,29,2.361,30,2.361,31,1.377,32,1.442,33,2.361,34,0.844,35,2.49,36,2.49,37,1.699,38,1.374,39,2.599,40,2.357,41,2.465,42,2.972,43,2.243,44,3.023,45,2.243,46,1.673,47,1.764,48,1.153,49,2.243,50,2.835,51,2.49,52,1.234,53,2.49,54,1.764,55,1.732,56,1.764,57,1.592,58,1.764,59,1.764,60,1.764,61,1.764,62,2.243,63,1.673,64,1.673,65,0.007,66,0.01,67,0.007]],["title/modules/NgxEditorJSComponentModule.html",[124,0.26,384,2.373]],["body/modules/NgxEditorJSComponentModule.html",[3,0.197,4,0.197,5,0.18,6,0.182,7,0.303,9,0.408,10,4.023,11,0.33,12,0.258,19,1.161,23,0.017,24,0.278,37,1.708,52,1.39,65,0.007,66,0.01,67,0.007,71,0.785,73,0.484,76,1.066,96,1.887,101,2.57,104,1.386,109,2.454,110,2.471,111,2.57,124,0.38,170,0.902,171,1.452,172,2.503,179,2.648,184,1.953,199,3.254,202,2.648,239,2.282,245,4.324,246,3.011,247,3.011,248,4.052,249,2.7,250,4.663,254,1.754,268,1.745,281,3.065,283,1.996,345,1.88,384,4.611,385,0.902,386,1.452,387,1.685,388,2.897,389,1.777,390,2.61,391,3.011,392,3.011,393,3.011,394,3.011,395,3.011,396,4.402,397,2.503,398,1.777,399,1.601,400,3.011,401,3.214,402,4.905,403,4.118,404,4.402,405,1.88,406,2.7,407,3.327,408,3.483,409,3.214,410,2.811,411,3.214,412,4.778,413,1.777,414,2.282,415,4.402,416,1.598,417,3.803,418,3.214,419,2.128,420,4.24,421,3.483,422,3.214,423,3.475,424,3.011,425,4.24,426,3.483,427,2.282,428,3.011,429,1.996,430,2.066,431,4.24,432,4.24,433,3.011,434,2.7,435,2.7]],["title/interfaces/NgxEditorJSConfig.html",[0,0.091,436,2.752]],["body/interfaces/NgxEditorJSConfig.html",[0,0.118,1,0.684,2,0.753,3,0.204,4,0.204,5,0.186,6,0.134,7,0.222,9,0.299,11,0.674,12,0.299,13,0.786,14,1.471,15,1.837,18,1.331,23,0.017,24,0.372,34,0.854,41,1.906,48,1.925,52,1.539,57,1.916,65,0.007,66,0.01,67,0.007,71,0.534,72,1.65,73,0.499,76,1.1,96,2.084,104,1.995,110,2.196,111,2.09,112,1.244,117,3.062,120,1.571,121,2.192,122,3.372,125,2.196,127,1.925,140,2.705,142,1.768,144,2.487,161,1.65,164,2.303,165,2.303,169,1.65,183,3.022,184,1.43,191,1.737,205,1.938,272,3.062,287,3.551,348,3.551,350,3.062,401,2.353,403,2.194,407,1.938,422,2.353,427,2.353,436,4.426,437,2.784,438,4.843,439,4.843,440,4.843,441,4.843,442,4.843,443,5.277,444,4.333,445,3.885,446,3.062,447,3.551,448,3.551,449,3.885,450,4.333,451,4.333,452,4.333,453,3.885,454,4.333,455,3.885,456,4.333,457,3.885,458,4.843,459,2.353,460,2.544,461,2.784,462,2.784,463,2.544,464,2.784,465,2.784,466,2.784]],["title/directives/NgxEditorJSDirective.html",[245,2.225,467,2.225]],["body/directives/NgxEditorJSDirective.html",[1,0.632,3,0.081,4,0.081,5,0.074,6,0.26,7,0.432,9,0.314,11,0.644,12,0.297,13,0.313,15,0.659,18,1.218,19,2.319,23,0.017,24,0.081,25,1.017,32,1.921,34,0.473,37,1.111,38,0.687,41,0.928,42,1.824,48,1.728,52,0.64,55,1.506,57,1.459,65,0.003,66,0.005,67,0.003,71,0.524,73,0.199,76,0.438,84,1.824,93,1.924,96,1.296,97,1.491,101,1.33,104,1.684,109,0.971,110,1.753,111,2.66,112,0.936,116,1.317,118,2.304,119,0.596,122,2.035,123,1.067,125,0.928,127,1.868,139,0.82,140,1.317,141,1.572,142,2.084,144,0.569,145,0.73,146,2.231,149,0.569,150,1.649,151,1.722,154,0.888,157,1.765,162,3.673,163,3.832,165,2.118,170,0.263,171,1.921,173,0.692,174,2.035,175,0.606,183,2.865,184,0.971,188,0.73,194,1.924,195,0.772,196,0.82,226,2.473,228,2.923,229,3.197,233,4.091,234,2.671,242,2.26,243,1.236,244,1.109,245,1.398,248,2.97,249,1.109,262,1.729,263,1.891,271,1.891,272,3.167,274,4.159,276,1.729,280,3.211,281,2.487,283,2.425,287,2.26,288,2.303,293,2.109,312,2.109,320,2.47,322,2.109,326,1.891,336,1.398,341,3.658,345,1.317,347,3.259,348,1.729,350,3.897,353,2.16,354,2.758,356,2.923,363,1.109,365,1.891,368,1.729,369,2.109,371,1.109,373,3.259,376,2.758,405,1.317,411,1.599,413,1.628,414,0.937,438,3.814,439,2.923,440,3.28,441,3.28,442,3.28,443,3.814,446,1.491,447,3.265,448,1.729,449,1.891,453,1.891,455,1.891,458,3.28,467,3.751,468,1.236,469,7,470,1.43,471,2.109,472,2.109,473,2.923,474,2.109,475,2.758,476,1.236,477,2.109,478,4.676,479,2.44,480,3.259,481,3.77,482,2.109,483,2.44,484,2.758,485,3.259,486,3.19,487,3.259,488,3.19,489,2.44,490,2.44,491,3.116,492,5.409,493,1.43,494,3.77,495,2.758,496,1.43,497,3.19,498,3.77,499,1.43,500,1.891,501,1.43,502,1.891,503,2.44,504,2.44,505,1.891,506,2.44,507,2.44,508,2.44,509,2.44,510,2.109,511,2.44,512,1.43,513,2.44,514,2.109,515,5.183,516,1.43,517,1.43,518,2.671,519,2.109,520,1.43,521,2.44,522,1.43,523,1.43,524,2.44,525,2.44,526,2.44,527,1.43,528,2.44,529,1.43,530,2.109,531,5.774,532,1.43,533,5.604,534,2.44,535,1.43,536,2.44,537,1.43,538,1.43,539,1.43,540,1.43,541,2.44,542,1.43,543,3.259,544,1.43,545,1.891,546,3.28,547,2.44,548,2.44,549,3.77,550,1.43,551,2.109,552,2.44,553,2.923,554,2.109,555,2.109,556,2.44,557,2.109,558,2.44,559,2.44,560,2.44,561,2.998,562,1.43,563,2.109,564,2.109,565,1.236,566,1.43,567,2.758,568,1.43,569,1.43,570,1.43,571,1.43,572,1.43,573,1.43,574,1.43,575,2.109,576,1.43,577,1.43,578,1.236,579,1.109,580,1.236,581,1.729,582,1.43,583,1.236,584,1.43,585,1.43,586,1.43,587,1.43,588,3.259,589,1.43,590,4.608,591,1.43,592,1.43,593,1.43,594,2.758,595,1.43,596,1.43,597,1.43,598,1.43,599,1.43,600,1.43,601,1.43,602,1.43,603,1.43,604,4.232,605,1.43,606,1.43,607,1.43,608,1.236,609,1.43,610,1.43,611,1.43,612,2.44,613,1.43,614,1.236,615,1.43,616,1.43,617,3.19,618,1.43,619,1.43,620,1.236,621,1.43,622,1.43,623,1.43,624,1.43,625,1.236,626,1.236,627,1.43,628,1.43,629,1.43,630,1.43,631,1.43,632,1.43,633,1.43,634,1.43,635,2.44,636,1.43,637,1.43,638,1.236]],["title/modules/NgxEditorJSMatFieldModule.html",[124,0.26,639,2.545]],["body/modules/NgxEditorJSMatFieldModule.html",[3,0.224,4,0.224,5,0.204,6,0.199,7,0.331,9,0.446,11,0.374,12,0.166,19,1.318,23,0.017,24,0.224,37,1.864,52,1.439,65,0.008,66,0.011,67,0.008,71,0.764,73,0.55,96,1.992,101,2.714,104,1.574,109,2.59,110,2.475,124,0.455,170,0.727,171,1.649,172,2.732,175,1.329,182,2.59,184,2.132,216,4.151,217,3.896,218,3.794,240,3.418,241,2.591,252,3.272,253,4.302,254,1.067,256,5.085,268,1.386,281,2.134,283,2.266,345,2.134,353,3.068,384,4.154,385,1.024,386,1.649,387,1.913,388,3.098,389,2.018,390,2.79,397,2.732,398,2.018,399,1.817,403,3.272,404,3.065,405,2.134,406,3.065,407,3.512,409,3.509,410,3.068,411,3.509,412,5.044,413,2.018,414,2.591,415,4.707,416,1.709,417,4.151,418,3.509,419,2.416,423,2.802,429,2.266,430,1.438,434,3.065,435,3.065,639,4.843,640,3.418,641,3.418,642,3.418,643,3.418,644,3.954,645,4.629,646,5.355,647,3.272,648,3.954,649,3.954,650,3.954,651,5.355,652,5.355,653,3.954]],["title/modules/NgxEditorJSModule.html",[124,0.26,654,2.752]],["body/modules/NgxEditorJSModule.html",[3,0.222,4,0.222,5,0.203,6,0.198,7,0.329,9,0.443,11,0.371,12,0.253,19,1.308,23,0.017,24,0.222,34,0.668,37,1.854,52,1.481,65,0.008,66,0.011,67,0.008,71,0.745,73,0.545,96,1.986,101,3.035,104,1.561,109,2.582,110,2.66,124,0.454,142,1.631,170,0.721,171,1.636,172,2.717,175,1.322,184,2.582,217,3.051,218,2.779,252,3.254,254,1.632,268,1.379,281,2.117,283,2.247,336,3.051,345,2.117,353,3.051,384,3.694,385,1.015,386,1.636,387,1.897,388,2.001,389,2.001,390,2.779,397,2.717,398,2.001,399,1.803,403,3.254,404,4.687,405,2.117,406,3.041,407,3.775,409,4.25,410,3.716,411,3.49,412,5.028,413,2.001,414,2.57,415,4.687,416,1.702,417,4.128,423,2.779,429,3.051,430,1.427,434,3.041,435,3.041,460,3.773,467,3.051,491,2.875,639,4.972,654,5.228,655,3.391,656,3.922,657,3.391,658,5.326,659,3.922,660,3.773,661,3.773,662,5.326,663,3.922,664,3.922,665,3.922,666,3.922,667,3.922]],["title/interfaces/NgxEditorJSModuleConfig.html",[0,0.091,407,2.096]],["body/interfaces/NgxEditorJSModuleConfig.html",[0,0.131,1,0.628,2,0.878,3,0.237,4,0.237,5,0.216,6,0.156,7,0.259,9,0.348,11,0.396,12,0.317,13,0.916,14,1.633,15,1.502,18,1.149,23,0.017,24,0.393,34,0.784,41,1.592,48,1.396,52,1.117,57,1.566,65,0.009,66,0.011,67,0.009,71,0.593,72,1.924,73,0.582,76,1.282,96,2.182,104,1.666,110,2.116,111,1.746,112,1.039,117,2.558,120,1.831,121,2.434,122,3.003,125,2.377,127,2.084,140,2.26,142,1.704,144,2.215,161,2.557,164,1.924,165,3.06,169,1.924,183,2.025,184,2.215,191,2.025,205,3.003,272,2.558,287,2.966,348,2.966,350,2.558,401,2.743,403,2.558,407,3.003,422,2.743,427,2.743,436,4.428,437,3.245,438,3.245,439,3.245,440,3.245,441,3.245,442,3.245,443,4.313,444,3.619,445,3.245,446,2.558,447,2.966,448,2.966,449,3.245,450,3.619,451,3.619,452,3.619,453,3.245,454,3.619,455,3.245,456,3.619,457,3.245,458,4.313,459,3.646,460,3.942,461,3.245,462,3.245,463,2.966,464,3.245,465,3.245,466,3.245]],["title/injectables/NgxEditorJSPluginService.html",[668,2.752,669,2.225]],["body/injectables/NgxEditorJSPluginService.html",[3,0.159,4,0.159,5,0.145,6,0.241,7,0.401,9,0.464,11,0.565,12,0.295,13,0.615,17,1.399,18,1.326,19,2.087,23,0.017,24,0.159,26,2.781,34,0.631,37,1.941,38,2.117,52,1.302,65,0.006,66,0.009,67,0.006,71,0.448,73,0.391,78,3.184,81,1.518,84,2.032,89,1.342,92,2.13,93,3.194,94,2.88,96,1.916,98,3.824,104,2.375,107,3.195,112,0.698,118,1.598,125,1.07,132,4.405,134,1.173,163,2.976,166,2.976,169,2.562,170,0.772,171,2.842,268,1.087,274,4.483,280,2.88,281,3.746,283,3.419,288,1.718,320,1.843,345,1.518,405,2.267,409,3.294,410,2.407,413,3.044,416,1.182,459,3.654,491,2.267,500,3.256,518,2.976,553,3.256,647,3.406,668,2.976,669,3.195,670,2.18,671,5.607,672,2.812,673,3.631,674,4.346,675,4.2,676,5.576,677,4.2,678,4.2,679,4.2,680,2.812,681,2.812,682,4.2,683,2.812,684,2.812,685,3.631,686,4.2,687,2.812,688,5.576,689,4.82,690,4.2,691,4.2,692,2.812,693,4.2,694,3.631,695,2.812,696,1.119,697,2.812,698,2.18,699,2.812,700,2.812,701,2.431,702,2.812,703,2.812,704,2.812,705,4.2,706,4.2,707,2.812,708,4.2,709,4.2,710,2.812,711,2.431,712,2.812,713,4.2,714,2.812,715,4.2,716,2.812,717,2.812,718,2.812,719,2.812,720,4.2,721,2.812]],["title/modules/NgxEditorJSPluginServiceModule.html",[124,0.26,722,2.545]],["body/modules/NgxEditorJSPluginServiceModule.html",[3,0.288,4,0.288,5,0.263,6,0.189,7,0.314,12,0.213,23,0.016,24,0.288,38,1.43,65,0.01,66,0.013,67,0.01,71,0.763,73,0.706,112,1.564,119,2.628,124,0.34,126,2.284,129,2.284,134,2.628,170,0.935,254,1.849,257,2.292,268,1.773,385,1.316,386,2.119,387,2.458,388,2.593,389,2.593,390,2.335,397,3.215,398,2.593,399,2.335,416,1.774,430,2.292,431,4.393,432,4.393,669,4.298,671,4.393,696,2.023,722,4.916,723,4.393,724,4.393,725,5.082,726,3.401,727,2.912,728,5.082]],["title/injectables/NgxEditorJSService.html",[248,2.225,668,2.752]],["body/injectables/NgxEditorJSService.html",[3,0.059,4,0.059,5,0.054,6,0.201,7,0.334,9,0.437,11,0.497,12,0.309,13,0.229,15,0.676,18,0.708,19,1.752,21,0.853,22,0.398,23,0.017,24,0.059,32,0.774,34,0.314,37,1.339,38,0.523,52,1.113,65,0.011,66,0.004,67,0.002,71,0.499,73,0.145,76,0.32,78,1.823,92,1.11,93,1.548,94,1.064,96,0.929,97,1.134,101,0.774,104,2.153,107,3.78,109,0.997,110,1.463,111,2.121,112,0.461,113,1.217,116,2.077,118,2.49,119,1.265,125,1.463,127,1.891,136,1.064,139,1.991,141,2.192,142,1.951,144,1.383,145,0.533,146,1.865,147,2.39,148,1.435,149,1.768,150,1.327,151,2.249,152,1.064,153,1.064,154,2.063,157,0.774,158,2.352,161,3.355,163,0.741,164,0.48,165,1.151,167,1.738,169,1.394,170,0.461,171,2.413,173,0.898,174,1.002,175,0.461,178,0.564,179,1.002,182,0.898,183,2.743,184,2.899,185,3.808,187,1.134,188,1.773,189,1.134,191,2.015,192,0.599,193,0.599,194,0.947,195,2.077,197,0.599,198,0.599,202,0.564,204,3.883,209,2.062,210,1.738,211,2.123,212,1.064,213,1.435,214,2.123,220,1.605,234,0.741,242,2.462,244,0.81,248,1.064,254,0.282,272,1.134,274,4.186,280,2.204,281,2.837,283,3.572,288,3.535,317,1.316,320,3.209,326,2.352,340,1.439,345,1.002,351,1.605,352,2.623,353,3.011,356,1.942,360,1.605,363,1.439,368,2.462,370,1.605,371,3.23,405,2.249,407,1.638,409,0.685,410,2.204,411,1.641,413,2.682,422,0.685,423,0.741,424,0.904,446,1.854,448,1.775,457,2.352,459,3.86,460,1.316,478,2.623,484,0.904,485,3.602,487,4.234,491,2.643,500,0.81,505,3.444,510,1.605,518,0.741,543,3.326,545,3.796,546,2.982,553,1.439,563,3.602,564,1.605,565,1.605,567,5.451,578,0.904,580,2.165,581,1.316,594,3.602,614,0.904,620,4.049,625,0.904,626,0.904,638,0.904,647,1.134,660,0.741,661,2.15,668,1.316,669,1.738,670,0.81,674,0.904,689,0.904,694,0.904,701,0.904,711,5.092,729,1.045,730,2.165,731,1.857,732,3.847,733,3.847,734,1.605,735,1.857,736,2.623,737,1.439,738,1.857,739,1.857,740,3.602,741,4.443,742,3.475,743,3.475,744,1.857,745,1.857,746,1.857,747,1.045,748,4.443,749,3.847,750,1.045,751,1.605,752,1.857,753,1.857,754,1.045,755,1.857,756,1.605,757,3.034,758,2.623,759,1.857,760,1.605,761,1.605,762,3.034,763,1.857,764,1.045,765,5.671,766,5.671,767,4.396,768,1.857,769,1.045,770,1.857,771,1.045,772,1.857,773,1.857,774,1.045,775,1.857,776,1.857,777,1.045,778,1.857,779,1.045,780,1.857,781,1.045,782,1.857,783,1.045,784,1.857,785,1.045,786,1.605,787,1.857,788,1.045,789,1.857,790,1.439,791,1.605,792,1.857,793,1.857,794,1.045,795,1.045,796,1.045,797,0.904,798,1.045,799,1.045,800,1.045,801,1.045,802,1.045,803,1.857,804,1.045,805,1.045,806,1.045,807,1.045,808,1.045,809,0.904,810,1.045,811,1.045,812,1.045,813,1.857,814,1.439,815,1.857,816,1.045,817,3.034,818,1.045,819,2.505,820,1.045,821,3.034,822,1.045,823,1.857,824,1.045,825,1.045,826,1.857,827,1.045,828,1.857,829,1.045,830,1.045,831,1.045,832,1.857,833,1.045,834,1.045,835,0.904,836,1.045,837,3.034,838,1.045,839,2.505,840,1.045,841,1.045,842,1.045,843,1.045,844,3.847,845,1.045,846,1.045,847,1.857,848,2.505,849,3.034,850,1.045,851,1.857,852,1.045,853,1.045,854,1.045,855,1.857,856,1.857,857,1.857,858,1.857,859,1.857,860,1.045,861,1.045,862,1.857,863,1.857,864,1.045,865,1.045,866,3.034,867,1.045,868,1.045,869,3.034,870,1.045,871,3.034,872,1.045,873,1.045,874,2.505,875,2.505,876,1.857,877,1.045,878,1.857,879,1.045,880,1.045,881,1.045,882,1.045,883,1.045,884,1.045,885,1.045,886,1.045,887,1.045,888,1.045,889,1.605,890,1.045,891,1.045,892,1.045,893,1.045,894,1.045,895,1.045,896,1.857,897,3.475,898,1.045,899,1.045,900,1.045,901,1.045,902,1.045,903,1.045,904,1.857,905,1.045,906,1.045]],["title/modules/NgxEditorjsPluginsModule.html",[124,0.26,907,2.752]],["body/modules/NgxEditorjsPluginsModule.html",[1,0.459,3,0.178,4,0.178,5,0.163,6,0.117,7,0.194,9,0.262,12,0.247,21,2.097,23,0.017,24,0.178,65,0.006,66,0.009,67,0.006,71,0.806,73,0.437,81,2.463,93,2.329,124,0.36,166,3.233,170,0.579,175,1.133,182,2.207,190,2.463,254,1.232,268,0.815,385,1.618,386,1.313,387,1.523,388,1.606,389,1.606,390,2.467,397,2.329,398,1.606,399,1.447,416,1.285,418,2.99,419,1.923,429,2.615,472,3.945,722,4.782,737,3.538,907,5.677,908,2.722,909,2.722,910,2.722,911,4.782,912,4.782,913,4.782,914,4.782,915,4.782,916,4.782,917,4.782,918,4.782,919,4.782,920,4.782,921,4.782,922,4.782,923,3.148,924,3.148,925,3.945,926,4.564,927,4.564,928,4.564,929,3.945,930,3.148,931,3.148,932,3.148,933,3.148,934,3.148,935,2.722,936,3.148,937,3.148,938,3.148,939,3.148,940,3.148,941,3.148,942,3.148,943,2.722,944,3.148,945,3.148,946,3.148,947,3.148]],["title/modules/NgxTinynodesComponentsModule.html",[124,0.26,948,2.752]],["body/modules/NgxTinynodesComponentsModule.html",[3,0.285,4,0.285,5,0.26,6,0.187,23,0.016,24,0.285,65,0.01,66,0.013,67,0.01,71,0.726,73,0.699,124,0.337,170,0.925,268,1.302,385,1.302,386,2.097,387,2.432,388,2.566,389,2.566,390,3.133,397,3.194,398,2.566,399,2.311,416,1.762,429,3.587,948,5.517,949,4.347,950,4.347,951,4.347,952,5.155,953,5.155,954,3.028,955,5.029,956,5.029,957,6.261,958,4.436,959,3.898,960,5.029,961,4.436,962,3.898,963,5.029]],["title/interfaces/NgxTinynodesMatFieldComponent.html",[0,0.091,964,3.358]],["body/interfaces/NgxTinynodesMatFieldComponent.html",[0,0.133,2,1.193,3,0.322,4,0.322,5,0.294,6,0.212,23,0.016,24,0.322,40,2.455,65,0.012,66,0.014,67,0.012,71,0.767,73,0.791,221,5.231,226,5.231,230,5.834,234,4.781,235,5.834,239,3.728,954,2.752,964,5.834,965,5.69,966,7.195,967,4.031]],["title/components/NgxTinynodesMatJsonOutputComponent.html",[229,2.096,968,2.752]],["body/components/NgxTinynodesMatJsonOutputComponent.html",[3,0.22,4,0.22,5,0.201,6,0.259,11,0.501,12,0.252,13,0.851,15,1.43,19,2.255,23,0.016,24,0.22,34,0.488,52,0.781,65,0.008,66,0.011,67,0.008,71,0.415,73,0.541,104,2.573,112,1.315,123,3.052,142,1.622,170,0.716,171,2.209,188,3.072,217,4.09,227,3.364,228,5.011,229,3.25,233,4.58,245,2.229,250,2.377,256,2.55,263,5.534,264,4.579,269,4.579,270,4.579,271,4.106,274,3.679,280,2.229,320,2.55,336,3.035,345,2.1,350,3.236,387,1.882,405,2.859,413,1.985,447,4.58,467,2.229,468,3.364,475,5.205,476,3.364,477,3.364,480,5.588,482,4.579,495,4.579,530,4.579,581,2.757,588,3.364,954,3.603,958,2.757,961,5.61,962,5.408,968,4.58,969,3.891,970,3.891,971,4.943,972,3.891,973,5.296,974,6.464,975,7.138,976,3.891,977,5.296,978,3.891,979,3.891,980,3.891,981,3.891,982,5.296,983,5.296,984,6.464,985,3.891,986,3.891,987,3.891,988,3.891,989,2.757,990,3.891]],["title/modules/NgxTinynodesMatJsonOutputModule.html",[124,0.26,952,2.545]],["body/modules/NgxTinynodesMatJsonOutputModule.html",[3,0.286,4,0.286,5,0.261,6,0.188,23,0.016,24,0.286,65,0.01,66,0.013,67,0.01,71,0.783,73,0.702,123,2.209,124,0.338,170,0.929,217,2.893,268,1.307,385,1.307,386,2.106,387,2.443,388,3.485,389,2.577,390,3.139,397,3.203,398,2.577,399,2.321,416,1.767,418,4.113,419,3.085,429,2.893,952,4.977,954,2.443,961,5.062,962,3.915,967,3.578,968,5.576,971,3.578,991,4.365,992,4.365,993,4.365,994,5.05,995,5.05,996,6.277,997,6.277,998,6.277,999,4.365]],["title/modules/NgxTinynodesMatTagInputModule.html",[124,0.26,953,2.545]],["body/modules/NgxTinynodesMatTagInputModule.html",[3,0.28,4,0.28,5,0.256,6,0.184,23,0.017,24,0.28,65,0.01,66,0.013,67,0.01,71,0.778,73,0.687,124,0.331,170,0.91,217,2.834,239,3.241,268,1.281,385,1.281,386,2.063,387,2.393,388,3.453,389,2.524,390,3.11,397,3.162,398,2.524,399,2.273,416,1.744,418,3.241,419,3.022,420,4.276,429,2.834,953,4.955,954,2.393,958,4.794,959,3.835,967,3.505,971,3.505,989,5.636,1000,4.276,1001,4.276,1002,4.276,1003,4.276,1004,5.245,1005,5.245,1006,4.947,1007,4.947,1008,6.197,1009,6.197,1010,4.947]],["title/interfaces/Paragraph.html",[0,0.091,41,1.477]],["body/interfaces/Paragraph.html",[0,0.176,1,0.784,2,0.726,3,0.196,4,0.196,5,0.179,6,0.129,7,0.214,8,1.675,9,0.288,11,0.74,12,0.282,13,0.758,14,1.662,15,1.866,17,0.666,18,1.338,21,1.591,22,2.153,23,0.017,24,0.407,25,1.444,26,2.945,27,1.675,28,1.675,29,2.363,30,2.363,31,1.378,32,1.444,33,2.363,34,0.845,35,2.493,36,2.493,37,1.206,38,0.975,39,2.245,40,2.237,41,2.686,42,3.415,43,2.245,44,3.025,45,2.245,46,1.675,47,1.767,48,1.155,49,2.245,50,2.836,51,2.493,52,1.234,53,2.493,54,1.767,55,1.733,56,1.767,57,1.593,58,1.767,59,1.767,60,1.767,61,1.767,62,2.245,63,1.675,64,1.675,65,0.007,66,0.01,67,0.007]],["title/interfaces/ParagraphBlock.html",[0,0.091,43,1.785]],["body/interfaces/ParagraphBlock.html",[0,0.177,1,0.788,2,0.729,3,0.197,4,0.197,5,0.18,6,0.129,7,0.215,8,1.682,9,0.289,11,0.744,12,0.29,13,0.761,14,1.666,15,1.819,17,0.668,18,1.3,21,1.598,22,2.158,23,0.017,24,0.407,25,1.45,26,2.948,27,1.682,28,1.682,29,2.37,30,2.37,31,1.384,32,1.45,33,2.37,34,0.815,35,2.5,36,2.5,37,1.211,38,0.979,39,2.252,40,2.362,41,2.563,42,2.98,43,2.607,44,3.028,45,2.252,46,1.682,47,1.775,48,1.16,49,2.252,50,2.841,51,2.5,52,1.237,53,2.5,54,1.775,55,1.737,56,1.775,57,1.597,58,1.775,59,1.775,60,1.775,61,1.775,62,2.252,63,1.682,64,1.682,65,0.007,66,0.01,67,0.007]],["title/modules/PluginCodeModule.html",[124,0.26,911,2.545]],["body/modules/PluginCodeModule.html",[1,0.633,3,0.287,4,0.287,5,0.262,6,0.189,7,0.313,9,0.422,11,0.48,12,0.3,17,0.975,23,0.017,24,0.287,34,0.79,65,0.01,66,0.013,67,0.01,71,0.763,73,0.705,83,1.765,86,1.929,89,2.01,105,1.845,112,1.562,124,0.421,126,2.098,129,2.098,134,2.115,170,0.933,175,1.562,209,1.927,254,1.699,257,2.289,268,1.313,385,1.313,416,1.771,430,2.289,696,2.018,726,2.737,727,2.905,911,4.124,1011,5.071,1012,2.505,1013,2.753,1014,2.115,1015,2.624,1016,5.547,1017,5.071,1018,2.218,1019,5.071]],["title/interfaces/PluginConfig.html",[0,0.091,98,2.373]],["body/interfaces/PluginConfig.html",[0,0.143,1,0.717,2,0.625,3,0.169,4,0.169,5,0.154,6,0.111,7,0.184,9,0.55,11,0.723,12,0.277,13,0.652,14,1.288,15,1.65,17,1.372,18,1.124,19,0.994,23,0.017,24,0.404,31,2.071,34,0.551,38,2.207,52,1.515,55,1.343,57,1.465,65,0.006,66,0.009,67,0.006,68,4.444,69,1.708,71,0.467,72,1.37,73,0.414,74,2.874,75,2.874,76,0.913,77,2.68,78,2.276,79,2.68,80,1.822,81,3.451,82,2.113,83,1.038,84,1.442,85,1.954,86,1.134,87,1.708,88,4.889,89,2.043,90,3.409,91,4.006,92,1.662,93,1.521,94,1.708,95,2.113,96,1.872,97,2.68,98,3.179,99,3.108,100,2.68,101,1.829,102,2.874,103,3.108,104,1.746,105,2.087,106,3.906,107,1.708,108,2.113,109,1.746,110,2.514,111,1.829,112,1.089,113,2.874,114,2.368,115,3.287,116,3.097,117,2.68,118,1.668,119,2.17,120,2.276,121,2.276,122,1.609,123,1.304,124,0.2,125,1.979,126,0.994,127,1.735,128,1.954,129,0.994,130,1.954,131,2.113,132,1.822,133,2.113,134,1.243,135,1.954]],["title/interfaces/PluginConfigMap.html",[0,0.091,132,2.373]],["body/interfaces/PluginConfigMap.html",[0,0.152,1,0.709,2,0.721,3,0.195,4,0.195,5,0.178,6,0.181,7,0.3,9,0.469,11,0.653,12,0.289,15,1.522,16,1.856,17,1.378,18,1.235,19,1.621,23,0.017,24,0.416,31,1.935,34,0.432,38,2.193,52,1.23,55,1.488,57,0.968,65,0.007,66,0.01,67,0.007,68,3.695,69,1.97,71,0.518,72,1.58,73,0.478,74,3.185,75,3.185,76,1.053,77,2.97,78,2.467,79,2.97,80,2.101,81,3.49,82,2.436,83,1.197,84,1.663,85,2.253,86,1.308,87,1.97,88,4.399,89,1.958,90,3.695,91,3.695,92,1.958,93,1.754,94,1.97,95,2.436,96,1.726,97,2.101,98,3.445,99,2.436,100,2.101,101,1.434,102,2.253,103,2.436,104,1.369,105,1.251,106,2.97,107,1.97,108,2.436,109,1.369,110,2.46,111,1.434,112,0.854,113,2.253,114,1.856,115,1.97,116,2.624,117,2.101,118,1.308,119,1.434,120,2.467,121,2.467,122,1.856,123,1.504,124,0.23,125,2.145,126,1.146,127,1.88,128,2.253,129,1.146,130,2.253,131,3.444,132,2.97,133,3.444,134,1.434,135,2.253,1020,3.438]],["title/modules/PluginEmbedModule.html",[124,0.26,912,2.545]],["body/modules/PluginEmbedModule.html",[1,0.69,3,0.289,4,0.289,5,0.264,6,0.19,7,0.315,9,0.425,11,0.483,12,0.301,17,0.981,23,0.016,24,0.289,34,0.793,65,0.01,66,0.013,67,0.01,71,0.731,73,0.709,83,1.777,86,1.941,89,2.018,105,1.856,112,1.704,115,2.924,124,0.423,126,2.106,129,2.106,170,0.938,175,1.568,209,1.934,254,1.705,257,2.298,268,1.321,385,1.321,416,1.778,430,2.298,696,2.031,912,4.14,1012,2.515,1013,2.764,1014,2.128,1015,2.635,1018,2.232,1021,5.103,1022,7.171,1023,5.103,1024,3.118]],["title/modules/PluginHeaderModule.html",[124,0.26,913,2.545]],["body/modules/PluginHeaderModule.html",[1,0.636,3,0.29,4,0.29,5,0.264,6,0.19,7,0.316,9,0.426,11,0.484,12,0.301,17,0.983,23,0.017,24,0.29,34,0.794,44,3.287,65,0.01,66,0.013,67,0.01,71,0.732,73,0.711,83,1.78,86,1.945,89,2.021,105,1.86,112,1.571,124,0.424,126,2.109,129,2.109,170,0.94,175,1.571,209,1.937,254,1.708,257,2.301,268,1.324,385,1.324,416,1.781,430,2.301,696,2.036,913,4.145,1012,2.518,1013,2.767,1014,2.132,1015,2.638,1018,2.237,1025,5.114,1026,5.114,1027,5.114]],["title/modules/PluginImageModule.html",[124,0.26,914,2.545]],["body/modules/PluginImageModule.html",[1,0.633,3,0.287,4,0.287,5,0.262,6,0.189,7,0.313,9,0.422,11,0.48,12,0.3,17,0.975,23,0.017,24,0.287,34,0.79,50,3.13,65,0.01,66,0.013,67,0.01,71,0.763,73,0.705,83,1.765,86,1.929,89,2.01,105,1.845,112,1.562,124,0.421,126,2.098,129,2.098,134,2.115,170,0.933,175,1.562,209,1.927,254,1.699,257,2.289,268,1.313,385,1.313,416,1.771,430,2.289,696,2.018,726,2.737,727,2.905,914,4.124,1012,2.505,1013,2.753,1014,2.115,1015,2.624,1018,2.218,1028,5.071,1029,5.071,1030,3.593]],["title/modules/PluginInlineCodeModule.html",[124,0.26,915,2.545]],["body/modules/PluginInlineCodeModule.html",[1,0.631,3,0.286,4,0.286,5,0.261,6,0.188,7,0.312,9,0.42,11,0.478,12,0.3,17,0.971,23,0.017,24,0.286,34,0.788,65,0.01,66,0.013,67,0.01,71,0.728,73,0.702,81,3.388,83,1.758,87,2.893,89,2.005,105,1.837,106,3.085,112,1.558,124,0.42,126,2.093,129,2.093,170,0.929,175,1.558,209,1.922,254,1.694,257,2.283,268,1.307,385,1.307,416,1.767,430,2.283,696,2.01,915,4.113,935,4.365,1012,2.499,1013,2.746,1014,2.106,1015,2.618,1016,5.295,1018,2.209,1024,3.085,1031,5.05,1032,5.05,1033,6.277,1034,5.05,1035,5.05]],["title/modules/PluginLinkModule.html",[124,0.26,916,2.545]],["body/modules/PluginLinkModule.html",[1,0.633,3,0.287,4,0.287,5,0.262,6,0.189,7,0.313,9,0.422,11,0.48,12,0.3,17,0.975,23,0.017,24,0.287,34,0.79,65,0.01,66,0.013,67,0.01,71,0.763,73,0.705,83,1.765,86,1.929,89,2.01,105,1.845,107,4.1,112,1.562,124,0.421,126,2.098,129,2.098,134,2.115,170,0.933,175,1.562,209,1.927,254,1.699,257,2.289,268,1.313,385,1.313,416,1.771,430,2.289,696,2.018,726,2.737,727,2.905,916,4.124,1012,2.505,1013,2.753,1014,2.115,1015,2.624,1018,2.218,1030,3.593,1036,5.071,1037,5.071]],["title/modules/PluginListModule.html",[124,0.26,917,2.545]],["body/modules/PluginListModule.html",[1,0.633,3,0.287,4,0.287,5,0.262,6,0.189,7,0.313,9,0.422,11,0.48,12,0.3,17,0.975,23,0.017,24,0.287,26,2.984,34,0.79,65,0.01,66,0.013,67,0.01,71,0.763,73,0.705,83,1.765,86,1.929,89,2.01,105,1.845,112,1.562,124,0.421,126,2.098,129,2.098,134,2.115,170,0.933,175,1.562,209,1.927,254,1.699,257,2.289,268,1.313,385,1.313,416,1.771,430,2.289,696,2.018,726,2.737,727,2.905,917,4.124,1012,2.505,1013,2.753,1014,2.115,1015,2.624,1018,2.218,1030,3.593,1038,5.071,1039,5.071]],["title/modules/PluginMarkerModule.html",[124,0.26,918,2.545]],["body/modules/PluginMarkerModule.html",[1,0.631,3,0.286,4,0.286,5,0.261,6,0.188,7,0.312,9,0.42,11,0.478,12,0.3,17,0.971,23,0.017,24,0.286,34,0.788,41,1.921,65,0.01,66,0.013,67,0.01,71,0.761,73,0.702,83,1.758,87,2.893,89,2.005,105,1.837,106,3.085,112,1.558,124,0.42,126,2.093,129,2.093,134,2.106,170,0.929,175,1.558,209,1.922,254,1.694,257,2.283,268,1.307,385,1.307,416,1.767,430,2.283,696,2.01,726,2.726,727,2.893,918,4.113,1012,2.499,1013,2.746,1014,2.106,1015,2.618,1018,2.209,1024,3.085,1040,5.05,1041,6.83,1042,4.365,1043,5.05]],["title/modules/PluginParagraphModule.html",[124,0.26,919,2.545]],["body/modules/PluginParagraphModule.html",[1,0.638,3,0.291,4,0.291,5,0.265,6,0.191,7,0.317,9,0.427,11,0.486,12,0.301,17,0.987,23,0.017,24,0.291,34,0.796,41,2.734,65,0.011,66,0.013,67,0.011,71,0.733,73,0.714,83,1.788,86,1.953,89,2.026,105,1.868,112,1.575,124,0.425,126,2.115,129,2.115,170,0.944,175,1.575,209,1.942,254,1.712,257,2.307,268,1.329,385,1.329,416,1.785,430,2.307,696,2.044,919,4.156,1012,2.525,1013,2.774,1014,2.142,1015,2.645,1018,2.246,1024,3.137,1042,4.439,1044,5.135]],["title/modules/PluginQuoteModule.html",[124,0.26,920,2.545]],["body/modules/PluginQuoteModule.html",[1,0.635,3,0.289,4,0.289,5,0.264,6,0.19,7,0.315,9,0.425,11,0.483,12,0.301,17,0.981,23,0.016,24,0.289,34,0.793,65,0.01,66,0.013,67,0.01,71,0.731,73,0.709,83,1.777,86,1.941,89,2.192,105,1.856,112,1.704,115,2.924,124,0.423,126,2.106,129,2.106,170,0.938,175,1.568,209,1.934,254,1.705,257,2.298,268,1.321,385,1.321,416,1.778,430,2.298,696,2.031,920,4.14,1012,2.515,1013,2.764,1014,2.128,1015,2.635,1018,2.232,1024,3.118,1045,5.103,1046,7.171,1047,5.103]],["title/modules/PluginSimpleImageModule.html",[124,0.26,921,2.545]],["body/modules/PluginSimpleImageModule.html",[1,0.629,3,0.285,4,0.285,5,0.26,6,0.187,7,0.311,9,0.419,11,0.476,12,0.299,17,0.967,23,0.017,24,0.285,34,0.786,50,2.739,65,0.01,66,0.013,67,0.01,71,0.76,73,0.699,83,1.751,86,1.913,89,2,105,1.829,112,1.554,124,0.419,126,2.087,129,2.087,134,2.097,170,0.925,175,1.554,209,1.917,254,1.69,257,2.277,268,1.302,385,1.302,416,1.762,430,2.277,696,2.002,726,2.714,727,2.881,921,4.102,943,4.347,1012,2.492,1013,2.739,1014,2.097,1015,2.611,1018,2.2,1030,3.563,1048,5.029,1049,5.029,1050,6.817,1051,5.029,1052,5.029]],["title/modules/PluginWarningModule.html",[124,0.26,922,2.545]],["body/modules/PluginWarningModule.html",[1,0.69,3,0.289,4,0.289,5,0.264,6,0.19,7,0.315,9,0.425,11,0.483,12,0.301,17,0.981,23,0.016,24,0.289,34,0.793,65,0.01,66,0.013,67,0.01,71,0.731,73,0.709,83,1.777,86,1.941,89,2.018,105,1.856,112,1.704,115,2.924,124,0.423,126,2.106,129,2.106,170,0.938,175,1.568,209,1.934,254,1.705,257,2.298,268,1.321,385,1.321,416,1.778,430,2.298,696,2.031,922,4.14,1012,2.515,1013,2.764,1014,2.128,1015,2.635,1018,2.232,1024,3.118,1053,5.103,1054,7.171,1055,5.103]],["title/interfaces/ReadyMap.html",[0,0.091,152,2.225]],["body/interfaces/ReadyMap.html",[0,0.165,1,0.577,2,0.92,3,0.249,4,0.249,5,0.227,6,0.214,7,0.355,9,0.365,12,0.303,16,2.37,17,1.464,18,1.295,19,1.464,23,0.017,24,0.399,48,1.464,65,0.009,66,0.012,67,0.009,71,0.682,76,1.345,92,2.433,136,2.516,137,2.877,138,4.99,139,4.501,140,2.37,141,2.394,142,1.345,144,1.748,145,2.241,146,2.547,147,2.241,148,2.516,149,2.547,150,2.512,151,3.453,152,3.29,153,2.516,154,2.327,155,2.37,156,2.683,157,2.394,1056,4.391]],["title/interfaces/SavedMap.html",[0,0.091,153,2.225]],["body/interfaces/SavedMap.html",[0,0.165,1,0.577,2,0.92,3,0.249,4,0.249,5,0.227,6,0.214,7,0.355,9,0.365,12,0.303,16,2.37,17,1.464,18,1.295,19,1.464,23,0.017,24,0.399,48,1.464,65,0.009,66,0.012,67,0.009,71,0.682,76,1.345,92,2.433,136,2.516,137,2.877,138,4.99,139,4.501,140,2.37,141,2.668,142,1.345,144,1.748,145,2.241,146,2.547,147,2.241,148,2.516,149,2.547,150,1.921,151,3.453,152,2.516,153,3.29,154,2.327,155,2.37,156,2.683,157,2.394,1057,4.391]],["title/interfaces/ToolSettingsMap.html",[0,0.091,94,2.225]],["body/interfaces/ToolSettingsMap.html",[0,0.152,1,0.708,2,0.719,3,0.194,4,0.194,5,0.177,6,0.18,7,0.3,9,0.469,11,0.652,12,0.289,15,1.52,16,1.851,17,1.377,18,1.233,19,1.618,23,0.017,24,0.416,31,1.931,34,0.43,38,2.193,52,1.229,55,1.485,57,0.965,65,0.007,66,0.01,67,0.007,68,3.689,69,1.965,71,0.517,72,1.576,73,0.476,74,3.179,75,3.179,76,1.05,77,2.964,78,2.463,79,2.964,80,2.095,81,3.487,82,2.429,83,1.194,84,1.658,85,2.247,86,1.304,87,1.965,88,4.394,89,2.063,90,4.233,91,4.011,92,1.955,93,2.475,94,2.78,95,3.437,96,1.724,97,2.095,98,2.964,99,2.429,100,2.095,101,1.43,102,2.247,103,2.429,104,1.365,105,1.247,106,2.964,107,1.965,108,2.429,109,1.365,110,2.328,111,1.43,112,0.851,113,2.247,114,1.851,115,1.965,116,2.619,117,2.095,118,1.304,119,1.43,120,2.463,121,2.463,122,1.851,123,1.5,124,0.23,125,2.141,126,1.143,127,1.877,128,2.247,129,1.143,130,2.247,131,2.429,132,2.095,133,2.429,134,1.43,135,2.247,1058,3.429]],["title/changelog.html",[1059,1.985,1060,2.129,1061,2.518]],["body/changelog.html",[0,0.092,1,0.395,12,0.284,23,0.011,32,2.223,34,0.493,37,1.368,38,1.501,45,1.805,65,0.008,66,0.011,67,0.008,78,3.13,80,2.4,89,1.255,92,1.255,96,1.203,124,0.405,127,2.333,142,1.632,147,2.005,154,1.939,161,1.805,173,1.9,175,1.502,201,2.251,209,1.203,229,3.662,241,2.574,252,3.697,254,1.061,257,1.429,262,2.784,268,1.017,276,2.784,317,3.777,336,2.251,353,3.055,368,2.784,390,1.805,401,3.493,405,2.121,410,3.055,416,1.106,445,3.046,446,2.4,463,2.784,471,3.396,491,2.121,502,4.133,505,3.046,545,3.046,554,5.231,555,3.396,561,2.784,579,3.046,608,4.609,645,4.609,647,3.257,660,4.957,669,2.251,673,3.396,737,3.046,767,3.046,786,4.609,790,3.046,809,3.396,835,3.396,954,1.9,1012,1.564,1059,2.4,1061,4.133,1062,3.929,1063,5.231,1064,3.396,1065,3.929,1066,3.396,1067,3.929,1068,3.046,1069,3.396,1070,3.929,1071,6.49,1072,3.929,1073,6.785,1074,3.929,1075,3.929,1076,3.929,1077,3.929,1078,3.929,1079,3.929,1080,6.49,1081,3.396,1082,4.133,1083,5.331,1084,3.929,1085,5.331,1086,5.424,1087,3.929,1088,5.331,1089,5.331,1090,3.929,1091,5.61,1092,3.929,1093,3.929,1094,3.929,1095,5.331,1096,3.929,1097,3.929,1098,3.929,1099,3.929,1100,6.052,1101,3.929,1102,3.929,1103,5.331,1104,3.929,1105,3.396,1106,3.929,1107,3.929,1108,3.046,1109,3.929,1110,5.331,1111,3.929,1112,3.929,1113,3.929,1114,3.046,1115,3.929,1116,3.929,1117,3.929,1118,3.929,1119,3.396,1120,3.396,1121,3.929,1122,3.929,1123,3.929,1124,5.331,1125,5.331,1126,3.929,1127,4.609,1128,3.396,1129,3.929,1130,3.929,1131,3.929,1132,3.929,1133,3.929,1134,3.929,1135,3.929,1136,3.929,1137,3.929,1138,3.929,1139,3.929,1140,3.929,1141,3.929,1142,3.929,1143,3.396,1144,3.929,1145,3.396]],["title/contributing.html",[1059,1.985,1060,2.129,1146,2.809]],["body/contributing.html",[0,0.078,5,0.172,19,1.113,23,0.01,25,1.392,45,1.534,65,0.01,66,0.01,67,0.007,84,2.303,101,1.985,127,1.587,147,2.429,154,1.732,155,1.802,166,3.931,173,2.684,178,1.802,180,2.04,184,1.329,212,2.728,274,2.909,288,2.909,340,2.588,386,1.392,413,1.704,446,2.04,514,4.116,551,2.886,557,2.886,561,2.366,647,2.909,661,2.366,734,2.886,736,2.886,740,2.886,756,2.886,758,2.886,761,2.886,790,2.588,791,2.886,797,2.886,814,2.588,889,5.229,929,2.886,1015,1.985,1016,5.304,1082,5.769,1108,2.588,1119,2.886,1127,4.116,1128,2.886,1143,4.116,1145,2.886,1146,4.116,1147,4.116,1148,5.548,1149,3.339,1150,3.339,1151,3.339,1152,3.339,1153,3.339,1154,3.339,1155,6.842,1156,4.761,1157,3.339,1158,5.548,1159,2.886,1160,3.339,1161,3.339,1162,4.761,1163,3.339,1164,5.548,1165,2.588,1166,3.339,1167,3.339,1168,3.339,1169,3.339,1170,3.339,1171,6.049,1172,2.886,1173,3.339,1174,3.339,1175,3.339,1176,3.339,1177,4.116,1178,3.339,1179,3.339,1180,4.116,1181,3.339,1182,4.761,1183,3.339,1184,3.339,1185,3.339,1186,4.761,1187,3.339,1188,6.395,1189,3.339,1190,6.395,1191,4.761,1192,2.886,1193,4.761,1194,3.339,1195,3.339,1196,3.339,1197,3.339,1198,3.339,1199,3.339,1200,3.339,1201,3.339,1202,4.761,1203,3.339,1204,3.339,1205,4.761,1206,3.339,1207,3.339,1208,3.339,1209,4.761,1210,3.339,1211,4.761,1212,6.395,1213,3.339,1214,3.339,1215,3.339,1216,4.761,1217,3.339,1218,3.339,1219,3.339,1220,3.339,1221,3.339,1222,3.339,1223,3.339,1224,3.339,1225,3.339,1226,3.339,1227,3.339,1228,3.339,1229,3.339,1230,3.339,1231,4.761,1232,5.548,1233,3.339,1234,3.339,1235,3.339,1236,3.339,1237,3.339,1238,3.339,1239,3.339,1240,3.339,1241,4.761,1242,3.339,1243,3.339,1244,2.886,1245,3.339,1246,3.339,1247,3.339,1248,4.761,1249,3.339,1250,3.339,1251,3.339,1252,4.761,1253,3.339,1254,2.886,1255,3.339,1256,3.339,1257,3.339,1258,3.339,1259,3.339,1260,4.761,1261,3.339,1262,3.339,1263,2.886,1264,3.339,1265,3.339,1266,3.339,1267,3.339,1268,3.339,1269,3.339,1270,3.339,1271,3.339,1272,3.339,1273,3.339,1274,3.339,1275,3.339,1276,3.339,1277,4.761,1278,3.339,1279,3.339,1280,3.339,1281,3.339,1282,3.339,1283,3.339,1284,3.339,1285,3.339,1286,4.761,1287,4.761,1288,4.761,1289,3.339,1290,3.339,1291,3.339,1292,3.339,1293,3.339,1294,3.339,1295,3.339,1296,3.339,1297,3.339,1298,3.339,1299,3.339,1300,3.339,1301,4.761,1302,3.339,1303,4.761,1304,3.339,1305,3.339,1306,3.339,1307,3.339,1308,4.761,1309,2.886,1310,3.339,1311,3.339,1312,3.339,1313,3.339,1314,3.339,1315,3.339,1316,3.339,1317,3.339,1318,3.339,1319,3.339,1320,3.339,1321,3.339,1322,3.339,1323,3.339,1324,3.339,1325,3.339,1326,3.339,1327,3.339,1328,3.339,1329,3.339,1330,3.339,1331,3.339,1332,3.339,1333,3.339,1334,3.339,1335,3.339,1336,3.339,1337,3.339,1338,3.339,1339,3.339,1340,3.339]],["title/dependencies.html",[386,1.947,1120,2.809]],["body/dependencies.html",[23,0.017,44,2.32,65,0.011,66,0.013,67,0.011,73,0.737,123,2.83,145,2.706,239,3.475,386,2.212,419,3.24,698,4.111,767,4.111,961,3.758,967,3.758,999,4.585,1159,4.585,1341,5.304,1342,7.746,1343,5.304,1344,6.469,1345,5.304,1346,5.304,1347,5.304,1348,5.304,1349,5.304,1350,6.469,1351,5.593,1352,5.304,1353,5.304,1354,4.585,1355,6.469,1356,5.304,1357,5.304,1358,5.304,1359,5.304,1360,5.304,1361,5.304,1362,5.304,1363,5.304,1364,5.304,1365,5.304,1366,5.304]],["title/miscellaneous/enumerations.html",[1367,1.754,1368,4.036]],["body/miscellaneous/enumerations.html",[1,0.735,6,0.22,7,0.365,12,0.248,13,1.293,23,0.015,65,0.012,66,0.014,67,0.012,69,3.387,77,3.612,78,2.586,79,3.612,80,3.612,81,3.946,83,2.403,280,3.955,1367,3.191,1368,5.11,1369,4.583]],["title/miscellaneous/functions.html",[1367,1.754,1370,4.036]],["body/miscellaneous/functions.html",[6,0.262,7,0.435,9,0.558,10,3.442,11,0.46,12,0.305,13,1.063,23,0.016,38,1.889,52,1.489,65,0.01,66,0.013,67,0.01,78,2.935,92,1.552,96,2.055,101,2.026,104,2.805,110,2.552,111,2.555,124,0.41,149,1.934,165,2.232,170,0.893,171,2.555,174,2.622,179,3.307,184,1.934,281,3.307,400,4.199,407,2.622,413,3.595,414,4.014,425,5.296,427,4.617,428,4.199,433,5.296,459,4.014,491,2.622,518,4.34,519,4.199,546,3.766,575,5.296,685,4.199,726,3.307,1367,2.622,1370,4.199,1371,4.199,1372,6.091,1373,4.858,1374,4.858,1375,4.858,1376,4.199,1377,4.858,1378,4.858,1379,4.858,1380,4.858,1381,4.858,1382,4.858,1383,4.858,1384,4.858,1385,4.858]],["title/index.html",[13,0.711,1059,1.985,1060,2.129]],["body/index.html",[0,0.103,1,0.44,12,0.319,14,1.284,23,0.012,34,0.549,38,1.232,65,0.009,66,0.012,67,0.009,78,2.794,84,2.116,101,2.663,111,2.389,114,2.362,116,2.362,123,2.506,124,0.428,127,1.459,142,1.754,147,2.233,169,2.011,175,1.682,178,2.362,182,2.771,209,1.754,229,3.092,241,2.867,245,2.507,248,2.507,250,2.673,252,2.673,254,1.181,259,3.782,260,3.392,262,3.1,288,3.5,316,3.782,317,3.1,336,3.659,350,2.673,353,4.134,365,3.392,366,3.782,367,3.782,386,1.825,390,2.011,399,2.011,410,3.282,467,2.507,473,3.392,474,3.782,491,3.092,502,3.392,579,4.44,581,3.1,647,3.5,660,4.525,661,4.058,669,3.282,730,3.782,751,3.782,925,3.782,954,2.116,1012,2.542,1061,4.951,1063,4.952,1064,4.952,1066,4.952,1068,4.44,1069,3.782,1082,5.252,1086,4.951,1105,4.952,1114,5.452,1147,5.521,1386,5.728,1387,4.375,1388,5.728,1389,4.375,1390,4.375,1391,4.375,1392,4.375,1393,4.375,1394,4.375,1395,4.375,1396,4.375,1397,4.375,1398,4.375,1399,4.375,1400,4.375,1401,4.375,1402,4.375,1403,5.728,1404,4.375,1405,4.375,1406,4.375,1407,4.375,1408,5.728,1409,5.728,1410,4.375,1411,3.782,1412,4.375,1413,3.782,1414,3.782,1415,4.375,1416,4.375]],["title/license.html",[1059,1.985,1060,2.129,1417,3.249]],["body/license.html",[23,0.013,37,1.754,65,0.01,66,0.013,67,0.01,101,2.614,155,2.72,242,3.57,399,2.316,814,3.906,954,2.437,1091,4.356,1108,5.29,1114,3.906,1172,4.356,1177,4.356,1180,5.419,1192,4.356,1263,4.356,1309,4.356,1413,4.356,1414,4.356,1418,4.356,1419,5.039,1420,5.039,1421,6.824,1422,5.039,1423,5.039,1424,5.039,1425,5.039,1426,5.039,1427,6.269,1428,7.737,1429,5.039,1430,5.039,1431,5.039,1432,6.269,1433,5.039,1434,5.039,1435,5.039,1436,4.356,1437,5.039,1438,5.039,1439,5.039,1440,5.039,1441,6.269,1442,5.039,1443,5.039,1444,5.039,1445,5.039,1446,5.039,1447,5.039,1448,6.269,1449,6.269,1450,5.039,1451,5.039,1452,5.039,1453,5.039,1454,5.039,1455,5.039,1456,5.039,1457,5.039,1458,5.039,1459,5.039,1460,5.039,1461,5.039,1462,5.039,1463,5.039,1464,5.039,1465,5.039,1466,5.039,1467,5.039,1468,5.039,1469,5.039,1470,5.039,1471,5.039,1472,5.039,1473,5.039,1474,5.039,1475,5.039]],["title/modules.html",[385,1.37]],["body/modules.html",[23,0.013,25,3.296,65,0.01,66,0.013,67,0.01,114,4.145,384,3.092,385,1.31,639,3.316,654,3.585,722,3.316,907,3.585,911,3.316,912,4.118,913,3.316,914,3.316,915,3.316,916,3.316,917,3.316,918,3.316,919,3.316,920,3.316,921,3.316,922,3.316,948,3.585,952,3.316,953,3.316,1351,6.638,1476,7.679,1477,8.047,1478,7.903]],["title/overview.html",[1479,4.573]],["body/overview.html",[2,0.696,23,0.016,46,1.606,65,0.007,66,0.01,67,0.007,124,0.222,245,3.914,248,3.169,250,4.343,253,3.919,256,4.658,268,0.86,336,1.903,384,4.406,385,0.86,386,1.385,387,1.606,388,1.694,389,1.694,390,1.526,391,2.871,392,2.871,393,2.871,394,2.871,395,2.871,396,4.288,397,2.42,398,1.694,399,1.526,467,1.903,639,4.726,640,2.871,641,2.871,642,2.871,643,2.871,654,4.521,655,2.871,657,2.871,669,3.169,670,2.574,722,4.658,723,2.871,724,2.871,907,5.668,908,2.871,909,2.871,910,2.871,911,4.476,912,4.476,913,4.476,914,4.476,915,4.476,916,4.476,917,4.476,918,4.476,919,4.476,920,4.476,921,4.476,922,4.476,948,4.949,949,2.871,950,2.871,951,2.871,952,4.726,953,4.726,968,4.84,989,5.171,991,2.871,992,2.871,993,2.871,1000,2.871,1001,2.871,1002,2.871,1003,2.871,1004,4.288,1005,4.288,1479,2.871,1480,3.321,1481,3.321,1482,3.321,1483,3.321]],["title/todo.html",[1059,1.985,1060,2.129,1484,2.809]],["body/todo.html",[12,0.306,23,0.013,65,0.011,66,0.013,67,0.011,84,3.15,110,2.668,114,3.515,118,2.04,123,3.068,124,0.359,141,2.236,146,2.135,161,2.464,162,3.799,205,2.894,229,2.894,233,3.799,254,1.448,260,4.157,276,3.799,385,1.388,467,3.073,491,3.515,561,3.799,583,4.636,760,4.636,954,2.594,1014,2.236,1068,4.157,1081,4.636,1086,4.157,1244,4.636,1254,4.636,1354,4.636,1411,6.649,1418,4.636,1436,4.636,1484,4.636,1485,5.362,1486,5.362,1487,5.362,1488,5.362,1489,5.362,1490,5.362,1491,5.362,1492,5.362,1493,5.362,1494,5.362,1495,5.362,1496,5.362,1497,5.362,1498,5.362,1499,5.362]],["title/miscellaneous/typealiases.html",[1367,1.754,1500,4.668]],["body/miscellaneous/typealiases.html",[1,0.647,6,0.239,7,0.397,8,2.543,11,0.686,12,0.27,13,1.15,18,1.333,23,0.016,25,2.193,26,2.193,27,2.543,28,2.543,29,3.113,30,3.113,31,2.093,32,2.193,33,3.113,38,1.957,39,2.416,43,2.416,49,2.416,55,1.97,62,2.416,63,2.543,64,3.113,65,0.011,66,0.013,67,0.011,69,3.013,74,3.445,75,3.445,77,3.212,78,2.3,79,3.212,84,2.543,85,4.217,86,2,87,3.013,88,4.217,89,1.68,90,3.445,91,4.217,1367,2.838,1369,5.391,1501,5.258,1502,6.435]],["title/miscellaneous/variables.html",[1165,3.619,1367,1.754]],["body/miscellaneous/variables.html",[6,0.264,7,0.418,11,0.658,12,0.297,13,0.771,18,0.648,19,1.175,23,0.016,34,0.964,38,1.392,65,0.007,66,0.01,67,0.007,69,2.019,78,1.541,92,1.58,100,4.245,110,2.173,112,1.62,114,1.902,118,1.34,119,1.469,120,2.854,121,2.96,122,1.902,123,1.541,124,0.236,126,1.649,127,2.365,128,2.309,129,1.649,130,2.309,134,2.062,135,2.309,142,1.079,146,1.403,149,1.403,157,1.469,164,2.273,168,2.153,169,1.619,170,0.91,173,1.704,183,1.704,190,1.902,191,2.392,192,2.834,193,2.019,194,1.798,195,1.902,196,2.019,197,2.019,198,2.019,199,2.834,200,2.153,201,2.019,202,2.669,203,2.153,216,2.731,217,3.274,218,2.496,219,4.275,221,3.834,229,1.902,231,5.356,241,3.241,250,2.153,252,3.021,253,3.504,254,1.672,255,5.356,256,2.309,257,2.254,272,2.153,280,4.38,396,3.834,401,2.309,403,3.021,422,3.241,427,2.309,436,3.504,437,2.731,461,2.731,462,2.731,463,2.496,464,2.731,465,3.834,466,2.731,473,2.731,698,2.731,954,2.392,958,4.623,959,2.731,971,2.496,989,3.504,1004,3.834,1005,3.834,1165,2.731,1367,1.902,1369,4.429,1371,3.046,1372,4.275,1376,3.046,1503,4.945,1504,4.945,1505,4.945,1506,5.714,1507,3.523,1508,3.523,1509,5.714,1510,4.945,1511,4.945,1512,5.714,1513,3.523,1514,3.523,1515,3.523,1516,3.523,1517,5.714,1518,3.523,1519,3.523]]],"invertedIndex":[["",{"_index":23,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":194,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["0.0.5",{"_index":1362,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":1366,"title":{},"body":{"dependencies.html":{}}}],["0.13.0",{"_index":1360,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":46,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"overview.html":{}}}],["1.2",{"_index":1125,"title":{},"body":{"changelog.html":{}}}],["1.4",{"_index":1338,"title":{},"body":{"contributing.html":{}}}],["12th",{"_index":1122,"title":{},"body":{"changelog.html":{}}}],["13th",{"_index":1117,"title":{},"body":{"changelog.html":{}}}],["15th",{"_index":1106,"title":{},"body":{"changelog.html":{}}}],["2",{"_index":1482,"title":{},"body":{"overview.html":{}}}],["2.0.8",{"_index":1359,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":1363,"title":{},"body":{"dependencies.html":{}}}],["2019",{"_index":1091,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["21",{"_index":1480,"title":{},"body":{"overview.html":{}}}],["22nd",{"_index":1090,"title":{},"body":{"changelog.html":{}}}],["28",{"_index":1483,"title":{},"body":{"overview.html":{}}}],["3.1.4",{"_index":1357,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":1481,"title":{},"body":{"overview.html":{}}}],["6",{"_index":47,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["6.5.2",{"_index":1364,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":1407,"title":{},"body":{"index.html":{}}}],["8.0.0",{"_index":1348,"title":{},"body":{"dependencies.html":{}}}],["8.1.0",{"_index":1355,"title":{},"body":{"dependencies.html":{}}}],["8.1.2",{"_index":1344,"title":{},"body":{"dependencies.html":{}}}],["8.1.3",{"_index":1342,"title":{},"body":{"dependencies.html":{}}}],["_disabled",{"_index":307,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["_empty",{"_index":313,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["_focused",{"_index":294,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["_placeholder",{"_index":289,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["_required",{"_index":300,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["a.time",{"_index":876,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["above",{"_index":1447,"title":{},"body":{"license.html":{}}}],["abusive",{"_index":1304,"title":{},"body":{"contributing.html":{}}}],["acceptable",{"_index":1258,"title":{},"body":{"contributing.html":{}}}],["accepting",{"_index":1223,"title":{},"body":{"contributing.html":{}}}],["access",{"_index":316,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"index.html":{}}}],["accessor",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessors",{"_index":490,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["account",{"_index":1294,"title":{},"body":{"contributing.html":{}}}],["acting",{"_index":1295,"title":{},"body":{"contributing.html":{}}}],["action",{"_index":1263,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["actions",{"_index":792,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["active",{"_index":504,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["actual_component",{"_index":990,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["adapted",{"_index":1336,"title":{},"body":{"contributing.html":{}}}],["add",{"_index":1411,"title":{},"body":{"index.html":{},"todo.html":{}}}],["added",{"_index":32,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["additional",{"_index":21,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["address",{"_index":1248,"title":{},"body":{"contributing.html":{}}}],["adds",{"_index":770,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["advances",{"_index":1238,"title":{},"body":{"contributing.html":{}}}],["aftercontentinit",{"_index":226,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{}}}],["against",{"_index":766,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["age",{"_index":1196,"title":{},"body":{"contributing.html":{}}}],["aliases",{"_index":1501,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aligned",{"_index":1273,"title":{},"body":{"contributing.html":{}}}],["allows",{"_index":457,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{}}}],["along",{"_index":645,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{},"changelog.html":{}}}],["and/or",{"_index":1439,"title":{},"body":{"license.html":{}}}],["angular",{"_index":353,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"index.html":{}}}],["angular/animations",{"_index":1341,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":1343,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/a11y",{"_index":223,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["angular/cdk/coercion",{"_index":225,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["angular/common",{"_index":419,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"dependencies.html":{}}}],["angular/compiler",{"_index":1345,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":73,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"dependencies.html":{}}}],["angular/flex",{"_index":1346,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":239,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"dependencies.html":{}}}],["angular/material",{"_index":967,"title":{},"body":{"interfaces/NgxTinynodesMatFieldComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"dependencies.html":{}}}],["angular/material/form",{"_index":240,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSMatFieldModule.html":{}}}],["angular/material/input",{"_index":653,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{}}}],["angular/platform",{"_index":1350,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":1353,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":209,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"changelog.html":{},"index.html":{}}}],["apicall",{"_index":742,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["apicall(options",{"_index":753,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["app",{"_index":401,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["appearance",{"_index":1206,"title":{},"body":{"contributing.html":{}}}],["application",{"_index":410,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"index.html":{}}}],["applicationref",{"_index":749,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["applies",{"_index":1284,"title":{},"body":{"contributing.html":{}}}],["appointed",{"_index":1296,"title":{},"body":{"contributing.html":{}}}],["appropriate",{"_index":1260,"title":{},"body":{"contributing.html":{}}}],["architecture",{"_index":1075,"title":{},"body":{"changelog.html":{}}}],["area",{"_index":456,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["args",{"_index":214,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["argument",{"_index":757,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["arguments",{"_index":762,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["aria",{"_index":332,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["arising",{"_index":1473,"title":{},"body":{"license.html":{}}}],["array",{"_index":518,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/functions.html":{}}}],["associated",{"_index":1429,"title":{},"body":{"license.html":{}}}],["async",{"_index":478,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["async/await",{"_index":809,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"changelog.html":{}}}],["attach",{"_index":473,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["attached",{"_index":498,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["attacks",{"_index":1243,"title":{},"body":{"contributing.html":{}}}],["attention",{"_index":1237,"title":{},"body":{"contributing.html":{}}}],["attribution",{"_index":1335,"title":{},"body":{"contributing.html":{}}}],["authors",{"_index":1464,"title":{},"body":{"license.html":{}}}],["autofocus",{"_index":438,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["autofocused",{"_index":444,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["autosave",{"_index":162,"title":{},"body":{"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"todo.html":{}}}],["autosaves",{"_index":509,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["available",{"_index":25,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"contributing.html":{},"modules.html":{},"miscellaneous/typealiases.html":{}}}],["await",{"_index":594,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["b",{"_index":874,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["b.time",{"_index":875,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["back",{"_index":583,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"todo.html":{}}}],["background",{"_index":58,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["ban",{"_index":1274,"title":{},"body":{"contributing.html":{}}}],["base",{"_index":10,"title":{},"body":{"interfaces/Block.html":{},"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"miscellaneous/functions.html":{}}}],["based",{"_index":378,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["basic",{"_index":63,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["before",{"_index":514,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"contributing.html":{}}}],["behavior",{"_index":1212,"title":{},"body":{"contributing.html":{}}}],["behaviors",{"_index":1278,"title":{},"body":{"contributing.html":{}}}],["behaviorsubject",{"_index":139,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["behaviorsubject(editor",{"_index":830,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["behaviorsubject(false",{"_index":580,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["behaviorsubject(undefined",{"_index":867,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["behaviorsubject(value",{"_index":898,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["being",{"_index":1217,"title":{},"body":{"contributing.html":{}}}],["below",{"_index":1406,"title":{},"body":{"index.html":{}}}],["best",{"_index":1227,"title":{},"body":{"contributing.html":{}}}],["beta.26",{"_index":1349,"title":{},"body":{"dependencies.html":{}}}],["better",{"_index":1085,"title":{},"body":{"changelog.html":{}}}],["bind",{"_index":813,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["binding",{"_index":323,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["block",{"_index":1,"title":{"interfaces/Block.html":{}},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"modules/NgxEditorjsPluginsModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["blockdata",{"_index":68,"title":{"interfaces/BlockData.html":{}},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["blockplaceholder",{"_index":439,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["blocks",{"_index":146,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["blocktypes",{"_index":64,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["blur",{"_index":508,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["body",{"_index":1197,"title":{},"body":{"contributing.html":{}}}],["boolean",{"_index":57,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["bootstrap",{"_index":389,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}],["border",{"_index":54,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["both",{"_index":1285,"title":{},"body":{"contributing.html":{}}}],["bottom",{"_index":455,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["box",{"_index":1396,"title":{},"body":{"index.html":{}}}],["break",{"_index":1137,"title":{},"body":{"changelog.html":{}}}],["breaking",{"_index":1096,"title":{},"body":{"changelog.html":{}}}],["browse",{"_index":1477,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1351,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["bug",{"_index":1129,"title":{},"body":{"changelog.html":{}}}],["build",{"_index":1127,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["bump",{"_index":1094,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":185,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["called",{"_index":356,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["calling",{"_index":208,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{}}}],["calls",{"_index":505,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{}}}],["caption",{"_index":53,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["caret",{"_index":759,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["cd",{"_index":495,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["change",{"_index":154,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"changelog.html":{},"contributing.html":{}}}],["changed",{"_index":534,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["changedetection",{"_index":269,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["changedetectionstrategy",{"_index":227,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":270,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["changedetectorref",{"_index":228,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["changelog",{"_index":1061,"title":{"changelog.html":{}},"body":{"changelog.html":{},"index.html":{}}}],["changelogs",{"_index":1065,"title":{},"body":{"changelog.html":{}}}],["changemap",{"_index":136,"title":{"interfaces/ChangeMap.html":{}},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["changes",{"_index":561,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"changelog.html":{},"contributing.html":{},"todo.html":{}}}],["changes.blocks",{"_index":598,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["changes.blocks.firstchange",{"_index":600,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["changes.blocks.previousvalue",{"_index":599,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["changeskeys",{"_index":605,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["changeskeys.includes(key",{"_index":611,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["charge",{"_index":1424,"title":{},"body":{"license.html":{}}}],["ci",{"_index":1486,"title":{},"body":{"todo.html":{}}}],["circumstances",{"_index":1315,"title":{},"body":{"contributing.html":{}}}],["claim",{"_index":1467,"title":{},"body":{"license.html":{}}}],["clarified",{"_index":1302,"title":{},"body":{"contributing.html":{}}}],["clarifying",{"_index":1257,"title":{},"body":{"contributing.html":{}}}],["class",{"_index":170,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":1078,"title":{},"body":{"changelog.html":{}}}],["clean",{"_index":901,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["cleaning",{"_index":900,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["cleanupsubjects(options",{"_index":902,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["clear",{"_index":741,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["clear(options",{"_index":763,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["click",{"_index":341,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["cluster_ngxeditorjscomponentmodule",{"_index":391,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjscomponentmodule_declarations",{"_index":392,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjscomponentmodule_exports",{"_index":394,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjscomponentmodule_ngxeditorjscomponent_providers",{"_index":393,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjscomponentmodule_providers",{"_index":395,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjsmatfieldmodule",{"_index":640,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjsmatfieldmodule_declarations",{"_index":641,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjsmatfieldmodule_exports",{"_index":643,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjsmatfieldmodule_ngxeditorjsmatfieldcomponent_providers",{"_index":642,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjsmodule",{"_index":655,"title":{},"body":{"modules/NgxEditorJSModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjsmodule_exports",{"_index":657,"title":{},"body":{"modules/NgxEditorJSModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjsmodule_imports",{"_index":656,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["cluster_ngxeditorjspluginservicemodule",{"_index":723,"title":{},"body":{"modules/NgxEditorJSPluginServiceModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjspluginservicemodule_providers",{"_index":724,"title":{},"body":{"modules/NgxEditorJSPluginServiceModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjspluginsmodule",{"_index":908,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjspluginsmodule_exports",{"_index":910,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{},"overview.html":{}}}],["cluster_ngxeditorjspluginsmodule_imports",{"_index":909,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodescomponentsmodule",{"_index":949,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodescomponentsmodule_exports",{"_index":951,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodescomponentsmodule_imports",{"_index":950,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodesmatjsonoutputmodule",{"_index":991,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodesmatjsonoutputmodule_declarations",{"_index":992,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodesmatjsonoutputmodule_exports",{"_index":993,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodesmattaginputmodule",{"_index":1000,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodesmattaginputmodule_declarations",{"_index":1001,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodesmattaginputmodule_exports",{"_index":1003,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}],["cluster_ngxtinynodesmattaginputmodule_ngxtinynodesmattaginputcomponent_providers",{"_index":1002,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}],["code",{"_index":1016,"title":{},"body":{"modules/PluginCodeModule.html":{},"modules/PluginInlineCodeModule.html":{},"contributing.html":{}}}],["code.module",{"_index":936,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["code.module.ts",{"_index":1032,"title":{},"body":{"modules/PluginInlineCodeModule.html":{}}}],["code/inline",{"_index":935,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginInlineCodeModule.html":{}}}],["coercebooleanproperty",{"_index":224,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["coercebooleanproperty(disabled",{"_index":311,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["coercebooleanproperty(focused",{"_index":298,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["coercebooleanproperty(required",{"_index":305,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["collapse",{"_index":983,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["collection",{"_index":1386,"title":{},"body":{"index.html":{}}}],["comments",{"_index":1241,"title":{},"body":{"contributing.html":{}}}],["commits",{"_index":1269,"title":{},"body":{"contributing.html":{}}}],["common",{"_index":1132,"title":{},"body":{"changelog.html":{}}}],["commonmodule",{"_index":418,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{}}}],["community",{"_index":1190,"title":{},"body":{"contributing.html":{}}}],["compatible",{"_index":259,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"index.html":{}}}],["complaints",{"_index":1310,"title":{},"body":{"contributing.html":{}}}],["completly",{"_index":1115,"title":{},"body":{"changelog.html":{}}}],["component",{"_index":229,"title":{"components/NgxTinynodesMatJsonOutputComponent.html":{}},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"changelog.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["component_template",{"_index":985,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["components",{"_index":336,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["components.module.ts",{"_index":956,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{}}}],["components/mat",{"_index":957,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{}}}],["components/src/lib/components/mat",{"_index":971,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"miscellaneous/variables.html":{}}}],["components/src/lib/ngx",{"_index":955,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{}}}],["components/src/lib/types/components.ts",{"_index":965,"title":{},"body":{"interfaces/NgxTinynodesMatFieldComponent.html":{}}}],["components/src/test.ts",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conditions",{"_index":1446,"title":{},"body":{"license.html":{}}}],["conduct",{"_index":1155,"title":{},"body":{"contributing.html":{}}}],["confidentiality",{"_index":1318,"title":{},"body":{"contributing.html":{}}}],["config",{"_index":110,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/CreateEditorJSOptions.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/functions.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["config.data",{"_index":637,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["config.ts",{"_index":1372,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["config/editor",{"_index":576,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["config/module",{"_index":426,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{}}}],["configs",{"_index":131,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["configuration",{"_index":96,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/functions.html":{}}}],["configurations",{"_index":685,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"miscellaneous/functions.html":{}}}],["configure",{"_index":765,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["connection",{"_index":1474,"title":{},"body":{"license.html":{}}}],["considered",{"_index":1251,"title":{},"body":{"contributing.html":{}}}],["const",{"_index":125,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["constructive",{"_index":1224,"title":{},"body":{"contributing.html":{}}}],["constructor",{"_index":345,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["constructor(@inject(pluginclasses",{"_index":702,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["constructor(cd",{"_index":976,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["constructor(editorjs",{"_index":747,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["constructor(el",{"_index":493,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["constructor(pluginconfigmap",{"_index":680,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["constructor(private",{"_index":981,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["contacting",{"_index":1307,"title":{},"body":{"contributing.html":{}}}],["container",{"_index":340,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["containers/editorjs",{"_index":665,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["containers/editorjs/editorjs.module",{"_index":664,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["containing",{"_index":138,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["contains",{"_index":113,"title":{},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["content",{"_index":515,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["context",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["continue",{"_index":1141,"title":{},"body":{"changelog.html":{}}}],["contract",{"_index":1471,"title":{},"body":{"license.html":{}}}],["contributes",{"_index":1213,"title":{},"body":{"contributing.html":{}}}],["contributing",{"_index":1146,"title":{"contributing.html":{}},"body":{"contributing.html":{}}}],["contributions",{"_index":1272,"title":{},"body":{"contributing.html":{}}}],["contributor",{"_index":1277,"title":{},"body":{"contributing.html":{}}}],["contributors",{"_index":1187,"title":{},"body":{"contributing.html":{}}}],["control",{"_index":276,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"changelog.html":{},"todo.html":{}}}],["controls",{"_index":1498,"title":{},"body":{"todo.html":{}}}],["controltype",{"_index":277,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["controlvalueaccessor",{"_index":966,"title":{},"body":{"interfaces/NgxTinynodesMatFieldComponent.html":{}}}],["copies",{"_index":1441,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1427,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1421,"title":{},"body":{"license.html":{}}}],["core",{"_index":767,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"changelog.html":{},"dependencies.html":{}}}],["coreapi",{"_index":1491,"title":{},"body":{"todo.html":{}}}],["corrective",{"_index":1262,"title":{},"body":{"contributing.html":{}}}],["covenant",{"_index":1337,"title":{},"body":{"contributing.html":{}}}],["covenant.org/version/1/4",{"_index":1340,"title":{},"body":{"contributing.html":{}}}],["cover",{"_index":1134,"title":{},"body":{"changelog.html":{}}}],["create",{"_index":546,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/functions.html":{}}}],["createconfig",{"_index":628,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["created",{"_index":545,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{}}}],["createeditor",{"_index":479,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["createeditor(config",{"_index":541,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["createeditorjsconfig",{"_index":575,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"miscellaneous/functions.html":{}}}],["createeditorjsconfig(inputconfig",{"_index":1377,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createeditorjsinstance",{"_index":433,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"miscellaneous/functions.html":{}}}],["createeditorjsinstance(editorjs",{"_index":428,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"miscellaneous/functions.html":{}}}],["createeditorjsoptions",{"_index":158,"title":{"interfaces/CreateEditorJSOptions.html":{}},"body":{"interfaces/CreateEditorJSOptions.html":{},"injectables/NgxEditorJSService.html":{}}}],["createinstance",{"_index":745,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["createinstance(options",{"_index":768,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["createmoduleconfig",{"_index":425,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"miscellaneous/functions.html":{}}}],["createmoduleconfig(config",{"_index":1381,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createonchange",{"_index":816,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["createonchange(options",{"_index":890,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["createonready",{"_index":820,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["createonready(options",{"_index":892,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["createpluginconfig",{"_index":726,"title":{},"body":{"modules/NgxEditorJSPluginServiceModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginSimpleImageModule.html":{},"miscellaneous/functions.html":{}}}],["createpluginconfig(pluginconfigs",{"_index":1383,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":174,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":180,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"contributing.html":{}}}],["creation",{"_index":445,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"changelog.html":{}}}],["criticism",{"_index":1225,"title":{},"body":{"contributing.html":{}}}],["ctrl+shift+c",{"_index":1035,"title":{},"body":{"modules/PluginInlineCodeModule.html":{}}}],["ctrl+shift+m",{"_index":1043,"title":{},"body":{"modules/PluginMarkerModule.html":{}}}],["current",{"_index":786,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"changelog.html":{}}}],["currently",{"_index":80,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["custom",{"_index":31,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["cycle",{"_index":367,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"index.html":{}}}],["damages",{"_index":1468,"title":{},"body":{"license.html":{}}}],["data",{"_index":15,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["data).pipe",{"_index":865,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["date.now",{"_index":638,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["deal",{"_index":1430,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1475,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":388,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}],["deem",{"_index":1279,"title":{},"body":{"contributing.html":{}}}],["deemed",{"_index":1313,"title":{},"body":{"contributing.html":{}}}],["default",{"_index":34,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default_holder_id",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaults",{"_index":412,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{}}}],["define",{"_index":117,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["defined",{"_index":19,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/EditorMap.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["delayed",{"_index":1126,"title":{},"body":{"changelog.html":{}}}],["delete",{"_index":904,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["demo",{"_index":1086,"title":{},"body":{"changelog.html":{},"index.html":{},"todo.html":{}}}],["demos",{"_index":1387,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":386,"title":{"dependencies.html":{}},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"contributing.html":{},"dependencies.html":{},"index.html":{},"overview.html":{}}}],["dependency",{"_index":1081,"title":{},"body":{"changelog.html":{},"todo.html":{}}}],["deps",{"_index":432,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{}}}],["describedby",{"_index":334,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":563,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["destroyed",{"_index":578,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["destroyinstance",{"_index":746,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["destroyinstance(options",{"_index":773,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["destroys",{"_index":775,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["destructive",{"_index":556,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["details",{"_index":1015,"title":{},"body":{"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"contributing.html":{}}}],["detection",{"_index":351,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"injectables/NgxEditorJSService.html":{}}}],["determined",{"_index":1332,"title":{},"body":{"contributing.html":{}}}],["developers",{"_index":1179,"title":{},"body":{"contributing.html":{}}}],["development",{"_index":1388,"title":{},"body":{"index.html":{}}}],["devlog",{"_index":1123,"title":{},"body":{"changelog.html":{}}}],["diary",{"_index":1389,"title":{},"body":{"index.html":{}}}],["differing",{"_index":1219,"title":{},"body":{"contributing.html":{}}}],["directive",{"_index":467,"title":{"directives/NgxEditorJSDirective.html":{}},"body":{"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"index.html":{},"overview.html":{},"todo.html":{}}}],["directives",{"_index":468,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["directives/ngx",{"_index":246,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{}}}],["disability",{"_index":1199,"title":{},"body":{"contributing.html":{}}}],["disable",{"_index":510,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["disabled",{"_index":306,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["disabled(disabled",{"_index":310,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["discuss",{"_index":1149,"title":{},"body":{"contributing.html":{}}}],["display",{"_index":513,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["displaying",{"_index":103,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["distinctuntilchanged",{"_index":794,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["distinctuntilchanged((a",{"_index":873,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["distribute",{"_index":1437,"title":{},"body":{"license.html":{}}}],["doc",{"_index":1488,"title":{},"body":{"todo.html":{}}}],["docheck",{"_index":230,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{}}}],["docs",{"_index":1069,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["documentation",{"_index":1114,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["doing",{"_index":791,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["dom",{"_index":581,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"index.html":{}}}],["don't",{"_index":206,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{}}}],["due",{"_index":1095,"title":{},"body":{"changelog.html":{}}}],["dynamic",{"_index":1352,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":1289,"title":{},"body":{"contributing.html":{}}}],["e.g",{"_index":1493,"title":{},"body":{"todo.html":{}}}],["each",{"_index":190,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorjsPluginsModule.html":{},"miscellaneous/variables.html":{}}}],["easily",{"_index":925,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{},"index.html":{}}}],["edit",{"_index":1267,"title":{},"body":{"contributing.html":{}}}],["editior_js_instance",{"_index":465,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/variables.html":{}}}],["editor",{"_index":118,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["editor's",{"_index":454,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["editor.destroy",{"_index":884,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editor.isready",{"_index":825,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editor[options.method",{"_index":840,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editor[options.namespace][options.method",{"_index":841,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editor_js_tool_injector",{"_index":126,"title":{},"body":{"interfaces/BlockData.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["editorconfig",{"_index":165,"title":{},"body":{"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/functions.html":{}}}],["editorconfig.holder",{"_index":819,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorconfig.onchange",{"_index":817,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorconfig.onready",{"_index":821,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorinstance",{"_index":321,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["editorjs",{"_index":12,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["editorjs'},{'name",{"_index":986,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["editorjs.component",{"_index":421,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{}}}],["editorjs.directive",{"_index":247,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{}}}],["editorjs.directive.ts",{"_index":470,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:106",{"_index":501,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:112",{"_index":516,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:118",{"_index":535,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:124",{"_index":539,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:130",{"_index":537,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:136",{"_index":532,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:142",{"_index":538,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:148",{"_index":540,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:152",{"_index":496,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:168",{"_index":566,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:175",{"_index":569,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:182",{"_index":571,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:189",{"_index":573,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:198",{"_index":542,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:215",{"_index":550,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:251",{"_index":544,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:284",{"_index":562,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:53",{"_index":499,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:59",{"_index":520,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:65",{"_index":522,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:72",{"_index":523,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:78",{"_index":527,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:84",{"_index":512,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:90",{"_index":529,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.directive.ts:97",{"_index":517,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs.module.ts",{"_index":659,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["editorjs.module.ts:30",{"_index":663,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["editorjs.version",{"_index":196,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"miscellaneous/variables.html":{}}}],["editorjs/code",{"_index":1017,"title":{},"body":{"modules/PluginCodeModule.html":{}}}],["editorjs/editorjs",{"_index":76,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["editorjs/editorjs.component",{"_index":251,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["editorjs/editorjs.module",{"_index":649,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{}}}],["editorjs/embed",{"_index":1023,"title":{},"body":{"modules/PluginEmbedModule.html":{}}}],["editorjs/header",{"_index":1026,"title":{},"body":{"modules/PluginHeaderModule.html":{}}}],["editorjs/image",{"_index":1029,"title":{},"body":{"modules/PluginImageModule.html":{}}}],["editorjs/inline",{"_index":1034,"title":{},"body":{"modules/PluginInlineCodeModule.html":{}}}],["editorjs/link",{"_index":1037,"title":{},"body":{"modules/PluginLinkModule.html":{}}}],["editorjs/list",{"_index":1039,"title":{},"body":{"modules/PluginListModule.html":{}}}],["editorjs/ngx",{"_index":7,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["editorjs/paragraph",{"_index":1042,"title":{},"body":{"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{}}}],["editorjs/quote",{"_index":1047,"title":{},"body":{"modules/PluginQuoteModule.html":{}}}],["editorjs/simple",{"_index":1051,"title":{},"body":{"modules/PluginSimpleImageModule.html":{}}}],["editorjs/src/lib/config/editor",{"_index":1376,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["editorjs/src/lib/config/module",{"_index":1380,"title":{},"body":{"miscellaneous/functions.html":{}}}],["editorjs/src/lib/containers/editorjs",{"_index":216,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"miscellaneous/variables.html":{}}}],["editorjs/src/lib/containers/editorjs/editorjs.component.ts",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["editorjs/src/lib/containers/editorjs/editorjs.module.ts",{"_index":400,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"miscellaneous/functions.html":{}}}],["editorjs/src/lib/containers/editorjs/editorjs.module.ts:63",{"_index":408,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{}}}],["editorjs/src/lib/directives/ngx",{"_index":469,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["editorjs/src/lib/ngx",{"_index":658,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts",{"_index":729,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:138",{"_index":754,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:177",{"_index":785,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:191",{"_index":764,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:204",{"_index":788,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:220",{"_index":777,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:231",{"_index":781,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:242",{"_index":783,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:260",{"_index":779,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:271",{"_index":774,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:288",{"_index":771,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:61",{"_index":750,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/services/editorjs.service.ts:87",{"_index":769,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["editorjs/src/lib/types/blocks.ts",{"_index":8,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["editorjs/src/lib/types/blocks.ts:13",{"_index":20,"title":{},"body":{"interfaces/Block.html":{}}}],["editorjs/src/lib/types/config.ts",{"_index":437,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/variables.html":{}}}],["editorjs/src/lib/types/editorjs",{"_index":159,"title":{},"body":{"interfaces/CreateEditorJSOptions.html":{}}}],["editorjs/src/lib/types/injector.ts",{"_index":168,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"miscellaneous/variables.html":{}}}],["editorjs/src/lib/types/maps.ts",{"_index":137,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["editorjs/src/lib/types/maps.ts:18",{"_index":1056,"title":{},"body":{"interfaces/ReadyMap.html":{}}}],["editorjs/src/lib/types/maps.ts:28",{"_index":1057,"title":{},"body":{"interfaces/SavedMap.html":{}}}],["editorjs/src/lib/types/maps.ts:52",{"_index":143,"title":{},"body":{"interfaces/ChangeMap.html":{}}}],["editorjs/src/lib/types/maps.ts:8",{"_index":383,"title":{},"body":{"interfaces/EditorMap.html":{}}}],["editorjs/warning",{"_index":1055,"title":{},"body":{"modules/PluginWarningModule.html":{}}}],["editorjs@1.2.0",{"_index":1118,"title":{},"body":{"changelog.html":{}}}],["editorjs@1.3.2",{"_index":1107,"title":{},"body":{"changelog.html":{}}}],["editorjs@2.0.0",{"_index":1092,"title":{},"body":{"changelog.html":{}}}],["editorjs@3.0.0",{"_index":1072,"title":{},"body":{"changelog.html":{}}}],["editorjs](http://editorjs.io",{"_index":667,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["editorjs_form_value_accessor",{"_index":396,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["editorjs_material_field_control",{"_index":253,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["editorjs_module_import",{"_index":199,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"miscellaneous/variables.html":{}}}],["editorjschange",{"_index":156,"title":{"interfaces/EditorJSChange.html":{}},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["editorjsclass",{"_index":167,"title":{"interfaces/EditorJSClass.html":{}},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["editorjsinstance",{"_index":202,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["editorjsinstanceconfig",{"_index":181,"title":{"interfaces/EditorJSInstanceConfig.html":{}},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{}}}],["editorjsmaterialform",{"_index":215,"title":{"interfaces/EditorJSMaterialForm.html":{}},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["editorjsplugin",{"_index":91,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["editormap",{"_index":148,"title":{"interfaces/EditorMap.html":{}},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["editorservice",{"_index":347,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["edits",{"_index":1271,"title":{},"body":{"contributing.html":{}}}],["el",{"_index":497,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["electronic",{"_index":1247,"title":{},"body":{"contributing.html":{}}}],["element",{"_index":350,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"index.html":{}}}],["elementref",{"_index":494,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["email",{"_index":1152,"title":{},"body":{"contributing.html":{}}}],["embed",{"_index":1022,"title":{},"body":{"modules/PluginEmbedModule.html":{}}}],["emits",{"_index":533,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["empathy",{"_index":1229,"title":{},"body":{"contributing.html":{}}}],["empty",{"_index":312,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["empty(empty",{"_index":315,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["end",{"_index":1160,"title":{},"body":{"contributing.html":{}}}],["enforce",{"_index":1326,"title":{},"body":{"contributing.html":{}}}],["enforcement",{"_index":1303,"title":{},"body":{"contributing.html":{}}}],["ensure",{"_index":734,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["entire",{"_index":1097,"title":{},"body":{"changelog.html":{}}}],["enum",{"_index":82,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["enumerations",{"_index":1368,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":1164,"title":{},"body":{"contributing.html":{}}}],["error",{"_index":278,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["error('error",{"_index":615,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["error(`no",{"_index":842,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["errorstate",{"_index":279,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["etc",{"_index":760,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"todo.html":{}}}],["ethnicity",{"_index":1200,"title":{},"body":{"contributing.html":{}}}],["event",{"_index":155,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"contributing.html":{},"license.html":{}}}],["eventemitter",{"_index":531,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["events",{"_index":1399,"title":{},"body":{"index.html":{}}}],["everyone",{"_index":1194,"title":{},"body":{"contributing.html":{}}}],["example",{"_index":262,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"changelog.html":{},"index.html":{}}}],["examples",{"_index":1171,"title":{},"body":{"contributing.html":{}}}],["exclude",{"_index":689,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["excludelist",{"_index":690,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["excludelist.includes(key",{"_index":707,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["excludetools",{"_index":163,"title":{},"body":{"interfaces/CreateEditorJSOptions.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["existing",{"_index":560,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["exiting",{"_index":1101,"title":{},"body":{"changelog.html":{}}}],["expand",{"_index":975,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["expanded",{"_index":1133,"title":{},"body":{"changelog.html":{}}}],["expected",{"_index":1259,"title":{},"body":{"contributing.html":{}}}],["experience",{"_index":1193,"title":{},"body":{"contributing.html":{}}}],["experiences",{"_index":1221,"title":{},"body":{"contributing.html":{}}}],["explicit",{"_index":1249,"title":{},"body":{"contributing.html":{}}}],["export",{"_index":24,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["exported",{"_index":95,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["exporting",{"_index":646,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{}}}],["exports",{"_index":390,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["expose",{"_index":1490,"title":{},"body":{"todo.html":{}}}],["exposed",{"_index":1166,"title":{},"body":{"contributing.html":{}}}],["express",{"_index":1455,"title":{},"body":{"license.html":{}}}],["expression",{"_index":1203,"title":{},"body":{"contributing.html":{}}}],["extends",{"_index":40,"title":{},"body":{"interfaces/Block.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["face",{"_index":1328,"title":{},"body":{"contributing.html":{}}}],["factory",{"_index":427,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["fair",{"_index":1261,"title":{},"body":{"contributing.html":{}}}],["faith",{"_index":1327,"title":{},"body":{"contributing.html":{}}}],["falls",{"_index":582,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["false",{"_index":164,"title":{},"body":{"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["feature",{"_index":1499,"title":{},"body":{"todo.html":{}}}],["features",{"_index":1105,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["field",{"_index":241,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["field'},{'name",{"_index":987,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["field.component",{"_index":650,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{}}}],["field.component.html",{"_index":265,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["field.component.scss",{"_index":267,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["field.component.ts",{"_index":219,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"miscellaneous/variables.html":{}}}],["field.module",{"_index":666,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["field.module.ts",{"_index":644,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{}}}],["field.module.ts:30",{"_index":648,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{}}}],["field/editorjs",{"_index":218,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"contributing.html":{}}}],["filed",{"_index":1130,"title":{},"body":{"changelog.html":{}}}],["files",{"_index":1172,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["filter",{"_index":795,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["filter(([key",{"_index":706,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["filter(haschanged",{"_index":877,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["filtering",{"_index":688,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["finaltools",{"_index":713,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["find",{"_index":1064,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["find(key",{"_index":610,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["first",{"_index":446,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"contributing.html":{}}}],["fitness",{"_index":1460,"title":{},"body":{"license.html":{}}}],["float",{"_index":327,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["focus",{"_index":348,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["focused",{"_index":293,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["focused(focused",{"_index":297,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["focusing",{"_index":1226,"title":{},"body":{"contributing.html":{}}}],["focusmonitor",{"_index":222,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["folder",{"_index":1409,"title":{},"body":{"index.html":{}}}],["follow",{"_index":1156,"title":{},"body":{"contributing.html":{}}}],["following",{"_index":1445,"title":{},"body":{"license.html":{}}}],["for_root_options_token",{"_index":403,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/variables.html":{}}}],["form",{"_index":579,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"changelog.html":{},"index.html":{}}}],["formcontrol",{"_index":507,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["forms",{"_index":502,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"changelog.html":{},"index.html":{}}}],["formsmodule",{"_index":420,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{}}}],["formsmodule,commonmodule",{"_index":1010,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{}}}],["forroot",{"_index":404,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{}}}],["forroot(@optional",{"_index":435,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{}}}],["forroot(config",{"_index":406,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{}}}],["forwardref",{"_index":231,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"miscellaneous/variables.html":{}}}],["fostering",{"_index":1184,"title":{},"body":{"contributing.html":{}}}],["free",{"_index":1192,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["full",{"_index":260,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"index.html":{},"todo.html":{}}}],["fully",{"_index":1391,"title":{},"body":{"index.html":{}}}],["function",{"_index":179,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":1370,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1444,"title":{},"body":{"license.html":{}}}],["further",{"_index":1301,"title":{},"body":{"contributing.html":{}}}],["gender",{"_index":1201,"title":{},"body":{"contributing.html":{}}}],["general",{"_index":1418,"title":{},"body":{"license.html":{},"todo.html":{}}}],["generated",{"_index":1415,"title":{},"body":{"index.html":{}}}],["geteditor",{"_index":565,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["geteditor(options",{"_index":776,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["getelement",{"_index":568,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["getplugin",{"_index":675,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["getplugin(key",{"_index":682,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["getplugins",{"_index":676,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["getpluginswithexclude",{"_index":677,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["getpluginswithexclude(excludelist",{"_index":686,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["getpluginswithinclude",{"_index":678,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["getpluginswithinclude(includelist",{"_index":691,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["gets",{"_index":326,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["getservice",{"_index":570,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["getting",{"_index":1059,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{"changelog.html":{}}}],["gettools",{"_index":679,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["gettools(excludetools",{"_index":694,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["gettouched",{"_index":572,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["github",{"_index":1013,"title":{},"body":{"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{}}}],["good",{"_index":1145,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["gracefully",{"_index":1222,"title":{},"body":{"contributing.html":{}}}],["granted",{"_index":1423,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1478,"title":{},"body":{"modules.html":{}}}],["hammerjs",{"_index":1358,"title":{},"body":{"dependencies.html":{}}}],["handle",{"_index":1111,"title":{},"body":{"changelog.html":{}}}],["handles",{"_index":730,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"index.html":{}}}],["handling",{"_index":673,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"changelog.html":{}}}],["happens",{"_index":738,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["harassing",{"_index":1305,"title":{},"body":{"contributing.html":{}}}],["harassment",{"_index":1191,"title":{},"body":{"contributing.html":{}}}],["harmful",{"_index":1282,"title":{},"body":{"contributing.html":{}}}],["haschanged",{"_index":484,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["hassaved",{"_index":485,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["hassaved(options",{"_index":778,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["hassavedmap",{"_index":198,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["header",{"_index":44,"title":{"interfaces/Header.html":{}},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginHeaderModule.html":{},"dependencies.html":{}}}],["headerblock",{"_index":49,"title":{"interfaces/HeaderBlock.html":{}},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["height",{"_index":453,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["helper",{"_index":755,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["helpers",{"_index":1492,"title":{},"body":{"todo.html":{}}}],["here",{"_index":402,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{}}}],["hereby",{"_index":1422,"title":{},"body":{"license.html":{}}}],["hideable",{"_index":1361,"title":{},"body":{"dependencies.html":{}}}],["hidetoolbar",{"_index":440,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["hold",{"_index":452,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["holder",{"_index":183,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["holders",{"_index":1465,"title":{},"body":{"license.html":{}}}],["host",{"_index":322,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["hostbinding",{"_index":232,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["hostbinding('attr.aria",{"_index":333,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["hostbinding('class.floating",{"_index":328,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["hostlistener",{"_index":574,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["hostlistener('click",{"_index":584,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["hostlisteners",{"_index":489,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["html",{"_index":530,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["http://contributor",{"_index":1339,"title":{},"body":{"contributing.html":{}}}],["https://angular.io/api/core/ngmodule",{"_index":699,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["https://angular.io/api/core/ngzone",{"_index":801,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["https://angular.io/guide/observables",{"_index":802,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["https://editorjs.io/api",{"_index":711,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["https://editorjs.io/provide",{"_index":108,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["https://github.com/editor",{"_index":697,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["i'll",{"_index":1140,"title":{},"body":{"changelog.html":{}}}],["i'm",{"_index":1109,"title":{},"body":{"changelog.html":{}}}],["i've",{"_index":1110,"title":{},"body":{"changelog.html":{}}}],["id",{"_index":272,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["identity",{"_index":1202,"title":{},"body":{"contributing.html":{}}}],["ids",{"_index":335,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ids.join",{"_index":339,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ignore",{"_index":607,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["image",{"_index":50,"title":{"interfaces/Image.html":{}},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginImageModule.html":{},"modules/PluginSimpleImageModule.html":{}}}],["image.module",{"_index":944,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["image.module.ts",{"_index":1049,"title":{},"body":{"modules/PluginSimpleImageModule.html":{}}}],["image/simple",{"_index":943,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginSimpleImageModule.html":{}}}],["imageblock",{"_index":62,"title":{"interfaces/ImageBlock.html":{}},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["imagery",{"_index":1235,"title":{},"body":{"contributing.html":{}}}],["implementation",{"_index":261,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["implements",{"_index":271,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["implied",{"_index":1456,"title":{},"body":{"license.html":{}}}],["import",{"_index":71,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["imported",{"_index":1404,"title":{},"body":{"index.html":{}}}],["importing",{"_index":927,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["imports",{"_index":429,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{}}}],["improved",{"_index":1098,"title":{},"body":{"changelog.html":{}}}],["improvements",{"_index":1088,"title":{},"body":{"changelog.html":{}}}],["inappropriate",{"_index":1252,"title":{},"body":{"contributing.html":{}}}],["incident",{"_index":1321,"title":{},"body":{"contributing.html":{}}}],["include",{"_index":166,"title":{},"body":{"interfaces/CreateEditorJSOptions.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"contributing.html":{}}}],["included",{"_index":1450,"title":{},"body":{"license.html":{}}}],["includelist",{"_index":693,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["includelist.includes(key",{"_index":710,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["includes",{"_index":1163,"title":{},"body":{"contributing.html":{}}}],["includetools",{"_index":609,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["including",{"_index":1432,"title":{},"body":{"license.html":{}}}],["inclusive",{"_index":1215,"title":{},"body":{"contributing.html":{}}}],["increase",{"_index":1169,"title":{},"body":{"contributing.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/Block.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":16,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/EditorMap.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["individual",{"_index":929,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{},"contributing.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["information",{"_index":178,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{},"contributing.html":{},"index.html":{}}}],["initial",{"_index":122,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["initialblock",{"_index":441,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["initialized",{"_index":500,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["inject",{"_index":674,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["inject(editorjsinstance",{"_index":805,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["inject(ngx_editorjs_config",{"_index":806,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["injectable",{"_index":668,"title":{"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}},"body":{"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["injectables",{"_index":670,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"overview.html":{}}}],["injected",{"_index":169,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["injecting",{"_index":463,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["injection",{"_index":120,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken",{"_index":72,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["injectiontoken('editior_js_instance",{"_index":466,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('editor_js_tool_injector",{"_index":128,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('editorjs_module_import",{"_index":200,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('editorjsinstance",{"_index":203,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('for_root_options_token",{"_index":464,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('ngx_editorjs_config",{"_index":462,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('plugin_config",{"_index":130,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken('pluginclasses",{"_index":135,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["injector",{"_index":201,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["injectorapicalloptions",{"_index":210,"title":{"interfaces/InjectorApiCallOptions.html":{}},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["injectorapicallresponse",{"_index":213,"title":{"interfaces/InjectorApiCallResponse.html":{}},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["injectormethodoption",{"_index":204,"title":{"interfaces/InjectorMethodOption.html":{}},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["inline",{"_index":81,"title":{},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginInlineCodeModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/enumerations.html":{}}}],["inlinecode",{"_index":1033,"title":{},"body":{"modules/PluginInlineCodeModule.html":{}}}],["inlinetoolbar",{"_index":115,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{}}}],["input",{"_index":233,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"todo.html":{}}}],["input('disabled",{"_index":309,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["input('focused",{"_index":296,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["input('placeholder",{"_index":291,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["input('required",{"_index":303,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["input('value",{"_index":284,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["input.component",{"_index":1007,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{}}}],["input.component.ts",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["input.module",{"_index":960,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{}}}],["input.module.ts",{"_index":1006,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{}}}],["input/mat",{"_index":959,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"miscellaneous/variables.html":{}}}],["inputconfig",{"_index":1379,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inputs",{"_index":482,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["inside",{"_index":365,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"index.html":{}}}],["install",{"_index":1159,"title":{},"body":{"contributing.html":{},"dependencies.html":{}}}],["instance",{"_index":142,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["instances",{"_index":147,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"changelog.html":{},"contributing.html":{},"index.html":{}}}],["insulting/derogatory",{"_index":1240,"title":{},"body":{"contributing.html":{}}}],["interact",{"_index":1401,"title":{},"body":{"index.html":{}}}],["interactions",{"_index":1157,"title":{},"body":{"contributing.html":{}}}],["interest",{"_index":1183,"title":{},"body":{"contributing.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{}},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"contributing.html":{},"index.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"overview.html":{}}}],["interfaces/pluginconfig.html",{"_index":700,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["internal",{"_index":191,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["internally",{"_index":1083,"title":{},"body":{"changelog.html":{}}}],["investigated",{"_index":1312,"title":{},"body":{"contributing.html":{}}}],["isfocused",{"_index":486,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["isready",{"_index":487,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["isready(options",{"_index":780,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["isreadymap",{"_index":197,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["issue",{"_index":1151,"title":{},"body":{"contributing.html":{}}}],["issues",{"_index":1128,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["istouched",{"_index":488,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["it's",{"_index":553,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["items",{"_index":36,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["js",{"_index":698,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["js/code",{"_index":1019,"title":{},"body":{"modules/PluginCodeModule.html":{}}}],["js/header",{"_index":1027,"title":{},"body":{"modules/PluginHeaderModule.html":{}}}],["js/image",{"_index":1030,"title":{},"body":{"modules/PluginImageModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginSimpleImageModule.html":{}}}],["js/paragraph",{"_index":1024,"title":{},"body":{"modules/PluginEmbedModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginWarningModule.html":{}}}],["json",{"_index":961,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"dependencies.html":{}}}],["json.stringify(changes.blocks.currentvalue",{"_index":602,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["json.stringify(changes.blocks.previousvalue",{"_index":601,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["key",{"_index":17,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"injectables/NgxEditorJSPluginService.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["keys",{"_index":519,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"miscellaneous/functions.html":{}}}],["kind",{"_index":1454,"title":{},"body":{"license.html":{}}}],["label",{"_index":102,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["language",{"_index":1216,"title":{},"body":{"contributing.html":{}}}],["last",{"_index":140,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["lastchange",{"_index":620,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["lastchange(options",{"_index":782,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["lastchangemap",{"_index":193,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["layer",{"_index":1161,"title":{},"body":{"contributing.html":{}}}],["layout",{"_index":1347,"title":{},"body":{"dependencies.html":{}}}],["leadership",{"_index":1334,"title":{},"body":{"contributing.html":{}}}],["legend",{"_index":387,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}],["level",{"_index":45,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"changelog.html":{},"contributing.html":{}}}],["liability",{"_index":1469,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1466,"title":{},"body":{"license.html":{}}}],["libraries",{"_index":1066,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["library",{"_index":1068,"title":{},"body":{"changelog.html":{},"index.html":{},"todo.html":{}}}],["libs/.../blocks.ts",{"_index":1502,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["libs/.../config.ts",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../editor",{"_index":1371,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["libs/.../editorjs",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../editorjs.component.ts",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../editorjs.module.ts",{"_index":1373,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../injector.ts",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../mat",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/.../module",{"_index":1374,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../plugin.ts",{"_index":1375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["libs/.../plugins.ts",{"_index":1369,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["libs/.../test.ts",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["libs/ngx",{"_index":6,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["licence",{"_index":1420,"title":{},"body":{"license.html":{}}}],["license",{"_index":1417,"title":{"license.html":{}},"body":{}}],["life",{"_index":366,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"index.html":{}}}],["lifecycle",{"_index":360,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"injectables/NgxEditorJSService.html":{}}}],["limitation",{"_index":1433,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1457,"title":{},"body":{"license.html":{}}}],["line:use",{"_index":359,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["link",{"_index":107,"title":{},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginLinkModule.html":{},"interfaces/ToolSettingsMap.html":{}}}],["links",{"_index":1394,"title":{},"body":{"index.html":{}}}],["list",{"_index":26,"title":{"interfaces/List.html":{}},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"injectables/NgxEditorJSPluginService.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginListModule.html":{},"miscellaneous/typealiases.html":{}}}],["listblock",{"_index":39,"title":{"interfaces/ListBlock.html":{}},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["listener",{"_index":369,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["listners",{"_index":547,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["liststyle",{"_index":33,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["local",{"_index":815,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["locations",{"_index":1168,"title":{},"body":{"contributing.html":{}}}],["lot",{"_index":1113,"title":{},"body":{"changelog.html":{}}}],["made",{"_index":743,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["mail",{"_index":1290,"title":{},"body":{"contributing.html":{}}}],["main",{"_index":471,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"changelog.html":{}}}],["maintain",{"_index":1317,"title":{},"body":{"contributing.html":{}}}],["maintainers",{"_index":1188,"title":{},"body":{"contributing.html":{}}}],["major",{"_index":1093,"title":{},"body":{"changelog.html":{}}}],["make",{"_index":756,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["makes",{"_index":186,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{}}}],["making",{"_index":1143,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["management",{"_index":731,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["managing",{"_index":1112,"title":{},"body":{"changelog.html":{}}}],["map",{"_index":92,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["map_defaults",{"_index":192,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["map_defaults.foreach(([mapkey",{"_index":896,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["marker",{"_index":1041,"title":{},"body":{"modules/PluginMarkerModule.html":{}}}],["mat",{"_index":217,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"miscellaneous/variables.html":{}}}],["matbuttonmodule",{"_index":996,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{}}}],["matcardmodule",{"_index":997,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{}}}],["match",{"_index":525,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["matches",{"_index":744,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["matching",{"_index":66,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matchipsmodule",{"_index":1008,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{}}}],["material",{"_index":252,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"changelog.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["material](https://material.angular.io",{"_index":258,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["matformfieldcontrol",{"_index":221,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"miscellaneous/variables.html":{}}}],["matformfieldmodule",{"_index":651,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{}}}],["maticonmodule",{"_index":1009,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{}}}],["matinputmodule",{"_index":652,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{}}}],["me@tane.dev",{"_index":1309,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["means",{"_index":555,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"changelog.html":{}}}],["meantime",{"_index":1139,"title":{},"body":{"changelog.html":{}}}],["media",{"_index":1293,"title":{},"body":{"contributing.html":{}}}],["members",{"_index":1231,"title":{},"body":{"contributing.html":{}}}],["merchantability",{"_index":1459,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1177,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["merged",{"_index":1079,"title":{},"body":{"changelog.html":{}}}],["metadata",{"_index":476,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["method",{"_index":184,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["method.call(editor",{"_index":845,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["methodcall",{"_index":844,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["methodcall.then",{"_index":846,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["methods",{"_index":405,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"changelog.html":{}}}],["minheight",{"_index":442,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["minimum",{"_index":528,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["miscellaneous",{"_index":1367,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1419,"title":{},"body":{"license.html":{}}}],["modify",{"_index":1435,"title":{},"body":{"license.html":{}}}],["module",{"_index":124,"title":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{}},"body":{"interfaces/BlockData.html":{},"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"overview.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":385,"title":{"modules.html":{}},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"modules.html":{},"overview.html":{},"todo.html":{}}}],["modulewithproviders",{"_index":415,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{}}}],["monday",{"_index":1116,"title":{},"body":{"changelog.html":{}}}],["monitor",{"_index":349,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["more",{"_index":1144,"title":{},"body":{"changelog.html":{}}}],["mouseevent",{"_index":342,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ms",{"_index":511,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["multi",{"_index":257,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"changelog.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":104,"title":{},"body":{"interfaces/BlockData.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/functions.html":{}}}],["namespace",{"_index":211,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["nationality",{"_index":1204,"title":{},"body":{"contributing.html":{}}}],["necessary",{"_index":1314,"title":{},"body":{"contributing.html":{}}}],["need",{"_index":558,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["needs",{"_index":524,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["new",{"_index":127,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"contributing.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":358,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["nextid",{"_index":273,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ng_value_accessor",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ngaftercontentinit",{"_index":373,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["ngcontrol",{"_index":238,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ngdocheck",{"_index":379,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ngmodule",{"_index":416,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"changelog.html":{}}}],["ngonchanges",{"_index":480,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["ngonchanges(changes",{"_index":548,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["ngondestroy",{"_index":481,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["ngoninit",{"_index":361,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ngrx/effects",{"_index":1354,"title":{},"body":{"dependencies.html":{},"todo.html":{}}}],["ngrx/store",{"_index":1356,"title":{},"body":{"dependencies.html":{}}}],["ngx",{"_index":123,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"dependencies.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["ngx_editorjs_config",{"_index":422,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["ngxeditorjs",{"_index":477,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["ngxeditorjsbasecomponent",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ngxeditorjscomponent",{"_index":250,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"index.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ngxeditorjscomponentmodule",{"_index":384,"title":{"modules/NgxEditorJSComponentModule.html":{}},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules.html":{},"overview.html":{}}}],["ngxeditorjsconfig",{"_index":436,"title":{"interfaces/NgxEditorJSConfig.html":{}},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/variables.html":{}}}],["ngxeditorjsdirective",{"_index":245,"title":{"directives/NgxEditorJSDirective.html":{}},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"index.html":{},"overview.html":{}}}],["ngxeditorjsdirective::ngaftercontentinit",{"_index":616,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["ngxeditorjsinstanceservice",{"_index":1403,"title":{},"body":{"index.html":{}}}],["ngxeditorjsmaterialfieldcomponent",{"_index":1398,"title":{},"body":{"index.html":{}}}],["ngxeditorjsmatfieldcomponent",{"_index":256,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ngxeditorjsmatfieldcomponent.nextid",{"_index":325,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ngxeditorjsmatfieldmodule",{"_index":639,"title":{"modules/NgxEditorJSMatFieldModule.html":{}},"body":{"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules.html":{},"overview.html":{}}}],["ngxeditorjsmodule",{"_index":654,"title":{"modules/NgxEditorJSModule.html":{}},"body":{"modules/NgxEditorJSModule.html":{},"modules.html":{},"overview.html":{}}}],["ngxeditorjsmodule.forroot",{"_index":460,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{}}}],["ngxeditorjsmoduleconfig",{"_index":407,"title":{"interfaces/NgxEditorJSModuleConfig.html":{}},"body":{"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/functions.html":{}}}],["ngxeditorjspluginservice",{"_index":669,"title":{"injectables/NgxEditorJSPluginService.html":{}},"body":{"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"index.html":{},"overview.html":{}}}],["ngxeditorjspluginservicemodule",{"_index":722,"title":{"modules/NgxEditorJSPluginServiceModule.html":{}},"body":{"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules.html":{},"overview.html":{}}}],["ngxeditorjspluginsmodule",{"_index":907,"title":{"modules/NgxEditorjsPluginsModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules.html":{},"overview.html":{}}}],["ngxeditorjsservice",{"_index":248,"title":{"injectables/NgxEditorJSService.html":{}},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"index.html":{},"overview.html":{}}}],["ngxjsonviewermodule",{"_index":998,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{}}}],["ngxtinynodescomponentsmodule",{"_index":948,"title":{"modules/NgxTinynodesComponentsModule.html":{}},"body":{"modules/NgxTinynodesComponentsModule.html":{},"modules.html":{},"overview.html":{}}}],["ngxtinynodesmatfieldcomponent",{"_index":964,"title":{"interfaces/NgxTinynodesMatFieldComponent.html":{}},"body":{"interfaces/NgxTinynodesMatFieldComponent.html":{}}}],["ngxtinynodesmatjsonoutputcomponent",{"_index":968,"title":{"components/NgxTinynodesMatJsonOutputComponent.html":{}},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"overview.html":{}}}],["ngxtinynodesmatjsonoutputmodule",{"_index":952,"title":{"modules/NgxTinynodesMatJsonOutputModule.html":{}},"body":{"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules.html":{},"overview.html":{}}}],["ngxtinynodesmattaginputcomponent",{"_index":989,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["ngxtinynodesmattaginputmodule",{"_index":953,"title":{"modules/NgxTinynodesMatTagInputModule.html":{}},"body":{"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules.html":{},"overview.html":{}}}],["ngzone",{"_index":733,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["noninfringement",{"_index":1463,"title":{},"body":{"license.html":{}}}],["note",{"_index":1154,"title":{},"body":{"contributing.html":{}}}],["notice",{"_index":1448,"title":{},"body":{"license.html":{}}}],["now",{"_index":1080,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":1395,"title":{},"body":{"index.html":{}}}],["nrwl/nx",{"_index":1131,"title":{},"body":{"changelog.html":{}}}],["null",{"_index":363,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["number",{"_index":48,"title":{},"body":{"interfaces/Block.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["numbers",{"_index":1170,"title":{},"body":{"contributing.html":{}}}],["nx",{"_index":1416,"title":{},"body":{"index.html":{}}}],["object",{"_index":97,"title":{},"body":{"interfaces/BlockData.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["object.entries(this.getpluginswithexclude(excludetools)).reduce",{"_index":712,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["object.entries(this.pluginconfigmap",{"_index":705,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["object.keys(changes",{"_index":606,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["object.keys(this.editormap).foreach(holder",{"_index":887,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["objects",{"_index":1385,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obligated",{"_index":1316,"title":{},"body":{"contributing.html":{}}}],["observable",{"_index":567,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["obtaining",{"_index":1426,"title":{},"body":{"license.html":{}}}],["of(response",{"_index":857,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["offensive",{"_index":1281,"title":{},"body":{"contributing.html":{}}}],["official",{"_index":1288,"title":{},"body":{"contributing.html":{}}}],["officially",{"_index":1135,"title":{},"body":{"changelog.html":{}}}],["offline",{"_index":1299,"title":{},"body":{"contributing.html":{}}}],["once",{"_index":736,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["onchange",{"_index":187,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["onchanges",{"_index":475,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["onclick",{"_index":585,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["oncontainerclick(event",{"_index":343,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["ondestroy",{"_index":234,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{}}}],["ones",{"_index":1412,"title":{},"body":{"index.html":{}}}],["oninit",{"_index":235,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{}}}],["online",{"_index":1298,"title":{},"body":{"contributing.html":{}}}],["onready",{"_index":189,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{}}}],["open",{"_index":1185,"title":{},"body":{"contributing.html":{}}}],["option",{"_index":205,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"todo.html":{}}}],["optional",{"_index":52,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":789,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options",{"_index":161,"title":{},"body":{"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"todo.html":{}}}],["options.config",{"_index":811,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options.data",{"_index":859,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options.data.blocks",{"_index":864,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options.data.time",{"_index":860,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options.data.version",{"_index":861,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options.holder",{"_index":849,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options.method",{"_index":843,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options.namespace",{"_index":839,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["options.skipsave",{"_index":856,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["ordered",{"_index":29,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["orientation",{"_index":1210,"title":{},"body":{"contributing.html":{}}}],["others",{"_index":1245,"title":{},"body":{"contributing.html":{}}}],["otherwise",{"_index":814,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{},"license.html":{}}}],["out",{"_index":399,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"index.html":{},"license.html":{},"overview.html":{}}}],["output",{"_index":447,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["output'},{'name",{"_index":988,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["output.component",{"_index":995,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{}}}],["output.component.html",{"_index":973,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["output.component.ts",{"_index":972,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["output.component.ts:11",{"_index":978,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["output.component.ts:14",{"_index":977,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["output.component.ts:19",{"_index":980,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["output.component.ts:23",{"_index":979,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["output.module",{"_index":963,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{}}}],["output.module.ts",{"_index":994,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{}}}],["output/mat",{"_index":962,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{}}}],["outputdata",{"_index":144,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["outputs",{"_index":483,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["outside",{"_index":732,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["over",{"_index":1099,"title":{},"body":{"changelog.html":{}}}],["overall",{"_index":1062,"title":{},"body":{"changelog.html":{}}}],["overview",{"_index":1479,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owners",{"_index":1153,"title":{},"body":{"contributing.html":{}}}],["package",{"_index":1120,"title":{"dependencies.html":{}},"body":{"changelog.html":{}}}],["page",{"_index":1497,"title":{},"body":{"todo.html":{}}}],["paragraph",{"_index":41,"title":{"interfaces/Paragraph.html":{}},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{}}}],["paragraphblock",{"_index":43,"title":{"interfaces/ParagraphBlock.html":{}},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["param",{"_index":283,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["parameters",{"_index":413,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"contributing.html":{},"miscellaneous/functions.html":{}}}],["parentmodule",{"_index":434,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{}}}],["parse",{"_index":177,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{}}}],["participants",{"_index":1233,"title":{},"body":{"contributing.html":{}}}],["participation",{"_index":1189,"title":{},"body":{"contributing.html":{}}}],["particular",{"_index":1461,"title":{},"body":{"license.html":{}}}],["pass",{"_index":109,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["passed",{"_index":459,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/functions.html":{}}}],["patches",{"_index":506,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["paths",{"_index":552,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["peer",{"_index":1495,"title":{},"body":{"todo.html":{}}}],["per",{"_index":133,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["permanent",{"_index":1330,"title":{},"body":{"contributing.html":{}}}],["permanently",{"_index":1276,"title":{},"body":{"contributing.html":{}}}],["permission",{"_index":1180,"title":{},"body":{"contributing.html":{},"license.html":{}}}],["permit",{"_index":1442,"title":{},"body":{"license.html":{}}}],["person",{"_index":1425,"title":{},"body":{"license.html":{}}}],["personal",{"_index":1205,"title":{},"body":{"contributing.html":{}}}],["persons",{"_index":1443,"title":{},"body":{"license.html":{}}}],["physical",{"_index":1246,"title":{},"body":{"contributing.html":{}}}],["pipe",{"_index":851,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["pipe(take(1",{"_index":881,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["pipe(takeuntil(this.ondestroy",{"_index":376,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["pipeline",{"_index":1487,"title":{},"body":{"todo.html":{}}}],["piper",{"_index":1414,"title":{},"body":{"index.html":{},"license.html":{}}}],["placeholder",{"_index":287,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["placeholder(placeholder",{"_index":292,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["please",{"_index":1148,"title":{},"body":{"contributing.html":{}}}],["pledge",{"_index":1182,"title":{},"body":{"contributing.html":{}}}],["plug",{"_index":926,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugin",{"_index":38,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["plugin.config",{"_index":720,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["plugin.inlinetoolbar",{"_index":718,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["plugin.plugin",{"_index":714,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["plugin.shortcut",{"_index":715,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["plugin.type",{"_index":717,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["plugin_config",{"_index":129,"title":{},"body":{"interfaces/BlockData.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["pluginclasses",{"_index":134,"title":{},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginImageModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginSimpleImageModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["plugincodemodule",{"_index":911,"title":{"modules/PluginCodeModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginCodeModule.html":{},"modules.html":{},"overview.html":{}}}],["pluginconfig",{"_index":98,"title":{"interfaces/PluginConfig.html":{}},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSPluginService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["pluginconfigmap",{"_index":132,"title":{"interfaces/PluginConfigMap.html":{}},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSPluginService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["pluginconfigs",{"_index":1384,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pluginembedmodule",{"_index":912,"title":{"modules/PluginEmbedModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginEmbedModule.html":{},"modules.html":{},"overview.html":{}}}],["pluginheadermodule",{"_index":913,"title":{"modules/PluginHeaderModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginHeaderModule.html":{},"modules.html":{},"overview.html":{}}}],["pluginimagemodule",{"_index":914,"title":{"modules/PluginImageModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginImageModule.html":{},"modules.html":{},"overview.html":{}}}],["plugininlinecodemodule",{"_index":915,"title":{"modules/PluginInlineCodeModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules.html":{},"overview.html":{}}}],["pluginlinkmodule",{"_index":916,"title":{"modules/PluginLinkModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginLinkModule.html":{},"modules.html":{},"overview.html":{}}}],["pluginlistmodule",{"_index":917,"title":{"modules/PluginListModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginListModule.html":{},"modules.html":{},"overview.html":{}}}],["pluginmap",{"_index":709,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["pluginmarkermodule",{"_index":918,"title":{"modules/PluginMarkerModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginMarkerModule.html":{},"modules.html":{},"overview.html":{}}}],["pluginname",{"_index":105,"title":{},"body":{"interfaces/BlockData.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{}}}],["pluginparagraphmodule",{"_index":919,"title":{"modules/PluginParagraphModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginParagraphModule.html":{},"modules.html":{},"overview.html":{}}}],["pluginproperty",{"_index":88,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["pluginquotemodule",{"_index":920,"title":{"modules/PluginQuoteModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginQuoteModule.html":{},"modules.html":{},"overview.html":{}}}],["plugins",{"_index":78,"title":{},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["plugins.module.ts",{"_index":924,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/code/code.module",{"_index":930,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/embed/embed.module",{"_index":931,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/header/header.module",{"_index":932,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/image/image.module",{"_index":933,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/inline",{"_index":934,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/link/link.module",{"_index":937,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/list/list.module",{"_index":938,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/marker/marker.module",{"_index":939,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/paragraph/paragraph.module",{"_index":940,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/quote/quote.module",{"_index":941,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/simple",{"_index":942,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/src/lib/ngx",{"_index":923,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins/src/lib/plugins/code/code.module.ts",{"_index":1011,"title":{},"body":{"modules/PluginCodeModule.html":{}}}],["plugins/src/lib/plugins/embed/embed.module.ts",{"_index":1021,"title":{},"body":{"modules/PluginEmbedModule.html":{}}}],["plugins/src/lib/plugins/header/header.module.ts",{"_index":1025,"title":{},"body":{"modules/PluginHeaderModule.html":{}}}],["plugins/src/lib/plugins/image/image.module.ts",{"_index":1028,"title":{},"body":{"modules/PluginImageModule.html":{}}}],["plugins/src/lib/plugins/inline",{"_index":1031,"title":{},"body":{"modules/PluginInlineCodeModule.html":{}}}],["plugins/src/lib/plugins/link/link.module.ts",{"_index":1036,"title":{},"body":{"modules/PluginLinkModule.html":{}}}],["plugins/src/lib/plugins/list/list.module.ts",{"_index":1038,"title":{},"body":{"modules/PluginListModule.html":{}}}],["plugins/src/lib/plugins/marker/marker.module.ts",{"_index":1040,"title":{},"body":{"modules/PluginMarkerModule.html":{}}}],["plugins/src/lib/plugins/paragraph/paragraph.module.ts",{"_index":1044,"title":{},"body":{"modules/PluginParagraphModule.html":{}}}],["plugins/src/lib/plugins/quote/quote.module.ts",{"_index":1045,"title":{},"body":{"modules/PluginQuoteModule.html":{}}}],["plugins/src/lib/plugins/simple",{"_index":1048,"title":{},"body":{"modules/PluginSimpleImageModule.html":{}}}],["plugins/src/lib/plugins/warning/warning.module.ts",{"_index":1053,"title":{},"body":{"modules/PluginWarningModule.html":{}}}],["plugins/src/lib/services/plugin",{"_index":671,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{}}}],["plugins/src/lib/types/plugins.ts",{"_index":69,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["plugins/src/lib/types/plugins.ts:107",{"_index":1020,"title":{},"body":{"interfaces/PluginConfigMap.html":{}}}],["plugins/src/lib/types/plugins.ts:43",{"_index":1058,"title":{},"body":{"interfaces/ToolSettingsMap.html":{}}}],["plugins/src/lib/types/plugins.ts:7",{"_index":70,"title":{},"body":{"interfaces/BlockData.html":{}}}],["plugins/src/lib/util/plugin.ts",{"_index":1382,"title":{},"body":{"miscellaneous/functions.html":{}}}],["plugins/warning/warning.module",{"_index":945,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["plugins@2.0.0",{"_index":1074,"title":{},"body":{"changelog.html":{}}}],["pluginsimpleimagemodule",{"_index":921,"title":{"modules/PluginSimpleImageModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules.html":{},"overview.html":{}}}],["plugintype",{"_index":85,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["plugintypes",{"_index":83,"title":{},"body":{"interfaces/BlockData.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/enumerations.html":{}}}],["plugintypes.block",{"_index":86,"title":{},"body":{"interfaces/BlockData.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["plugintypes.inline",{"_index":87,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginMarkerModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["pluginwarningmodule",{"_index":922,"title":{"modules/PluginWarningModule.html":{}},"body":{"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginWarningModule.html":{},"modules.html":{},"overview.html":{}}}],["policies",{"_index":1323,"title":{},"body":{"contributing.html":{}}}],["political",{"_index":1242,"title":{},"body":{"contributing.html":{}}}],["portions",{"_index":1452,"title":{},"body":{"license.html":{}}}],["ports",{"_index":1167,"title":{},"body":{"contributing.html":{}}}],["positive",{"_index":1214,"title":{},"body":{"contributing.html":{}}}],["possible",{"_index":928,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["posted",{"_index":1324,"title":{},"body":{"contributing.html":{}}}],["posting",{"_index":1291,"title":{},"body":{"contributing.html":{}}}],["private",{"_index":288,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"contributing.html":{},"index.html":{}}}],["process",{"_index":557,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"contributing.html":{}}}],["professional",{"_index":1253,"title":{},"body":{"contributing.html":{}}}],["project",{"_index":1082,"title":{},"body":{"changelog.html":{},"contributing.html":{},"index.html":{}}}],["project's",{"_index":1333,"title":{},"body":{"contributing.html":{}}}],["promise",{"_index":543,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["properties",{"_index":14,"title":{},"body":{"interfaces/Block.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"index.html":{}}}],["property",{"_index":55,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["protected",{"_index":354,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["provide",{"_index":254,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"changelog.html":{},"index.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":37,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"changelog.html":{},"license.html":{}}}],["providedin",{"_index":701,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["provider",{"_index":100,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":268,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"changelog.html":{},"overview.html":{}}}],["provides",{"_index":175,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"changelog.html":{},"index.html":{}}}],["provied",{"_index":461,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":274,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"contributing.html":{}}}],["publish",{"_index":1436,"title":{},"body":{"license.html":{},"todo.html":{}}}],["publishing",{"_index":1244,"title":{},"body":{"contributing.html":{},"todo.html":{}}}],["pull",{"_index":1158,"title":{},"body":{"contributing.html":{}}}],["purpose",{"_index":1462,"title":{},"body":{"license.html":{}}}],["quote",{"_index":1046,"title":{},"body":{"modules/PluginQuoteModule.html":{}}}],["r",{"_index":847,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["race",{"_index":1207,"title":{},"body":{"contributing.html":{}}}],["re",{"_index":1076,"title":{},"body":{"changelog.html":{}}}],["reactive",{"_index":1397,"title":{},"body":{"index.html":{}}}],["read",{"_index":319,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["readme",{"_index":1408,"title":{},"body":{"index.html":{}}}],["readme.md",{"_index":1162,"title":{},"body":{"contributing.html":{}}}],["readonly",{"_index":320,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["ready",{"_index":150,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["readymap",{"_index":152,"title":{"interfaces/ReadyMap.html":{}},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["reasonably",{"_index":1250,"title":{},"body":{"contributing.html":{}}}],["reduce((pluginmap",{"_index":708,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["ref",{"_index":352,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"injectables/NgxEditorJSService.html":{}}}],["reflect",{"_index":1104,"title":{},"body":{"changelog.html":{}}}],["regard",{"_index":1319,"title":{},"body":{"contributing.html":{}}}],["regardless",{"_index":1195,"title":{},"body":{"contributing.html":{}}}],["reject",{"_index":1268,"title":{},"body":{"contributing.html":{}}}],["related",{"_index":608,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"changelog.html":{}}}],["release",{"_index":1100,"title":{},"body":{"changelog.html":{}}}],["released",{"_index":1073,"title":{},"body":{"changelog.html":{}}}],["religion",{"_index":1208,"title":{},"body":{"contributing.html":{}}}],["remark",{"_index":807,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["remarks",{"_index":833,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["remove",{"_index":1266,"title":{},"body":{"contributing.html":{}}}],["removed",{"_index":1119,"title":{},"body":{"changelog.html":{},"contributing.html":{}}}],["render",{"_index":448,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{}}}],["repercussions",{"_index":1331,"title":{},"body":{"contributing.html":{}}}],["repo",{"_index":1014,"title":{},"body":{"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"todo.html":{}}}],["repo](https://github.com/editor",{"_index":1018,"title":{},"body":{"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{}}}],["report",{"_index":1124,"title":{},"body":{"changelog.html":{}}}],["reported",{"_index":1306,"title":{},"body":{"contributing.html":{}}}],["reporter",{"_index":1320,"title":{},"body":{"contributing.html":{}}}],["repository",{"_index":1147,"title":{},"body":{"contributing.html":{},"index.html":{}}}],["represent",{"_index":1173,"title":{},"body":{"contributing.html":{}}}],["representation",{"_index":1300,"title":{},"body":{"contributing.html":{}}}],["representative",{"_index":1297,"title":{},"body":{"contributing.html":{}}}],["representing",{"_index":1287,"title":{},"body":{"contributing.html":{}}}],["request",{"_index":889,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["requied",{"_index":302,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["require",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["require.context",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":182,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"index.html":{}}}],["required(required",{"_index":304,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["reset",{"_index":398,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}],["resetting",{"_index":793,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["resolved",{"_index":835,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"changelog.html":{}}}],["respectful",{"_index":1218,"title":{},"body":{"contributing.html":{}}}],["response",{"_index":212,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["responsibilities",{"_index":1255,"title":{},"body":{"contributing.html":{}}}],["responsibility",{"_index":1265,"title":{},"body":{"contributing.html":{}}}],["responsible",{"_index":1256,"title":{},"body":{"contributing.html":{}}}],["restriction",{"_index":1431,"title":{},"body":{"license.html":{}}}],["result",{"_index":65,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":67,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"contributing.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"todo.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":281,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/functions.html":{}}}],["returning",{"_index":1378,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returns",{"_index":171,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"miscellaneous/functions.html":{}}}],["reviewed",{"_index":1311,"title":{},"body":{"contributing.html":{}}}],["reviewer",{"_index":1181,"title":{},"body":{"contributing.html":{}}}],["right",{"_index":1264,"title":{},"body":{"contributing.html":{}}}],["rights",{"_index":1434,"title":{},"body":{"license.html":{}}}],["root",{"_index":409,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{}}}],["run",{"_index":751,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"index.html":{}}}],["rxjs",{"_index":145,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":244,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["sanitizer",{"_index":443,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["sanitizerconfig",{"_index":458,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["save",{"_index":141,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"todo.html":{}}}],["save(options",{"_index":784,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["saved",{"_index":536,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["savedmap",{"_index":153,"title":{"interfaces/SavedMap.html":{}},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorMap.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["saver",{"_index":850,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["scheme",{"_index":1175,"title":{},"body":{"contributing.html":{}}}],["scope",{"_index":1283,"title":{},"body":{"contributing.html":{}}}],["scripts",{"_index":1136,"title":{},"body":{"changelog.html":{}}}],["searchable",{"_index":1392,"title":{},"body":{"index.html":{}}}],["second",{"_index":761,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["see",{"_index":1012,"title":{},"body":{"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"changelog.html":{},"index.html":{}}}],["selection",{"_index":1494,"title":{},"body":{"todo.html":{}}}],["selector",{"_index":263,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["self",{"_index":236,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["sell",{"_index":1440,"title":{},"body":{"license.html":{}}}],["semver",{"_index":1176,"title":{},"body":{"contributing.html":{}}}],["separately",{"_index":1325,"title":{},"body":{"contributing.html":{}}}],["service",{"_index":491,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"todo.html":{}}}],["service.module",{"_index":947,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["service.module.ts",{"_index":725,"title":{},"body":{"modules/NgxEditorJSPluginServiceModule.html":{}}}],["service.service",{"_index":728,"title":{},"body":{"modules/NgxEditorJSPluginServiceModule.html":{}}}],["service.service.ts",{"_index":672,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["service.service.ts:13",{"_index":681,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["service.service.ts:23",{"_index":684,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["service.service.ts:32",{"_index":683,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["service.service.ts:40",{"_index":687,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["service.service.ts:54",{"_index":692,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["service.service.ts:68",{"_index":695,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["service.ts",{"_index":160,"title":{},"body":{"interfaces/CreateEditorJSOptions.html":{}}}],["services",{"_index":474,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"index.html":{}}}],["services/editorjs.service",{"_index":249,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{}}}],["services/plugin",{"_index":946,"title":{},"body":{"modules/NgxEditorjsPluginsModule.html":{}}}],["set",{"_index":111,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSMaterialForm.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["setdescribedbyids(ids",{"_index":337,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["sets",{"_index":411,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSService.html":{}}}],["setting",{"_index":1254,"title":{},"body":{"contributing.html":{},"todo.html":{}}}],["settings",{"_index":90,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["setup",{"_index":739,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["setupsubjects(options",{"_index":895,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["several",{"_index":737,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"changelog.html":{}}}],["sexual",{"_index":1209,"title":{},"body":{"contributing.html":{}}}],["sexualized",{"_index":1234,"title":{},"body":{"contributing.html":{}}}],["shall",{"_index":1449,"title":{},"body":{"license.html":{}}}],["ships",{"_index":1410,"title":{},"body":{"index.html":{}}}],["shortcut",{"_index":106,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginMarkerModule.html":{},"interfaces/ToolSettingsMap.html":{}}}],["shouldlabelfloat",{"_index":329,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["show",{"_index":521,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["showing",{"_index":1228,"title":{},"body":{"contributing.html":{}}}],["shown",{"_index":451,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["sign",{"_index":1178,"title":{},"body":{"contributing.html":{}}}],["simple",{"_index":1052,"title":{},"body":{"modules/PluginSimpleImageModule.html":{}}}],["simplechanges",{"_index":549,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["simpleimage",{"_index":1050,"title":{},"body":{"modules/PluginSimpleImageModule.html":{}}}],["single",{"_index":220,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"injectables/NgxEditorJSService.html":{}}}],["site",{"_index":1063,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["size",{"_index":1198,"title":{},"body":{"contributing.html":{}}}],["skipsave",{"_index":207,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{}}}],["skipself",{"_index":417,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{}}}],["small",{"_index":1142,"title":{},"body":{"changelog.html":{}}}],["social",{"_index":1292,"title":{},"body":{"contributing.html":{}}}],["software",{"_index":1428,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["spaces",{"_index":1286,"title":{},"body":{"contributing.html":{}}}],["spec\\.ts",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":1322,"title":{},"body":{"contributing.html":{}}}],["specifies",{"_index":99,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["standards",{"_index":1211,"title":{},"body":{"contributing.html":{}}}],["started",{"_index":1060,"title":{"changelog.html":{},"contributing.html":{},"index.html":{},"license.html":{},"todo.html":{}},"body":{}}],["state",{"_index":151,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{}}}],["statechanges",{"_index":275,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["states",{"_index":803,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["static",{"_index":172,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{}}}],["store",{"_index":1496,"title":{},"body":{"todo.html":{}}}],["stretch",{"_index":60,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["stretched",{"_index":61,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["string",{"_index":18,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/ChangeMap.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/EditorMap.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":35,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["styles",{"_index":27,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["styleurls",{"_index":266,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["subject",{"_index":242,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"license.html":{}}}],["subjects",{"_index":564,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["sublicense",{"_index":1438,"title":{},"body":{"license.html":{}}}],["subscribe",{"_index":371,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["subscribe(change",{"_index":621,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["subscribe(editor",{"_index":882,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["subscribe(focused",{"_index":377,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["subscribe(isready",{"_index":618,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["subscribe(saved",{"_index":623,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["subscriptions",{"_index":772,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["substantial",{"_index":1451,"title":{},"body":{"license.html":{}}}],["such",{"_index":758,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["sunday",{"_index":1121,"title":{},"body":{"changelog.html":{}}}],["super",{"_index":346,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["super(editorservice",{"_index":355,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["support",{"_index":114,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"index.html":{},"modules.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["supported",{"_index":79,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["supports",{"_index":28,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["svg",{"_index":1476,"title":{},"body":{"modules.html":{}}}],["switchmap",{"_index":796,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["switchmap(async",{"_index":838,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["switchmap(response",{"_index":855,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["t",{"_index":22,"title":{},"body":{"interfaces/Block.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["tag",{"_index":958,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"miscellaneous/variables.html":{}}}],["tag_component_field_control",{"_index":1005,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["tag_component_value_accessor",{"_index":1004,"title":{},"body":{"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["tags",{"_index":1489,"title":{},"body":{"todo.html":{}}}],["take",{"_index":797,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["take(1",{"_index":837,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["takes",{"_index":662,"title":{},"body":{"modules/NgxEditorJSModule.html":{}}}],["takeuntil",{"_index":243,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{}}}],["tane",{"_index":1413,"title":{},"body":{"index.html":{},"license.html":{}}}],["tap",{"_index":798,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["tap((response",{"_index":852,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["team",{"_index":1308,"title":{},"body":{"contributing.html":{}}}],["template",{"_index":969,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["templateurl",{"_index":264,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["temporarily",{"_index":1275,"title":{},"body":{"contributing.html":{}}}],["temporary",{"_index":1329,"title":{},"body":{"contributing.html":{}}}],["text",{"_index":42,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["this._disabled",{"_index":308,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this._empty",{"_index":314,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this._focused",{"_index":295,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this._placeholder",{"_index":290,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this._required",{"_index":301,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this._value",{"_index":282,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.apicall",{"_index":848,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.autofocus",{"_index":629,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.autosave",{"_index":597,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.blockplaceholder",{"_index":632,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.blocks",{"_index":635,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.blocks.length",{"_index":636,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.cd.markforcheck",{"_index":588,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["this.cleanupsubjects",{"_index":886,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.config.editorjs",{"_index":810,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.createeditor(this.createconfig",{"_index":612,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.createonchange.call(this",{"_index":818,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.createonready.call(this",{"_index":822,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.describedby",{"_index":338,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.destroyinstance",{"_index":888,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editorjs",{"_index":862,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editorjs(editorconfig",{"_index":824,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editorjs.version",{"_index":863,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editormap[holder",{"_index":828,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editormap[holder].next(editor",{"_index":829,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editormap[options.holder",{"_index":866,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editormap[options.holder].complete",{"_index":905,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editormap[options.holder].pipe(filter(editor",{"_index":868,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.editorservice",{"_index":592,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.el.nativeelement",{"_index":591,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.el.nativeelement.id",{"_index":613,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.empty",{"_index":331,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.errorstate",{"_index":380,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.excludetools",{"_index":596,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.expand",{"_index":982,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["this.focused",{"_index":330,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.geteditor(options",{"_index":880,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.geteditor(options).pipe",{"_index":836,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.getfocusmonitor(this.editorinstance.element",{"_index":375,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.gettools(options.excludetools",{"_index":812,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.haschanged.emit(change",{"_index":622,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.hassaved.next(saved",{"_index":624,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.hassavedmap[options.holder",{"_index":878,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.hassavedmap[options.holder].asobservable",{"_index":879,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.hassavedmap[options.holder].next(true",{"_index":853,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.hidetoolbar",{"_index":630,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.holder",{"_index":604,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.id",{"_index":590,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.initialblock",{"_index":631,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.isready.emit(isready",{"_index":619,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.isreadymap[holder].next(true",{"_index":831,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.isreadymap[options.holder",{"_index":869,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.isreadymap[options.holder].asobservable",{"_index":870,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.isreadymap[options.holder].next(true",{"_index":894,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.isreadymap[options.holder].value",{"_index":893,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.istouched.emit(true",{"_index":587,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.lastchangemap[options.holder",{"_index":871,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.lastchangemap[options.holder].next(change",{"_index":891,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.lastchangemap[options.holder].next(response.result",{"_index":854,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.lastchangemap[options.holder].pipe",{"_index":872,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.minheight",{"_index":633,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.ngcontrol",{"_index":362,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.ngcontrol.invalid",{"_index":381,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.ngcontrol.touched",{"_index":382,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.ngcontrol.valueaccessor",{"_index":364,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.ondestroy$.complete",{"_index":626,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["this.ondestroy$.next(true",{"_index":625,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["this.ontouch",{"_index":299,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.ontouch(event",{"_index":344,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.pluginconfigmap",{"_index":703,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["this.pluginconfigmap[key",{"_index":704,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["this.plugins.gettools(excludetools",{"_index":906,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.ref.tick",{"_index":832,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.sanitizer",{"_index":634,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.save(options",{"_index":858,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.service",{"_index":617,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.service.createinstance",{"_index":595,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.service.destroyinstance",{"_index":627,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.service.geteditor",{"_index":589,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.service.update",{"_index":603,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.setupservicesubscriptions",{"_index":374,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.setupsubjects",{"_index":827,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.statechanges.next",{"_index":286,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["this.touched$.asobservable",{"_index":593,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.touched$.next(true",{"_index":586,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["this.zone.run",{"_index":885,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.zone.run(async",{"_index":826,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.zone.runoutsideangular",{"_index":883,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this.zone.runoutsideangular(async",{"_index":823,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this[mapkey][options.holder",{"_index":897,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this[mapkey][options.holder].complete",{"_index":903,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["this[mapkey][options.holder].next(value",{"_index":899,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["threatening",{"_index":1280,"title":{},"body":{"contributing.html":{}}}],["throw",{"_index":614,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{}}}],["tick",{"_index":752,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["tidy",{"_index":1084,"title":{},"body":{"changelog.html":{}}}],["time",{"_index":157,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"miscellaneous/variables.html":{}}}],["timer",{"_index":503,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["tinynode",{"_index":1393,"title":{},"body":{"index.html":{}}}],["tinynodes",{"_index":954,"title":{},"body":{"modules/NgxTinynodesComponentsModule.html":{},"interfaces/NgxTinynodesMatFieldComponent.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"changelog.html":{},"index.html":{},"license.html":{},"todo.html":{},"miscellaneous/variables.html":{}}}],["tinynodes/ngx",{"_index":660,"title":{},"body":{"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"index.html":{}}}],["today",{"_index":1071,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":1484,"title":{"todo.html":{}},"body":{"todo.html":{}}}],["todos",{"_index":1485,"title":{},"body":{"todo.html":{}}}],["toggleexpand",{"_index":974,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["token",{"_index":121,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["tool",{"_index":89,"title":{},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["tool.config",{"_index":721,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["tool.inlinetoolbar",{"_index":719,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["tool.shortcut",{"_index":716,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{}}}],["toolbar",{"_index":449,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["toolbaropen",{"_index":804,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["toolconstructable",{"_index":75,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["tools",{"_index":93,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/CreateEditorJSOptions.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"modules/NgxEditorjsPluginsModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["toolsettings",{"_index":74,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/typealiases.html":{}}}],["toolsettingsmap",{"_index":94,"title":{"interfaces/ToolSettingsMap.html":{}},"body":{"interfaces/BlockData.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{}}}],["tort",{"_index":1472,"title":{},"body":{"license.html":{}}}],["touched",{"_index":492,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["towards",{"_index":1230,"title":{},"body":{"contributing.html":{}}}],["tree",{"_index":970,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["trigger",{"_index":370,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"injectables/NgxEditorJSService.html":{}}}],["triggered",{"_index":735,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["trolling",{"_index":1239,"title":{},"body":{"contributing.html":{}}}],["true",{"_index":112,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["tslint:disable",{"_index":357,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["two",{"_index":551,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"contributing.html":{}}}],["type",{"_index":11,"title":{},"body":{"interfaces/Block.html":{},"interfaces/BlockData.html":{},"interfaces/CreateEditorJSOptions.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"modules/NgxEditorJSComponentModule.html":{},"interfaces/NgxEditorJSConfig.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"interfaces/NgxEditorJSModuleConfig.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"modules/PluginCodeModule.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1500,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":195,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":77,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["types/blocks",{"_index":577,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["types/config",{"_index":423,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSService.html":{}}}],["types/editorjs",{"_index":799,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["types/injector",{"_index":424,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"injectables/NgxEditorJSService.html":{}}}],["types/maps",{"_index":800,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["types/plugins",{"_index":696,"title":{},"body":{"injectables/NgxEditorJSPluginService.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{}}}],["typescript",{"_index":176,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{}}}],["unacceptable",{"_index":1232,"title":{},"body":{"contributing.html":{}}}],["undefined",{"_index":119,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"miscellaneous/variables.html":{}}}],["under",{"_index":1067,"title":{},"body":{"changelog.html":{}}}],["underlying",{"_index":317,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"index.html":{}}}],["underneath",{"_index":1402,"title":{},"body":{"index.html":{}}}],["unique",{"_index":324,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["unlike",{"_index":834,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["unordered",{"_index":30,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{},"miscellaneous/typealiases.html":{}}}],["unreleased",{"_index":1070,"title":{},"body":{"changelog.html":{}}}],["unsubscribe",{"_index":372,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["until",{"_index":1138,"title":{},"body":{"changelog.html":{}}}],["unwelcome",{"_index":1236,"title":{},"body":{"contributing.html":{}}}],["up",{"_index":368,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{}}}],["update",{"_index":740,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"contributing.html":{}}}],["update(options",{"_index":787,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["updated",{"_index":554,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"changelog.html":{}}}],["upgraded",{"_index":1102,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":51,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["usage",{"_index":1400,"title":{},"body":{"index.html":{}}}],["use",{"_index":101,"title":{},"body":{"interfaces/BlockData.html":{},"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"contributing.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":116,"title":{},"body":{"interfaces/BlockData.html":{},"interfaces/CreateEditorJSOptions.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"index.html":{}}}],["useexisting",{"_index":255,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"miscellaneous/variables.html":{}}}],["usefactory",{"_index":431,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{}}}],["useful",{"_index":790,"title":{},"body":{"injectables/NgxEditorJSService.html":{},"changelog.html":{},"contributing.html":{}}}],["userplugins",{"_index":526,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["uses",{"_index":808,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["usevalue",{"_index":430,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginEmbedModule.html":{},"modules/PluginHeaderModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginInlineCodeModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginParagraphModule.html":{},"modules/PluginQuoteModule.html":{},"modules/PluginSimpleImageModule.html":{},"modules/PluginWarningModule.html":{}}}],["using",{"_index":647,"title":{},"body":{"modules/NgxEditorJSMatFieldModule.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"contributing.html":{},"index.html":{}}}],["util/plugin",{"_index":727,"title":{},"body":{"modules/NgxEditorJSPluginServiceModule.html":{},"modules/PluginCodeModule.html":{},"modules/PluginImageModule.html":{},"modules/PluginLinkModule.html":{},"modules/PluginListModule.html":{},"modules/PluginMarkerModule.html":{},"modules/PluginSimpleImageModule.html":{}}}],["value",{"_index":280,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value(value",{"_index":285,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["values",{"_index":149,"title":{},"body":{"interfaces/ChangeMap.html":{},"interfaces/EditorJSChange.html":{},"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorMap.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"interfaces/ReadyMap.html":{},"interfaces/SavedMap.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":984,"title":{},"body":{"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["variables",{"_index":1165,"title":{"miscellaneous/variables.html":{}},"body":{"contributing.html":{},"miscellaneous/variables.html":{}}}],["version",{"_index":173,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"changelog.html":{},"contributing.html":{},"miscellaneous/variables.html":{}}}],["versioning",{"_index":1174,"title":{},"body":{"contributing.html":{}}}],["via",{"_index":84,"title":{},"body":{"interfaces/BlockData.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSPluginService.html":{},"interfaces/PluginConfig.html":{},"interfaces/PluginConfigMap.html":{},"interfaces/ToolSettingsMap.html":{},"contributing.html":{},"index.html":{},"todo.html":{},"miscellaneous/typealiases.html":{}}}],["viewchild",{"_index":237,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["viewchild('editorinstance",{"_index":318,"title":{},"body":{"interfaces/EditorJSMaterialForm.html":{}}}],["viewer",{"_index":999,"title":{},"body":{"modules/NgxTinynodesMatJsonOutputModule.html":{},"dependencies.html":{}}}],["viewpoints",{"_index":1220,"title":{},"body":{"contributing.html":{}}}],["visit",{"_index":1390,"title":{},"body":{"index.html":{}}}],["void",{"_index":188,"title":{},"body":{"interfaces/EditorJSClass.html":{},"interfaces/EditorJSInstanceConfig.html":{},"interfaces/EditorJSMaterialForm.html":{},"interfaces/InjectorApiCallOptions.html":{},"interfaces/InjectorApiCallResponse.html":{},"interfaces/InjectorMethodOption.html":{},"directives/NgxEditorJSDirective.html":{},"injectables/NgxEditorJSService.html":{},"components/NgxTinynodesMatJsonOutputComponent.html":{}}}],["wait",{"_index":559,"title":{},"body":{"directives/NgxEditorJSDirective.html":{}}}],["want",{"_index":1405,"title":{},"body":{"index.html":{}}}],["warning",{"_index":1054,"title":{},"body":{"modules/PluginWarningModule.html":{}}}],["warranties",{"_index":1458,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1453,"title":{},"body":{"license.html":{}}}],["way",{"_index":472,"title":{},"body":{"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorjsPluginsModule.html":{}}}],["wednesday",{"_index":1089,"title":{},"body":{"changelog.html":{}}}],["welcoming",{"_index":1186,"title":{},"body":{"contributing.html":{}}}],["well",{"_index":1087,"title":{},"body":{"changelog.html":{}}}],["whether",{"_index":1470,"title":{},"body":{"license.html":{}}}],["wiki",{"_index":1270,"title":{},"body":{"contributing.html":{}}}],["wish",{"_index":1150,"title":{},"body":{"contributing.html":{}}}],["withbackground",{"_index":59,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["withborder",{"_index":56,"title":{},"body":{"interfaces/Block.html":{},"interfaces/Header.html":{},"interfaces/HeaderBlock.html":{},"interfaces/Image.html":{},"interfaces/ImageBlock.html":{},"interfaces/List.html":{},"interfaces/ListBlock.html":{},"interfaces/Paragraph.html":{},"interfaces/ParagraphBlock.html":{}}}],["within",{"_index":661,"title":{},"body":{"modules/NgxEditorJSModule.html":{},"injectables/NgxEditorJSService.html":{},"contributing.html":{},"index.html":{}}}],["without",{"_index":1108,"title":{},"body":{"changelog.html":{},"contributing.html":{},"license.html":{}}}],["won't",{"_index":450,"title":{},"body":{"interfaces/NgxEditorJSConfig.html":{},"interfaces/NgxEditorJSModuleConfig.html":{}}}],["work",{"_index":1103,"title":{},"body":{"changelog.html":{}}}],["written",{"_index":1077,"title":{},"body":{"changelog.html":{}}}],["yes",{"_index":414,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"directives/NgxEditorJSDirective.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"miscellaneous/functions.html":{}}}],["zone",{"_index":748,"title":{},"body":{"injectables/NgxEditorJSService.html":{}}}],["zone.js",{"_index":1365,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":397,"title":{},"body":{"modules/NgxEditorJSComponentModule.html":{},"modules/NgxEditorJSMatFieldModule.html":{},"modules/NgxEditorJSModule.html":{},"modules/NgxEditorJSPluginServiceModule.html":{},"modules/NgxEditorjsPluginsModule.html":{},"modules/NgxTinynodesComponentsModule.html":{},"modules/NgxTinynodesMatJsonOutputModule.html":{},"modules/NgxTinynodesMatTagInputModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Block.html":{"url":"interfaces/Block.html","title":"interface - Block","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Block\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                Base block type for EditorJS\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        data\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts:13\n                            \n                        \n                \n                    \n                        Additional properties on the type\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The data interface for the block type\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The EditorJS block type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BlockData.html":{"url":"interfaces/BlockData.html","title":"interface - BlockData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BlockData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts\n        \n\n            \n                Description\n            \n            \n                Block Data interface\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts:7\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport { ToolSettings, ToolConstructable } from '@editorjs/editorjs';\n\n/**\n * Block Data interface\n */\nexport interface BlockData {\n  [key: string]: any;\n}\n\n/**\n * The types of plugins supported, currently block and inline\n */\nexport enum PluginTypes {\n  /**\n   * A EditorJS block plugin\n   */\n  Block = 'block',\n  /**\n   * A EditorJS inline plugin\n   */\n  Inline = 'inline'\n}\n\n/**\n * The types of plugins supported via the plugin `type` property\n */\nexport type PluginType = PluginTypes.Block | PluginTypes.Inline | string;\n\n/**\n * A plugin property\n */\nexport type PluginProperty = string;\n\n/**\n * The EditorJS tool settings for this plugin\n */\nexport type EditorJSPlugin = ToolConstructable | ToolSettings;\n\n/**\n * A map of all the tools settings\n */\nexport interface ToolSettingsMap {\n  /**\n   * The key of the plugin and the plugin exported tool settings\n   */\n  [key: string]: EditorJSPlugin;\n}\n\n/**\n * A plugin configuration object\n */\nexport interface PluginConfig {\n  /**\n   * Specifies the type of plugin for the plugin provider\n   */\n  type: PluginProperty;\n  /**\n   * The key to use for the plugin\n   */\n  key: PluginProperty;\n  /**\n   * Label for displaying the plugin name\n   */\n  pluginName: PluginProperty;\n  /**\n   * Optional description for the plugin\n   */\n  description?: PluginProperty;\n  /**\n   * Optional shortcut for the plugin\n   */\n  shortcut?: PluginProperty;\n  /**\n   * Optional {@link https://editorjs.io/provide-custom-configuration | custom configuration} to pass to EditorJS\n   */\n  config?: any;\n\n  /**\n   * If a block tool, you can also set this to true if it contains inline tool support\n   */\n  inlineToolbar?: boolean;\n  /**\n   * Optional block data, used to define the block data for this type\n   * and used as a default\n   */\n  blockData?: BlockData;\n  /**\n   * The plugin for the editor\n   */\n  plugin: EditorJSPlugin | undefined;\n}\n\n/**\n * The Injection token for initial plugins as defined in the ngx-editorjs module\n */\nexport const EDITOR_JS_TOOL_INJECTOR = new InjectionToken('EDITOR_JS_TOOL_INJECTOR');\n\n/**\n * Injection token for a plugin config\n */\nexport const PLUGIN_CONFIG = new InjectionToken('PLUGIN_CONFIG');\n\n/**\n * A map of plugin configs\n */\nexport interface PluginConfigMap {\n  /**\n   * A plugin config per key\n   */\n  [key: string]: PluginConfig;\n}\n\n/**\n * Injection token for the plugin config map\n */\nexport const PluginClasses = new InjectionToken('PluginClasses');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ChangeMap.html":{"url":"interfaces/ChangeMap.html","title":"interface - ChangeMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ChangeMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts\n        \n\n            \n                Description\n            \n            \n                A map containing BehaviorSubject which is the last save from the EditorJS instance\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts:52\n                            \n                        \n                \n                    \n                        A map key containing a BehaviorSubject\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import EditorJS, { OutputData } from '@editorjs/editorjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { Block } from './blocks';\n\n/**\n * A map containing instances of `BehaviorSubject`\n */\nexport interface EditorMap {\n  /**\n   * A map key containing `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the ready state of EditorJS\n */\nexport interface ReadyMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the save state of EditorJS\n */\nexport interface SavedMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * An EditorJS change event\n */\nexport interface EditorJSChange {\n  /**\n   * Time of the change\n   */\n  time: number;\n  /**\n   * Blocks in the change\n   */\n  blocks: Block[];\n}\n\n/**\n * A map containing `BehaviorSubject` which is the last save from the EditorJS instance\n */\nexport interface ChangeMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateEditorJSOptions.html":{"url":"interfaces/CreateEditorJSOptions.html","title":"interface - CreateEditorJSOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CreateEditorJSOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/editorjs-service.ts\n        \n\n            \n                Description\n            \n            \n                EditorJS options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        autoSave\n                                \n                                \n                                        config\n                                \n                                \n                                            Optional\n                                        excludeTools\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autoSave\n                                    \n                                \n                                \n                                    \n                                        autoSave:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Autosave on change, is set to false\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:     EditorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EditorConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Configuration\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        excludeTools\n                                    \n                                \n                                \n                                    \n                                        excludeTools:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Tools to include, Optional - if not set all tools will be used\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { EditorConfig } from '@editorjs/editorjs';\n\n/**\n * EditorJS options\n */\nexport interface CreateEditorJSOptions {\n  /**\n   * Configuration\n   */\n  config: EditorConfig;\n  /**\n   * Tools to include, Optional - if not set all tools will be used\n   */\n  excludeTools?: string[];\n  /**\n   * Autosave on change, is set to false\n   */\n  autoSave?: number;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EditorJSChange.html":{"url":"interfaces/EditorJSChange.html","title":"interface - EditorJSChange","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EditorJSChange\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts\n        \n\n            \n                Description\n            \n            \n                An EditorJS change event\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        blocks\n                                \n                                \n                                        time\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocks\n                                    \n                                \n                                \n                                    \n                                        blocks:         Block[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Block[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Blocks in the change\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        time\n                                    \n                                \n                                \n                                    \n                                        time:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Time of the change\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import EditorJS, { OutputData } from '@editorjs/editorjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { Block } from './blocks';\n\n/**\n * A map containing instances of `BehaviorSubject`\n */\nexport interface EditorMap {\n  /**\n   * A map key containing `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the ready state of EditorJS\n */\nexport interface ReadyMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the save state of EditorJS\n */\nexport interface SavedMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * An EditorJS change event\n */\nexport interface EditorJSChange {\n  /**\n   * Time of the change\n   */\n  time: number;\n  /**\n   * Blocks in the change\n   */\n  blocks: Block[];\n}\n\n/**\n * A map containing `BehaviorSubject` which is the last save from the EditorJS instance\n */\nexport interface ChangeMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EditorJSClass.html":{"url":"interfaces/EditorJSClass.html","title":"interface - EditorJSClass","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EditorJSClass\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/injector.ts\n        \n\n            \n                Description\n            \n            \n                Interface for the injected EditorJS class, returns the static\nclass of EditorJS with the version and that creates the instance and provides\nthe Typescript parse with type information\n\n            \n\n            \n                Extends\n            \n            \n                        Function\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        version\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                    \n                                \n                                \n                                    \n                                        version:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    EditorJS version\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport EditorJS, { EditorConfig, OutputData } from '@editorjs/editorjs';\nimport { Block } from './blocks';\n\n/**\n * Configuration for creating an EditorJS instance\n */\nexport interface EditorJSInstanceConfig {\n  /**\n   * The editor configuration, this is required with at least the `holder` property\n   */\n  editorConfig: EditorConfig;\n  /**\n   * The method to call when the editor makes a change\n   */\n  onChange?: (holder?: string) => void;\n\n  /**\n   * The method to call with an editor is ready\n   */\n  onReady?: (holder?: string) => void;\n}\n\n/**\n * Default values for each internal map\n */\nexport const MAP_DEFAULTS = [\n  ['lastChangeMap', { time: 0, blocks: [], version: typeof EditorJS !== 'undefined' && EditorJS.version || ''}],\n  ['isReadyMap', false],\n  ['hasSavedMap', false]\n];\n\n/**\n * Injection token for the EditorJS class\n */\nexport const EDITORJS_MODULE_IMPORT = new InjectionToken('EDITORJS_MODULE_IMPORT');\n\n/**\n * The EditorJS class injector\n */\nexport const EditorJSInstance = new InjectionToken('EditorJSInstance');\n\n/**\n * Options for a Injector method\n */\nexport interface InjectorMethodOption {\n  /**\n   * The holder for the option\n   */\n  holder: string;\n  /**\n   * Optional blocks\n   */\n  data?: OutputData;\n  /**\n   * Optional editor\n   */\n  editor?: EditorJS;\n  /**\n   * Don't call save\n   */\n  skipSave?: boolean;\n}\n\n/**\n * Options to pass when calling the EditorJS instance API\n */\nexport interface InjectorApiCallOptions {\n  /**\n   * Holder for the EditorJS instance\n   */\n  holder: string;\n\n  /**\n   * The method to call\n   */\n  method: string;\n  /**\n   * The optional namespace for the API call\n   */\n  namespace?: string;\n}\n\n/**\n * A response from the EditorJS api\n */\nexport interface InjectorApiCallResponse extends InjectorApiCallOptions {\n  result: T;\n}\n\n/**\n * Interface for the injected EditorJS class, returns the static\n * class of EditorJS with the version and that creates the instance and provides\n * the Typescript parse with type information\n */\nexport interface EditorJSClass extends Function {\n  new (...args: any[]): T;\n  /**\n   * EditorJS version\n   */\n  version: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EditorJSInstanceConfig.html":{"url":"interfaces/EditorJSInstanceConfig.html","title":"interface - EditorJSInstanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EditorJSInstanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/injector.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for creating an EditorJS instance\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        editorConfig\n                                \n                                \n                                            Optional\n                                        onChange\n                                \n                                \n                                            Optional\n                                        onReady\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        editorConfig\n                                    \n                                \n                                \n                                    \n                                        editorConfig:     EditorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EditorConfig\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The editor configuration, this is required with at least the holder property\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onChange\n                                    \n                                \n                                \n                                    \n                                        onChange:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The method to call when the editor makes a change\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        onReady\n                                    \n                                \n                                \n                                    \n                                        onReady:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The method to call with an editor is ready\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport EditorJS, { EditorConfig, OutputData } from '@editorjs/editorjs';\nimport { Block } from './blocks';\n\n/**\n * Configuration for creating an EditorJS instance\n */\nexport interface EditorJSInstanceConfig {\n  /**\n   * The editor configuration, this is required with at least the `holder` property\n   */\n  editorConfig: EditorConfig;\n  /**\n   * The method to call when the editor makes a change\n   */\n  onChange?: (holder?: string) => void;\n\n  /**\n   * The method to call with an editor is ready\n   */\n  onReady?: (holder?: string) => void;\n}\n\n/**\n * Default values for each internal map\n */\nexport const MAP_DEFAULTS = [\n  ['lastChangeMap', { time: 0, blocks: [], version: typeof EditorJS !== 'undefined' && EditorJS.version || ''}],\n  ['isReadyMap', false],\n  ['hasSavedMap', false]\n];\n\n/**\n * Injection token for the EditorJS class\n */\nexport const EDITORJS_MODULE_IMPORT = new InjectionToken('EDITORJS_MODULE_IMPORT');\n\n/**\n * The EditorJS class injector\n */\nexport const EditorJSInstance = new InjectionToken('EditorJSInstance');\n\n/**\n * Options for a Injector method\n */\nexport interface InjectorMethodOption {\n  /**\n   * The holder for the option\n   */\n  holder: string;\n  /**\n   * Optional blocks\n   */\n  data?: OutputData;\n  /**\n   * Optional editor\n   */\n  editor?: EditorJS;\n  /**\n   * Don't call save\n   */\n  skipSave?: boolean;\n}\n\n/**\n * Options to pass when calling the EditorJS instance API\n */\nexport interface InjectorApiCallOptions {\n  /**\n   * Holder for the EditorJS instance\n   */\n  holder: string;\n\n  /**\n   * The method to call\n   */\n  method: string;\n  /**\n   * The optional namespace for the API call\n   */\n  namespace?: string;\n}\n\n/**\n * A response from the EditorJS api\n */\nexport interface InjectorApiCallResponse extends InjectorApiCallOptions {\n  result: T;\n}\n\n/**\n * Interface for the injected EditorJS class, returns the static\n * class of EditorJS with the version and that creates the instance and provides\n * the Typescript parse with type information\n */\nexport interface EditorJSClass extends Function {\n  new (...args: any[]): T;\n  /**\n   * EditorJS version\n   */\n  version: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EditorJSMaterialForm.html":{"url":"interfaces/EditorJSMaterialForm.html","title":"interface - EditorJSMaterialForm","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EditorJSMaterialForm\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/containers/editorjs-mat-field/editorjs-mat-field.component.ts\n        \n\n            \n                Description\n            \n            \n                Single interface for EditorJSMaterialForm\n\n            \n\n            \n                Extends\n            \n            \n                    MatFormFieldControl\n            \n\n\n\n\n    \n\n\n    \n        import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  DoCheck,\n  forwardRef,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Provider,\n  Self,\n  ViewChild\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { NgxEditorJSDirective } from '../../directives/ngx-editorjs.directive';\nimport { NgxEditorJSService } from '../../services/editorjs.service';\nimport { NgxEditorJSComponent } from '../editorjs/editorjs.component';\n\n/**\n * Provider for the EditorJS Material Field Component\n */\nexport const EDITORJS_MATERIAL_FIELD_CONTROL: Provider = {\n  provide: MatFormFieldControl,\n  useExisting: forwardRef(() => NgxEditorJSMatFieldComponent),\n  multi: true\n};\n\n/**\n * Single interface for EditorJSMaterialForm\n */\nexport interface EditorJSMaterialForm\n  extends MatFormFieldControl,\n    OnInit,\n    AfterContentInit,\n    OnDestroy,\n    DoCheck {}\n\n/**\n * This component provides a [Material](https://material.angular.io) compatible `` component.\n * It provides a full implementation of all the required properties of a Material component\n *\n * @example\n * \n *  \n * \n */\n@Component({\n  selector: 'ngx-editorjs-mat-field',\n  templateUrl: 'editorjs-mat-field.component.html',\n  styleUrls: ['editorjs-mat-field.component.scss'],\n  providers: [EDITORJS_MATERIAL_FIELD_CONTROL],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxEditorJSMatFieldComponent extends NgxEditorJSComponent implements EditorJSMaterialForm {\n  /**\n   * Internal Static ID for Material for each editor instance\n   */\n  static nextId = 0;\n  /**\n   * Material state change subject\n   */\n  public stateChanges = new Subject();\n\n  /**\n   * Material control type\n   */\n  public controlType = 'ngx-editorjs-mat-field';\n\n  /**\n   * Material error state\n   */\n  public errorState = false;\n\n  /**\n   * Get the component value\n   */\n  get value(): any {\n    return this._value;\n  }\n\n  /**\n   * Set the component value\n   * @param value The value to set\n   */\n  @Input('value')\n  set value(value: any) {\n    this._value = value;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Material placeholder value\n   */\n  private _placeholder: string;\n\n  /**\n   * Get the Material placeholder value\n   */\n  get placeholder() {\n    return this._placeholder;\n  }\n\n  /**\n   * Set the material Placeholder value\n   * @input placeholder The placeholder state to set\n   */\n  @Input('placeholder')\n  set placeholder(placeholder: string) {\n    this._placeholder = placeholder;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Material focused state\n   */\n  private _focused: boolean;\n  /**\n   * Get the Material focused state\n   */\n  get focused() {\n    return this._focused;\n  }\n\n  /**\n   * Set the Material focused state\n   * @param focused The focused state to set\n   */\n  @Input('focused')\n  set focused(focused: boolean) {\n    this._focused = coerceBooleanProperty(focused);\n    if (this._focused) {\n      this.onTouch();\n    }\n    this.stateChanges.next();\n  }\n\n  /**\n   * Material Required Value\n   */\n  private _required = false;\n\n  /**\n   * Get the Material required state\n   */\n  get required() {\n    return this._required;\n  }\n\n  /**\n   * Set the Material requied state\n   * @param required The required state to set\n   */\n  @Input('required')\n  set required(required: boolean) {\n    this._required = coerceBooleanProperty(required);\n    this.stateChanges.next();\n  }\n\n  /**\n   * Material disabled state\n   */\n  private _disabled = false;\n\n  /**\n   * Get the Material disabled state\n   */\n  get disabled() {\n    return this._disabled;\n  }\n\n  /**\n   * Set the Material disabled state\n   * @param disabled The disabled state to set\n   */\n  @Input('disabled')\n  set disabled(disabled: boolean) {\n    this._disabled = coerceBooleanProperty(disabled);\n    this.stateChanges.next();\n  }\n\n  /**\n   * Material empty state\n   */\n  private _empty: boolean;\n  /**\n   * Get the Material empty state\n   */\n  public get empty() {\n    return this._empty;\n  }\n\n  /**\n   * Set the Material empty state\n   * @param empty The empty value\n   */\n  public set empty(empty: boolean) {\n    this._empty = empty;\n  }\n\n  /**\n   * Access to the underlying {NgxEditorJSDirective}\n   */\n  @ViewChild('editorInstance', { read: NgxEditorJSDirective, static: true })\n  public readonly editorInstance: NgxEditorJSDirective;\n\n  /**\n   * Host binding to the unique ID for this editor for material\n   */\n  @HostBinding()\n  id = `ngx-editorjs-mat-field-${NgxEditorJSMatFieldComponent.nextId++}`;\n\n  /**\n   * Gets if the Material label should float\n   */\n  @HostBinding('class.floating')\n  get shouldLabelFloat() {\n    return this.focused || !this.empty;\n  }\n\n  /**\n   * Host binding for ARIA label\n   */\n  @HostBinding('attr.aria-describedby') describedBy = '';\n\n  /**\n   *\n   * @param ids The IDs of the Material components\n   */\n  public setDescribedByIds(ids: string[]) {\n    this.describedBy = ids.join(' ');\n  }\n\n  /**\n   * Material on container click\n   * @param event The {MouseEvent} for the container click\n   */\n  public onContainerClick(event: MouseEvent) {\n    this.onTouch(event);\n    this.stateChanges.next();\n  }\n\n  /**\n   * Constructor for the Material field, as this extends the `NgxEditorJSComponent` component\n   * we call `super()` to get all the properties of that component\n   * @param editorService The NgxEditorJSService instance\n   * @param focusMonitor Focus monitor for the Material element\n   * @param changeDetection The Change detection ref\n   * @param ngControl The Angular control base class\n   */\n  constructor(\n    protected readonly editorService: NgxEditorJSService,\n    protected focusMonitor: FocusMonitor,\n    protected readonly changeDetection: ChangeDetectorRef,\n    @Optional() @Self() public ngControl: NgControl\n  ) {\n    super(editorService, focusMonitor, changeDetection);\n  }\n\n  /**\n   * Called on OnInit\n   */\n  // tslint:disable-next-line:use-lifecycle-interface\n  public ngOnInit(): void {\n    if (this.ngControl !== null) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  /**\n   * Inside the AfterContentInit life-cycle we set up a listener for focus\n   * and trigger focus autosave subscribe and unsubscribe\n   */\n  // tslint:disable-next-line:use-lifecycle-interface\n  public ngAfterContentInit(): void {\n    this.setupServiceSubscriptions();\n    this.getFocusMonitor(this.editorInstance.element)\n      .pipe(takeUntil(this.onDestroy$))\n      .subscribe(focused => {\n        this.onTouch();\n        this.focused = focused;\n        this.stateChanges.next();\n      });\n  }\n\n  /**\n   * Set the error state based on the underlying control state\n   */\n  // tslint:disable-next-line:use-lifecycle-interface\n  ngDoCheck(): void {\n    if (this.ngControl) {\n      this.errorState = this.ngControl.invalid && this.ngControl.touched;\n      this.stateChanges.next();\n    }\n  }\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EditorMap.html":{"url":"interfaces/EditorMap.html","title":"interface - EditorMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EditorMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts\n        \n\n            \n                Description\n            \n            \n                A map containing instances of BehaviorSubject\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts:8\n                            \n                        \n                \n                    \n                        A map key containing BehaviorSubject\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import EditorJS, { OutputData } from '@editorjs/editorjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { Block } from './blocks';\n\n/**\n * A map containing instances of `BehaviorSubject`\n */\nexport interface EditorMap {\n  /**\n   * A map key containing `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the ready state of EditorJS\n */\nexport interface ReadyMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the save state of EditorJS\n */\nexport interface SavedMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * An EditorJS change event\n */\nexport interface EditorJSChange {\n  /**\n   * Time of the change\n   */\n  time: number;\n  /**\n   * Blocks in the change\n   */\n  blocks: Block[];\n}\n\n/**\n * A map containing `BehaviorSubject` which is the last save from the EditorJS instance\n */\nexport interface ChangeMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Header.html":{"url":"interfaces/Header.html","title":"interface - Header","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Header\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                Default data type for a header block\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        level\n                                \n                                \n                                        text\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                    \n                                \n                                \n                                    \n                                        level:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The header level from 1-6\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The header text\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HeaderBlock.html":{"url":"interfaces/HeaderBlock.html","title":"interface - HeaderBlock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  HeaderBlock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a header block\n\n            \n\n            \n                Extends\n            \n            \n                        Block\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The EditorJS block type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Image.html":{"url":"interfaces/Image.html","title":"interface - Image","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Image\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                Default data type for a header block\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        caption\n                                \n                                \n                                            Optional\n                                        stretched\n                                \n                                \n                                        url\n                                \n                                \n                                            Optional\n                                        withBackground\n                                \n                                \n                                            Optional\n                                        withBorder\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        caption\n                                    \n                                \n                                \n                                    \n                                        caption:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional image caption\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stretched\n                                    \n                                \n                                \n                                    \n                                        stretched:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stretch property\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The image URL\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withBackground\n                                    \n                                \n                                \n                                    \n                                        withBackground:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional background property\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        withBorder\n                                    \n                                \n                                \n                                    \n                                        withBorder:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional border property\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ImageBlock.html":{"url":"interfaces/ImageBlock.html","title":"interface - ImageBlock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ImageBlock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a image block\n\n            \n\n            \n                Extends\n            \n            \n                        Block\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The EditorJS block type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InjectorApiCallOptions.html":{"url":"interfaces/InjectorApiCallOptions.html","title":"interface - InjectorApiCallOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InjectorApiCallOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/injector.ts\n        \n\n            \n                Description\n            \n            \n                Options to pass when calling the EditorJS instance API\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        holder\n                                \n                                \n                                        method\n                                \n                                \n                                            Optional\n                                        namespace\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        holder\n                                    \n                                \n                                \n                                    \n                                        holder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Holder for the EditorJS instance\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                    \n                                \n                                \n                                    \n                                        method:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The method to call\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        namespace\n                                    \n                                \n                                \n                                    \n                                        namespace:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The optional namespace for the API call\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport EditorJS, { EditorConfig, OutputData } from '@editorjs/editorjs';\nimport { Block } from './blocks';\n\n/**\n * Configuration for creating an EditorJS instance\n */\nexport interface EditorJSInstanceConfig {\n  /**\n   * The editor configuration, this is required with at least the `holder` property\n   */\n  editorConfig: EditorConfig;\n  /**\n   * The method to call when the editor makes a change\n   */\n  onChange?: (holder?: string) => void;\n\n  /**\n   * The method to call with an editor is ready\n   */\n  onReady?: (holder?: string) => void;\n}\n\n/**\n * Default values for each internal map\n */\nexport const MAP_DEFAULTS = [\n  ['lastChangeMap', { time: 0, blocks: [], version: typeof EditorJS !== 'undefined' && EditorJS.version || ''}],\n  ['isReadyMap', false],\n  ['hasSavedMap', false]\n];\n\n/**\n * Injection token for the EditorJS class\n */\nexport const EDITORJS_MODULE_IMPORT = new InjectionToken('EDITORJS_MODULE_IMPORT');\n\n/**\n * The EditorJS class injector\n */\nexport const EditorJSInstance = new InjectionToken('EditorJSInstance');\n\n/**\n * Options for a Injector method\n */\nexport interface InjectorMethodOption {\n  /**\n   * The holder for the option\n   */\n  holder: string;\n  /**\n   * Optional blocks\n   */\n  data?: OutputData;\n  /**\n   * Optional editor\n   */\n  editor?: EditorJS;\n  /**\n   * Don't call save\n   */\n  skipSave?: boolean;\n}\n\n/**\n * Options to pass when calling the EditorJS instance API\n */\nexport interface InjectorApiCallOptions {\n  /**\n   * Holder for the EditorJS instance\n   */\n  holder: string;\n\n  /**\n   * The method to call\n   */\n  method: string;\n  /**\n   * The optional namespace for the API call\n   */\n  namespace?: string;\n}\n\n/**\n * A response from the EditorJS api\n */\nexport interface InjectorApiCallResponse extends InjectorApiCallOptions {\n  result: T;\n}\n\n/**\n * Interface for the injected EditorJS class, returns the static\n * class of EditorJS with the version and that creates the instance and provides\n * the Typescript parse with type information\n */\nexport interface EditorJSClass extends Function {\n  new (...args: any[]): T;\n  /**\n   * EditorJS version\n   */\n  version: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InjectorApiCallResponse.html":{"url":"interfaces/InjectorApiCallResponse.html","title":"interface - InjectorApiCallResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InjectorApiCallResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/injector.ts\n        \n\n            \n                Description\n            \n            \n                A response from the EditorJS api\n\n            \n\n            \n                Extends\n            \n            \n                        InjectorApiCallOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        result\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        result\n                                    \n                                \n                                \n                                    \n                                        result:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport EditorJS, { EditorConfig, OutputData } from '@editorjs/editorjs';\nimport { Block } from './blocks';\n\n/**\n * Configuration for creating an EditorJS instance\n */\nexport interface EditorJSInstanceConfig {\n  /**\n   * The editor configuration, this is required with at least the `holder` property\n   */\n  editorConfig: EditorConfig;\n  /**\n   * The method to call when the editor makes a change\n   */\n  onChange?: (holder?: string) => void;\n\n  /**\n   * The method to call with an editor is ready\n   */\n  onReady?: (holder?: string) => void;\n}\n\n/**\n * Default values for each internal map\n */\nexport const MAP_DEFAULTS = [\n  ['lastChangeMap', { time: 0, blocks: [], version: typeof EditorJS !== 'undefined' && EditorJS.version || ''}],\n  ['isReadyMap', false],\n  ['hasSavedMap', false]\n];\n\n/**\n * Injection token for the EditorJS class\n */\nexport const EDITORJS_MODULE_IMPORT = new InjectionToken('EDITORJS_MODULE_IMPORT');\n\n/**\n * The EditorJS class injector\n */\nexport const EditorJSInstance = new InjectionToken('EditorJSInstance');\n\n/**\n * Options for a Injector method\n */\nexport interface InjectorMethodOption {\n  /**\n   * The holder for the option\n   */\n  holder: string;\n  /**\n   * Optional blocks\n   */\n  data?: OutputData;\n  /**\n   * Optional editor\n   */\n  editor?: EditorJS;\n  /**\n   * Don't call save\n   */\n  skipSave?: boolean;\n}\n\n/**\n * Options to pass when calling the EditorJS instance API\n */\nexport interface InjectorApiCallOptions {\n  /**\n   * Holder for the EditorJS instance\n   */\n  holder: string;\n\n  /**\n   * The method to call\n   */\n  method: string;\n  /**\n   * The optional namespace for the API call\n   */\n  namespace?: string;\n}\n\n/**\n * A response from the EditorJS api\n */\nexport interface InjectorApiCallResponse extends InjectorApiCallOptions {\n  result: T;\n}\n\n/**\n * Interface for the injected EditorJS class, returns the static\n * class of EditorJS with the version and that creates the instance and provides\n * the Typescript parse with type information\n */\nexport interface EditorJSClass extends Function {\n  new (...args: any[]): T;\n  /**\n   * EditorJS version\n   */\n  version: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InjectorMethodOption.html":{"url":"interfaces/InjectorMethodOption.html","title":"interface - InjectorMethodOption","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  InjectorMethodOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/injector.ts\n        \n\n            \n                Description\n            \n            \n                Options for a Injector method\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                            Optional\n                                        editor\n                                \n                                \n                                        holder\n                                \n                                \n                                            Optional\n                                        skipSave\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     OutputData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     OutputData\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional blocks\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        editor\n                                    \n                                \n                                \n                                    \n                                        editor:     EditorJS\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EditorJS\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional editor\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        holder\n                                    \n                                \n                                \n                                    \n                                        holder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The holder for the option\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        skipSave\n                                    \n                                \n                                \n                                    \n                                        skipSave:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Don't call save\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport EditorJS, { EditorConfig, OutputData } from '@editorjs/editorjs';\nimport { Block } from './blocks';\n\n/**\n * Configuration for creating an EditorJS instance\n */\nexport interface EditorJSInstanceConfig {\n  /**\n   * The editor configuration, this is required with at least the `holder` property\n   */\n  editorConfig: EditorConfig;\n  /**\n   * The method to call when the editor makes a change\n   */\n  onChange?: (holder?: string) => void;\n\n  /**\n   * The method to call with an editor is ready\n   */\n  onReady?: (holder?: string) => void;\n}\n\n/**\n * Default values for each internal map\n */\nexport const MAP_DEFAULTS = [\n  ['lastChangeMap', { time: 0, blocks: [], version: typeof EditorJS !== 'undefined' && EditorJS.version || ''}],\n  ['isReadyMap', false],\n  ['hasSavedMap', false]\n];\n\n/**\n * Injection token for the EditorJS class\n */\nexport const EDITORJS_MODULE_IMPORT = new InjectionToken('EDITORJS_MODULE_IMPORT');\n\n/**\n * The EditorJS class injector\n */\nexport const EditorJSInstance = new InjectionToken('EditorJSInstance');\n\n/**\n * Options for a Injector method\n */\nexport interface InjectorMethodOption {\n  /**\n   * The holder for the option\n   */\n  holder: string;\n  /**\n   * Optional blocks\n   */\n  data?: OutputData;\n  /**\n   * Optional editor\n   */\n  editor?: EditorJS;\n  /**\n   * Don't call save\n   */\n  skipSave?: boolean;\n}\n\n/**\n * Options to pass when calling the EditorJS instance API\n */\nexport interface InjectorApiCallOptions {\n  /**\n   * Holder for the EditorJS instance\n   */\n  holder: string;\n\n  /**\n   * The method to call\n   */\n  method: string;\n  /**\n   * The optional namespace for the API call\n   */\n  namespace?: string;\n}\n\n/**\n * A response from the EditorJS api\n */\nexport interface InjectorApiCallResponse extends InjectorApiCallOptions {\n  result: T;\n}\n\n/**\n * Interface for the injected EditorJS class, returns the static\n * class of EditorJS with the version and that creates the instance and provides\n * the Typescript parse with type information\n */\nexport interface EditorJSClass extends Function {\n  new (...args: any[]): T;\n  /**\n   * EditorJS version\n   */\n  version: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/List.html":{"url":"interfaces/List.html","title":"interface - List","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  List\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                Default data type for a list block\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        items\n                                \n                                \n                                        style\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                    \n                                \n                                \n                                    \n                                        items:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    List items of type T\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        style\n                                    \n                                \n                                \n                                    \n                                        style:         ListStyle\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ListStyle\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The list style\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ListBlock.html":{"url":"interfaces/ListBlock.html","title":"interface - ListBlock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ListBlock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                The default list block is provided by the EditorJS list plugin\n\n            \n\n            \n                Extends\n            \n            \n                        Block\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The EditorJS block type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxEditorJSComponentModule.html":{"url":"modules/NgxEditorJSComponentModule.html","title":"module - NgxEditorJSComponentModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxEditorJSComponentModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxEditorJSComponentModule\n\n\n\ncluster_NgxEditorJSComponentModule_declarations\n\n\n\ncluster_NgxEditorJSComponentModule_NgxEditorJSComponent_providers\n\n\n\ncluster_NgxEditorJSComponentModule_exports\n\n\n\ncluster_NgxEditorJSComponentModule_providers\n\n\n\n\nNgxEditorJSComponent\n\nNgxEditorJSComponent\n\n\n\nNgxEditorJSComponentModule\n\nNgxEditorJSComponentModule\n\nNgxEditorJSComponentModule -->\n\nNgxEditorJSComponent->NgxEditorJSComponentModule\n\n\n\n\n\nNgxEditorJSDirective\n\nNgxEditorJSDirective\n\nNgxEditorJSComponentModule -->\n\nNgxEditorJSDirective->NgxEditorJSComponentModule\n\n\n\n\n\nNgxEditorJSComponent \n\nNgxEditorJSComponent \n\nNgxEditorJSComponent  -->\n\nNgxEditorJSComponentModule->NgxEditorJSComponent \n\n\n\n\n\nNgxEditorJSDirective \n\nNgxEditorJSDirective \n\nNgxEditorJSDirective  -->\n\nNgxEditorJSComponentModule->NgxEditorJSDirective \n\n\n\n\n\nEDITORJS_FORM_VALUE_ACCESSOR\n\nEDITORJS_FORM_VALUE_ACCESSOR\n\nNgxEditorJSComponent -->\n\nEDITORJS_FORM_VALUE_ACCESSOR->NgxEditorJSComponent\n\n\n\n\n\nNgxEditorJSService\n\nNgxEditorJSService\n\nNgxEditorJSComponentModule -->\n\nNgxEditorJSService->NgxEditorJSComponentModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/containers/editorjs/editorjs.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Base module for the NgxEditorJSComponent, NgxEditorJSDirective and NgxEditorJSService.\nAll providers for the app are set here, however FOR_ROOT_OPTIONS_TOKEN can be set in any\n.forRoot\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NgxEditorJSComponent\n                        \n                        \n                            NgxEditorJSDirective\n                        \n                    \n                \n                \n                    Providers\n                    \n                        \n                            NgxEditorJSService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxEditorJSComponent\n                        \n                        \n                            NgxEditorJSDirective\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: NgxEditorJSModuleConfig)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/containers/editorjs/editorjs.module.ts:63\n                \n            \n\n\n            \n                \n                    Use this method in the root of the application.  You can pass an optional configuration\nwhich sets some defaults, or use the provided defaults.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                NgxEditorJSModuleConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The optional configuration to pass\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { NgxEditorJSComponent } from './editorjs.component';\nimport { NgxEditorJSDirective } from '../../directives/ngx-editorjs.directive';\nimport { NGX_EDITORJS_CONFIG, NgxEditorJSModuleConfig } from '../../types/config';\nimport { FOR_ROOT_OPTIONS_TOKEN } from '../../types/config';\nimport { EDITORJS_MODULE_IMPORT, EditorJSInstance } from '../../types/injector';\nimport EditorJS from '@editorjs/editorjs';\nimport { NgxEditorJSService } from '../../services/editorjs.service';\nimport { createModuleConfig } from '../../config/module-config';\n\n/**\n * Factory function to return the EditorJS base class\n */\nexport function createEditorJSInstance(editorjs: any) {\n  return editorjs;\n}\n\n/**\n * Base module for the `NgxEditorJSComponent`, `NgxEditorJSDirective` and `NgxEditorJSService`.\n * All providers for the app are set here, however `FOR_ROOT_OPTIONS_TOKEN` can be set in any\n * `.forRoot`\n */\n@NgModule({\n  imports: [CommonModule, FormsModule],\n  declarations: [NgxEditorJSComponent, NgxEditorJSDirective],\n  exports: [NgxEditorJSComponent, NgxEditorJSDirective],\n  providers: [\n    NgxEditorJSService,\n    {\n      provide: FOR_ROOT_OPTIONS_TOKEN,\n      useValue: {}\n    },\n    {\n      provide: NGX_EDITORJS_CONFIG,\n      useFactory: createModuleConfig,\n      deps: [FOR_ROOT_OPTIONS_TOKEN]\n    },\n    {\n      provide: EDITORJS_MODULE_IMPORT,\n      useValue: EditorJS\n    },\n    {\n      provide: EditorJSInstance,\n      useFactory: createEditorJSInstance,\n      deps: [EDITORJS_MODULE_IMPORT]\n    }\n  ]\n})\nexport class NgxEditorJSComponentModule {\n  constructor(\n    @Optional()\n    @SkipSelf()\n    parentModule: NgxEditorJSComponentModule\n  ) {}\n\n  /**\n   * Use this method in the root of the application.  You can pass an optional configuration\n   * which sets some defaults, or use the provided defaults.\n   * @param config The optional configuration to pass\n   */\n  static forRoot(@Optional() config?: NgxEditorJSModuleConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxEditorJSComponentModule,\n      providers: [\n        {\n          provide: FOR_ROOT_OPTIONS_TOKEN,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxEditorJSConfig.html":{"url":"interfaces/NgxEditorJSConfig.html","title":"interface - NgxEditorJSConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgxEditorJSConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/config.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for the EditorJS instance\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        autofocus\n                                \n                                \n                                            Optional\n                                        blockPlaceholder\n                                \n                                \n                                            Optional\n                                        data\n                                \n                                \n                                            Optional\n                                        hideToolbar\n                                \n                                \n                                            Optional\n                                        holder\n                                \n                                \n                                            Optional\n                                        initialBlock\n                                \n                                \n                                            Optional\n                                        minHeight\n                                \n                                \n                                            Optional\n                                        sanitizer\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        autofocus\n                                    \n                                \n                                \n                                    \n                                        autofocus:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If the EditorJS is autofocused on creation (default: false)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        blockPlaceholder\n                                    \n                                \n                                \n                                    \n                                        blockPlaceholder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    First Block placeholder\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                    \n                                \n                                \n                                    \n                                        data:     OutputData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     OutputData\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Any initial output data to render\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hideToolbar\n                                    \n                                \n                                \n                                    \n                                        hideToolbar:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If true, toolbar won't be shown\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        holder\n                                    \n                                \n                                \n                                    \n                                        holder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    ID of the element to hold the config\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        initialBlock\n                                    \n                                \n                                \n                                    \n                                        initialBlock:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The name of the initial block (default \"paragraph\")\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minHeight\n                                    \n                                \n                                \n                                    \n                                        minHeight:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Height of Editor's bottom area that allows to set focus on the last Block\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sanitizer\n                                    \n                                \n                                \n                                    \n                                        sanitizer:     SanitizerConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     SanitizerConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Define default sanitizer configuration\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport EditorJS, { OutputData, SanitizerConfig, EditorConfig } from '@editorjs/editorjs';\n\n/**\n * Configuration for the EditorJS instance\n */\nexport interface NgxEditorJSConfig {\n  /**\n   * If the EditorJS is autofocused on creation (default: false)\n   */\n  autofocus?: boolean;\n\n  /**\n   * Any initial output data to render\n   */\n  data?: OutputData;\n\n  /**\n   * If true, toolbar won't be shown\n   */\n  hideToolbar?: boolean;\n\n  /**\n   * ID of the element to hold the config\n   */\n  holder?: string;\n\n  /**\n   * The name of the initial block (default \"paragraph\")\n   */\n  initialBlock?: string;\n\n  /**\n   * Height of Editor's bottom area that allows to set focus on the last Block\n   */\n  minHeight?: number;\n\n  /**\n   * First Block placeholder\n   */\n  blockPlaceholder?: string;\n\n  /**\n   * Define default sanitizer configuration\n   */\n  sanitizer?: SanitizerConfig;\n}\n\n/**\n * The configuration option that can be passed to the `NgxEditorJSModule.forRoot` method\n */\nexport interface NgxEditorJSModuleConfig {\n  /**\n   * Configuration options for EditorJS\n   */\n  editorjs?: EditorConfig;\n}\n\n/**\n * Injection token provied for `NgxEditorJSConfig`\n */\nexport const NGX_EDITORJS_CONFIG = new InjectionToken('NGX_EDITORJS_CONFIG');\n\n/**\n * Internal token for injecting the `NgxEditorJSConfig` into the config factory\n */\nexport const FOR_ROOT_OPTIONS_TOKEN = new InjectionToken('FOR_ROOT_OPTIONS_TOKEN');\n\n/**\n * Get the EditorJS instance injected into the app\n */\nexport const EDITIOR_JS_INSTANCE = new InjectionToken('EDITIOR_JS_INSTANCE');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/NgxEditorJSDirective.html":{"url":"directives/NgxEditorJSDirective.html","title":"directive - NgxEditorJSDirective","body":"\n                   \n\n\n\n\n\n\n\n  Directives\n  NgxEditorJSDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts\n        \n\n            \n                Description\n            \n            \n                The main directive of ngx-editorjs provides a way to attach\nan EditorJS instance to any element and control it via\nAngular services and components\nTo use attach to any element with an id property\n\n            \n\n            \n                Implements\n            \n            \n                            OnDestroy\n                            OnChanges\n                            AfterContentInit\n            \n\n            \n                Example\n            \n            \n                        \n                            \n                        \n            \n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [ngxEditorJS]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createEditor\n                            \n                            \n                                    Async\n                                ngAfterContentInit\n                            \n                            \n                                    Async\n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                autofocus\n                            \n                            \n                                autosave\n                            \n                            \n                                blockPlaceholder\n                            \n                            \n                                blocks\n                            \n                            \n                                excludeTools\n                            \n                            \n                                hideToolbar\n                            \n                            \n                                holder\n                            \n                            \n                                initialBlock\n                            \n                            \n                                minHeight\n                            \n                            \n                                sanitizer\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                hasChanged\n                            \n                            \n                                hasSaved\n                            \n                            \n                                isFocused\n                            \n                            \n                                isReady\n                            \n                            \n                                isTouched\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    editor\n                                \n                                \n                                    element\n                                \n                                \n                                    service\n                                \n                                \n                                    touched\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(el: ElementRef, editorService: NgxEditorJSService, cd: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:152\n                            \n                        \n\n                \n                    \n                            Creates the directive instance\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        el\n                                                  \n                                                        \n                                                                        ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The element the directive is attached to\n\n                                                        \n                                                \n                                                \n                                                        editorService\n                                                  \n                                                        \n                                                                        NgxEditorJSService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The editor service\n\n                                                        \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        autofocus\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:53\n                            \n                        \n                \n                    \n                        Boolean, If set to true the EditorJS instance gets autofocus when initialized\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        autosave\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:106\n                            \n                        \n                \n                    \n                        Number, Used with Angular Forms this sets an autosave timer active that calls the EditorJS save\nmethod. This patches the FormControl value with every block change and focus and blur, it also autosaves after\na set time\nSet to 0 to disable or pass a value in ms of the autosave time\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        blockPlaceholder\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:84\n                            \n                        \n                \n                    \n                        String, The text to display as the placeholder text in the first block before content is added\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        blocks\n                    \n                \n                \n                    \n                        Type :         Block[]\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:112\n                            \n                        \n                \n                    \n                        Blocks, An initial set of block data to render inside the component\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        excludeTools\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:97\n                            \n                        \n                \n                    \n                        String Array, If empty all tools available via the plugin service will be added.  If a string\narray is set only the tools with the provided keys will be added\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hideToolbar\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:59\n                            \n                        \n                \n                    \n                        Boolean, If set to true the toolbar will not show in the EditorJS instance\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        holder\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:65\n                            \n                        \n                \n                    \n                        String, the ID property of the element that the EditorJS instance will be attached to\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        initialBlock\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:72\n                            \n                        \n                \n                    \n                        String, The type of block to set as the initial block type. This needs to match a name in the UserPlugins object.\nThe default value is \"paragraph\"\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        minHeight\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:78\n                            \n                        \n                \n                    \n                        Number, The minimum height of the EditorJS instance bottom after the last block\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        sanitizer\n                    \n                \n                \n                    \n                        Type :     SanitizerConfig\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:90\n                            \n                        \n                \n                    \n                        SanitizerConfig, The configuration for the HTML sanitizer\n\n                    \n                \n            \n        \n\n            \n    Outputs\n        \n            \n                \n                    \n                        \n                        hasChanged\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:136\n                            \n                        \n                \n                    \n                        Emits if the EditorJS content has changed when save is called\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hasSaved\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:118\n                            \n                        \n                \n                    \n                        Emits if the content from the EditorJS instance has been saved to the component value\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isFocused\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:130\n                            \n                        \n                \n                    \n                        Emits if the component is focused\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isReady\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:142\n                            \n                        \n                \n                    \n                        Emits if the EditorJS component is ready\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        isTouched\n                    \n                \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:124\n                            \n                        \n                \n                    \n                        Emits if the component has been touched\n\n                    \n                \n            \n        \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \nclick()\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:148\n                \n            \n\n\n            \n                \n                    Host click listener\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createEditor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createEditor(config?: EditorConfig, excludeTools: [])\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:198\n                \n            \n\n\n            \n                \n                    Creates an EditorJS instance for this directive\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                            EditorConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Configuration for this instance\n\n                                    \n                                \n                                \n                                    excludeTools\n                                    \n                                            []\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ngAfterContentInit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngAfterContentInit()\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:251\n                \n            \n\n\n            \n                \n                    After content is created, we create the editor instance and set up listners\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:215\n                \n            \n\n\n            \n                \n                    When ngOnChanges are called, there are two paths\nIf it's just blocks, then the service is updated with the blocks\nIf it's any other property it means we create a new editor, as this\nis a destructive process we also need to wait for an existing editor\nto be ready\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    changes\n                                    \n                                                SimpleChanges\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Changes on the component\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnDestroy\n                        \n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:284\n                \n            \n\n\n            \n                \n                    Destroy the editor and subjects for this service\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        editor\n                    \n                \n\n                \n                    \n                        geteditor()\n                    \n                \n                            \n                                \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:168\n                                \n                            \n                    \n                        \n                                Get the EditorJS instance for this directive\n\n\n                                \n                                    Returns :     Observable\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        element\n                    \n                \n\n                \n                    \n                        getelement()\n                    \n                \n                            \n                                \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:175\n                                \n                            \n                    \n                        \n                                Get the element for the directive\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        service\n                    \n                \n\n                \n                    \n                        getservice()\n                    \n                \n                            \n                                \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:182\n                                \n                            \n                    \n                        \n                                Get the NgxEditorJSService for this directive\n\n\n                                \n                                    Returns :         NgxEditorJSService\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        touched\n                    \n                \n\n                \n                    \n                        gettouched()\n                    \n                \n                            \n                                \n                                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/directives/ngx-editorjs.directive.ts:189\n                                \n                            \n                    \n                        \n                                Get the touched state\n\n\n                        \n                    \n\n            \n        \n\n\n    \n\n\n    \n        import {\n  AfterContentInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport EditorJS, { EditorConfig, OutputData, SanitizerConfig } from '@editorjs/editorjs';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { createEditorJSConfig } from '../config/editor-config';\nimport { NgxEditorJSService } from '../services/editorjs.service';\nimport { Block } from '../types/blocks';\n\n/**\n * The main directive of `ngx-editorjs` provides a way to attach\n * an EditorJS instance to any element and control it via\n * Angular services and components\n *\n * To use attach to any element with an `id` property\n *\n * @example\n * \n */\n@Directive({\n  selector: '[ngxEditorJS]',\n})\nexport class NgxEditorJSDirective implements OnDestroy, OnChanges, AfterContentInit {\n  /**\n   * On Destroyed subject\n   */\n  private readonly onDestroy$ = new Subject();\n  /**\n   * Form touched state\n   */\n  private touched$ = new BehaviorSubject(false);\n\n  /**\n   * The DOM element ID, it will use the Directive DOM element ID or falls back to the provided `holder` property\n   */\n  private id: string;\n\n  /**\n   * Boolean, If set to true the EditorJS instance gets autofocus when initialized\n   */\n  @Input()\n  public autofocus: boolean;\n\n  /**\n   * Boolean, If set to true the toolbar will not show in the EditorJS instance\n   */\n  @Input()\n  public hideToolbar: boolean;\n\n  /**\n   * String, the ID property of the element that the EditorJS instance will be attached to\n   */\n  @Input()\n  public holder: string;\n\n  /**\n   * String, The type of block to set as the initial block type. This needs to match a name in the `UserPlugins` object.\n   * The default value is \"paragraph\"\n   */\n  @Input()\n  public initialBlock?: string;\n\n  /**\n   * Number, The minimum height of the EditorJS instance bottom after the last block\n   */\n  @Input()\n  public minHeight: number;\n\n  /**\n   * String, The text to display as the placeholder text in the first block before content is added\n   */\n  @Input()\n  public blockPlaceholder: string;\n\n  /**\n   * SanitizerConfig, The configuration for the HTML sanitizer\n   */\n  @Input()\n  public sanitizer: SanitizerConfig;\n\n  /**\n   * String Array, If empty all tools available via the plugin service will be added.  If a string\n   * array is set only the tools with the provided keys will be added\n   */\n  @Input()\n  public excludeTools: string[] = [];\n\n  /**\n   * Number, Used with Angular Forms this sets an autosave timer active that calls the EditorJS save\n   * method. This patches the `FormControl` value with every block change and focus and blur, it also autosaves after\n   * a set time\n   * Set to 0 to disable or pass a value in `ms` of the autosave time\n   */\n  @Input()\n  public autosave: number;\n\n  /**\n   * Blocks, An initial set of block data to render inside the component\n   */\n  @Input()\n  public blocks: Block[];\n\n  /**\n   * Emits if the content from the EditorJS instance has been saved to the component value\n   */\n  @Output()\n  public hasSaved = new EventEmitter();\n\n  /**\n   * Emits if the component has been touched\n   */\n  @Output()\n  public isTouched = new EventEmitter();\n\n  /**\n   * Emits if the component is focused\n   */\n  @Output()\n  public isFocused = new EventEmitter();\n\n  /**\n   * Emits if the EditorJS content has changed when `save` is called\n   */\n  @Output()\n  public hasChanged = new EventEmitter();\n\n  /**\n   * Emits if the EditorJS component is ready\n   */\n  @Output()\n  public isReady = new EventEmitter();\n\n  /**\n   * Host click listener\n   */\n  @HostListener('click')\n  onclick() {\n    this.touched$.next(true);\n    this.isTouched.emit(true);\n    this.cd.markForCheck();\n  }\n\n  /**\n   * Creates the directive instance\n   * @param el The element the directive is attached to\n   * @param editorService The editor service\n   */\n  constructor(\n    protected readonly el: ElementRef,\n    protected readonly editorService: NgxEditorJSService,\n    protected readonly cd: ChangeDetectorRef\n  ) {}\n\n  /**\n   * Get the EditorJS instance for this directive\n   */\n  public get editor(): Observable {\n    return this.service.getEditor({ holder: this.id });\n  }\n\n  /**\n   * Get the element for the directive\n   */\n  public get element() {\n    return this.el.nativeElement;\n  }\n\n  /**\n   * Get the `NgxEditorJSService` for this directive\n   */\n  public get service(): NgxEditorJSService {\n    return this.editorService;\n  }\n\n  /**\n   * Get the touched state\n   */\n  public get touched() {\n    return this.touched$.asObservable();\n  }\n\n  /**\n   * Creates an EditorJS instance for this directive\n   * @param config Configuration for this instance\n   * @param excludeTools\n   */\n  public async createEditor(config?: EditorConfig, excludeTools = []): Promise {\n    await this.service.createInstance({\n      config,\n      excludeTools: this.excludeTools || excludeTools,\n      autoSave: this.autosave || 0\n    });\n    this.cd.markForCheck();\n  }\n\n  /**\n   * When ngOnChanges are called, there are two paths\n   * If it's just blocks, then the service is updated with the blocks\n   * If it's any other property it means we create a new editor, as this\n   * is a destructive process we also need to wait for an existing editor\n   * to be ready\n   * @param changes Changes on the component\n   */\n  async ngOnChanges(changes: SimpleChanges): Promise {\n    if (\n      changes.blocks &&\n      changes.blocks.previousValue !== null &&\n      !changes.blocks.firstChange &&\n      JSON.stringify(changes.blocks.previousValue) !== JSON.stringify(changes.blocks.currentValue)\n    ) {\n      this.service.update({ holder: this.holder }).subscribe();\n      this.cd.markForCheck();\n    } else {\n      const changesKeys = Object.keys(changes);\n      if (\n        this.id &&\n        // Ignore changes for values not related to EditorJS\n        [\n          'autofocus',\n          'holder',\n          'hideToolbar',\n          'initialBlock',\n          'minHeight',\n          'blockPlaceholder',\n          'sanitizer',\n          'includeTools'\n        ].find(key => {\n          return changesKeys.includes(key);\n        })\n      ) {\n        await this.createEditor(this.createConfig());\n        this.cd.markForCheck();\n      }\n    }\n  }\n\n  /**\n   * After content is created, we create the editor instance and set up listners\n   */\n  async ngAfterContentInit() {\n    this.id = this.el.nativeElement.id || this.holder;\n\n    if (!this.id) {\n      throw new Error('Error in NgxEditorJSDirective::ngAfterContentInit - Directive element has no ID');\n    }\n    await this.createEditor(this.createConfig());\n\n    this.service\n      .isReady({ holder: this.holder })\n      .pipe(takeUntil(this.onDestroy$))\n      .subscribe(isReady => {\n        this.isReady.emit(isReady);\n      });\n\n    this.service\n      .lastChange({ holder: this.holder })\n      .pipe(takeUntil(this.onDestroy$))\n      .subscribe(change => {\n        this.hasChanged.emit(change);\n      });\n\n    this.service\n      .hasSaved({ holder: this.holder })\n      .pipe(takeUntil(this.onDestroy$))\n      .subscribe(saved => {\n        this.hasSaved.next(saved);\n      });\n  }\n\n  /**\n   * Destroy the editor and subjects for this service\n   */\n  ngOnDestroy() {\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n    this.service.destroyInstance({ holder: this.id });\n  }\n\n  /**\n   * Create a configuration for EditorJS\n   */\n  private createConfig(): EditorConfig {\n    const config: EditorConfig = createEditorJSConfig({\n      holder: this.id,\n      autofocus: this.autofocus,\n      hideToolbar: this.hideToolbar,\n      initialBlock: this.initialBlock,\n      placeholder: this.blockPlaceholder,\n      minHeight: this.minHeight,\n      sanitizer: this.sanitizer\n    });\n    if (this.blocks && this.blocks.length > 0) {\n      config.data = {\n        time: Date.now(),\n        version: typeof EditorJS !== 'undefined' && EditorJS.version || '',\n        blocks: this.blocks\n      };\n    }\n    return config;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxEditorJSMatFieldModule.html":{"url":"modules/NgxEditorJSMatFieldModule.html","title":"module - NgxEditorJSMatFieldModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxEditorJSMatFieldModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxEditorJSMatFieldModule\n\n\n\ncluster_NgxEditorJSMatFieldModule_declarations\n\n\n\ncluster_NgxEditorJSMatFieldModule_NgxEditorJSMatFieldComponent_providers\n\n\n\ncluster_NgxEditorJSMatFieldModule_exports\n\n\n\n\nNgxEditorJSMatFieldComponent\n\nNgxEditorJSMatFieldComponent\n\n\n\nNgxEditorJSMatFieldModule\n\nNgxEditorJSMatFieldModule\n\nNgxEditorJSMatFieldModule -->\n\nNgxEditorJSMatFieldComponent->NgxEditorJSMatFieldModule\n\n\n\n\n\nNgxEditorJSMatFieldComponent \n\nNgxEditorJSMatFieldComponent \n\nNgxEditorJSMatFieldComponent  -->\n\nNgxEditorJSMatFieldModule->NgxEditorJSMatFieldComponent \n\n\n\n\n\nEDITORJS_MATERIAL_FIELD_CONTROL\n\nEDITORJS_MATERIAL_FIELD_CONTROL\n\nNgxEditorJSMatFieldComponent -->\n\nEDITORJS_MATERIAL_FIELD_CONTROL->NgxEditorJSMatFieldComponent\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/containers/editorjs-mat-field/editorjs-mat-field.module.ts\n        \n\n\n        \n            Description\n        \n        \n            This module provides the NgxEditorJSMatFieldComponent along with exporting the\nNgxEditorJSComponentModule. If using this module, Angular Material is required\n\n        \n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NgxEditorJSMatFieldComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxEditorJSMatFieldComponent\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: NgxEditorJSModuleConfig)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/containers/editorjs-mat-field/editorjs-mat-field.module.ts:30\n                \n            \n\n\n            \n                \n                    Use this method in the root of the application.  You can pass an optional configuration\nwhich sets some defaults, or use the provided defaults.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                NgxEditorJSModuleConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The optional configuration to pass\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { NgxEditorJSComponentModule } from '../editorjs/editorjs.module';\nimport { NgxEditorJSMatFieldComponent } from './editorjs-mat-field.component';\nimport { FOR_ROOT_OPTIONS_TOKEN, NgxEditorJSModuleConfig } from '../../types/config';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { CommonModule } from '@angular/common';\n\n/**\n * This module provides the `NgxEditorJSMatFieldComponent` along with exporting the\n * `NgxEditorJSComponentModule`. If using this module, Angular Material is required\n */\n@NgModule({\n  imports: [CommonModule, NgxEditorJSComponentModule, MatInputModule, MatFormFieldModule],\n  declarations: [NgxEditorJSMatFieldComponent],\n  exports: [NgxEditorJSComponentModule, NgxEditorJSMatFieldComponent]\n})\nexport class NgxEditorJSMatFieldModule {\n  constructor(\n    @Optional()\n    @SkipSelf()\n    parentModule: NgxEditorJSMatFieldModule\n  ) {}\n\n  /**\n   * Use this method in the root of the application.  You can pass an optional configuration\n   * which sets some defaults, or use the provided defaults.\n   * @param config The optional configuration to pass\n   */\n  static forRoot(@Optional() config?: NgxEditorJSModuleConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxEditorJSMatFieldModule,\n      providers: [\n        {\n          provide: FOR_ROOT_OPTIONS_TOKEN,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxEditorJSModule.html":{"url":"modules/NgxEditorJSModule.html","title":"module - NgxEditorJSModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxEditorJSModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxEditorJSModule\n\n\n\ncluster_NgxEditorJSModule_imports\n\n\n\ncluster_NgxEditorJSModule_exports\n\n\n\n\nNgxEditorJSMatFieldModule\n\nNgxEditorJSMatFieldModule\n\n\n\nNgxEditorJSModule\n\nNgxEditorJSModule\n\nNgxEditorJSModule -->\n\nNgxEditorJSMatFieldModule->NgxEditorJSModule\n\n\n\n\n\nNgxEditorJSMatFieldModule \n\nNgxEditorJSMatFieldModule \n\nNgxEditorJSMatFieldModule  -->\n\nNgxEditorJSModule->NgxEditorJSMatFieldModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/ngx-editorjs.module.ts\n        \n\n\n        \n            Description\n        \n        \n            The @tinynodes/ngx-editorjs module provides the directive, service and components to use EditorJS\nwithin Angular and Material.\nTo use import the module NgxEditorJSModule.forRoot() into the root of your application.\nThe forRoot method takes an optional NgxEditorJSModuleConfig config, this will provide a\ndefault instance.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            NgxEditorJSMatFieldModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxEditorJSMatFieldModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            forRoot\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    forRoot(config?: NgxEditorJSModuleConfig)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/ngx-editorjs.module.ts:30\n                \n            \n\n\n            \n                \n                    Use this method in the root of the application.  You can pass an optional configuration\nwhich sets some defaults, or use the provided defaults.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n                                    \n                                                NgxEditorJSModuleConfig\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        The optional configuration to pass\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ModuleWithProviders\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import { ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { FOR_ROOT_OPTIONS_TOKEN, NgxEditorJSModuleConfig } from './types/config';\nimport { NgxEditorJSComponentModule } from './containers/editorjs/editorjs.module';\nimport { NgxEditorJSMatFieldModule } from './containers/editorjs-mat-field/editorjs-mat-field.module';\n\n/**\n * The `@tinynodes/ngx-editorjs` module provides the directive, service and components to use [EditorJS](http://editorjs.io)\n * within Angular and Material.\n *\n * To use import the module `NgxEditorJSModule.forRoot()` into the root of your application.\n * The `forRoot` method takes an optional `NgxEditorJSModuleConfig` config, this will provide a\n * default instance.\n */\n@NgModule({\n  imports: [NgxEditorJSComponentModule, NgxEditorJSMatFieldModule],\n  exports: [NgxEditorJSComponentModule, NgxEditorJSMatFieldModule]\n})\nexport class NgxEditorJSModule {\n  constructor(\n    @Optional()\n    @SkipSelf()\n    parentModule: NgxEditorJSModule\n  ) {}\n\n  /**\n   * Use this method in the root of the application.  You can pass an optional configuration\n   * which sets some defaults, or use the provided defaults.\n   * @param config The optional configuration to pass\n   */\n  static forRoot(@Optional() config?: NgxEditorJSModuleConfig): ModuleWithProviders {\n    return {\n      ngModule: NgxEditorJSModule,\n      providers: [\n        {\n          provide: FOR_ROOT_OPTIONS_TOKEN,\n          useValue: config\n        }\n      ]\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxEditorJSModuleConfig.html":{"url":"interfaces/NgxEditorJSModuleConfig.html","title":"interface - NgxEditorJSModuleConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgxEditorJSModuleConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/config.ts\n        \n\n            \n                Description\n            \n            \n                The configuration option that can be passed to the NgxEditorJSModule.forRoot method\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        editorjs\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        editorjs\n                                    \n                                \n                                \n                                    \n                                        editorjs:     EditorConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     EditorConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Configuration options for EditorJS\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport EditorJS, { OutputData, SanitizerConfig, EditorConfig } from '@editorjs/editorjs';\n\n/**\n * Configuration for the EditorJS instance\n */\nexport interface NgxEditorJSConfig {\n  /**\n   * If the EditorJS is autofocused on creation (default: false)\n   */\n  autofocus?: boolean;\n\n  /**\n   * Any initial output data to render\n   */\n  data?: OutputData;\n\n  /**\n   * If true, toolbar won't be shown\n   */\n  hideToolbar?: boolean;\n\n  /**\n   * ID of the element to hold the config\n   */\n  holder?: string;\n\n  /**\n   * The name of the initial block (default \"paragraph\")\n   */\n  initialBlock?: string;\n\n  /**\n   * Height of Editor's bottom area that allows to set focus on the last Block\n   */\n  minHeight?: number;\n\n  /**\n   * First Block placeholder\n   */\n  blockPlaceholder?: string;\n\n  /**\n   * Define default sanitizer configuration\n   */\n  sanitizer?: SanitizerConfig;\n}\n\n/**\n * The configuration option that can be passed to the `NgxEditorJSModule.forRoot` method\n */\nexport interface NgxEditorJSModuleConfig {\n  /**\n   * Configuration options for EditorJS\n   */\n  editorjs?: EditorConfig;\n}\n\n/**\n * Injection token provied for `NgxEditorJSConfig`\n */\nexport const NGX_EDITORJS_CONFIG = new InjectionToken('NGX_EDITORJS_CONFIG');\n\n/**\n * Internal token for injecting the `NgxEditorJSConfig` into the config factory\n */\nexport const FOR_ROOT_OPTIONS_TOKEN = new InjectionToken('FOR_ROOT_OPTIONS_TOKEN');\n\n/**\n * Get the EditorJS instance injected into the app\n */\nexport const EDITIOR_JS_INSTANCE = new InjectionToken('EDITIOR_JS_INSTANCE');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxEditorJSPluginService.html":{"url":"injectables/NgxEditorJSPluginService.html","title":"injectable - NgxEditorJSPluginService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NgxEditorJSPluginService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/services/plugin-service.service.ts\n        \n\n            \n                Description\n            \n            \n                The NgxEditorJSPluginService is provided as a root service for handling  EditorJS plugins.\nPlugins are provided by using  NgModule to inject the plugin with a\n PluginConfig using providers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getPlugin\n                            \n                            \n                                    Public\n                                getPlugins\n                            \n                            \n                                    Public\n                                getPluginsWithExclude\n                            \n                            \n                                    Public\n                                getPluginsWithInclude\n                            \n                            \n                                    Public\n                                getTools\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pluginConfigMap: PluginConfigMap)\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/services/plugin-service.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        pluginConfigMap\n                                                  \n                                                        \n                                                                        PluginConfigMap\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The plugin configuration map injected into the application\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPlugin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlugin(key: string)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/services/plugin-service.service.ts:32\n                \n            \n\n\n            \n                \n                    Get a plugin configuration via it's key\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The key of the plugin to get\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PluginConfig\n\n                    \n                    \n                        The plugin configuration for the passed key\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPlugins\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPlugins()\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/services/plugin-service.service.ts:23\n                \n            \n\n\n            \n                \n                    Get a map of all plugin configurations\n\n\n                    \n                    \n                    \n                        Returns :         PluginConfigMap\n\n                    \n                    \n                        The map of plugins injected into this plugin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPluginsWithExclude\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPluginsWithExclude(excludeList: string[])\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/services/plugin-service.service.ts:40\n                \n            \n\n\n            \n                \n                    Get a list of plugins, filtering with an exclude list of plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    excludeList\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PluginConfigMap\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPluginsWithInclude\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPluginsWithInclude(includeList: string[])\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/services/plugin-service.service.ts:54\n                \n            \n\n\n            \n                \n                    Get a list of plugins, filtering with an include list of plugins\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    includeList\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         PluginConfigMap\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTools\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTools(excludeTools: string[])\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/services/plugin-service.service.ts:68\n                \n            \n\n\n            \n                \n                    Returns a map of  EditorJS tools to be initialized by the editor\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    excludeTools\n                                    \n                                            string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        []\n                                    \n\n                                    \n                                        Optional array of tools to exclude, if not passed all tools\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ToolSettingsMap\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport { PluginClasses, PluginConfig, PluginConfigMap, ToolSettingsMap } from '../types/plugins';\n\n/**\n * The `NgxEditorJSPluginService` is provided as a root service for handling {@link https://github.com/editor-js | EditorJS plugins}.\n *\n * Plugins are provided by using {@link https://angular.io/api/core/NgModule | NgModule} to inject the plugin with a\n * {@link ../interfaces/PluginConfig.html | PluginConfig} using providers.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxEditorJSPluginService {\n  /**\n   * @param pluginConfigMap The plugin configuration map injected into the application\n   */\n  constructor(@Inject(PluginClasses) private readonly pluginConfigMap: PluginConfigMap) {}\n\n  /**\n   * Get a map of all plugin configurations\n   * @returns The map of plugins injected into this plugin\n   */\n  public getPlugins(): PluginConfigMap {\n    return this.pluginConfigMap;\n  }\n\n  /**\n   * Get a plugin configuration via it's key\n   * @param key The key of the plugin to get\n   * @returns The plugin configuration for the passed key\n   */\n  public getPlugin(key: string): PluginConfig {\n    return this.pluginConfigMap[key];\n  }\n\n  /**\n   * Get a list of plugins, filtering with an exclude list of plugins\n   * @param excludeList\n   */\n  public getPluginsWithExclude(excludeList: string[] = []): PluginConfigMap {\n    return Object.entries(this.pluginConfigMap)\n      .filter(([key]) => {\n        return !excludeList.includes(key);\n      })\n      .reduce((pluginMap, [key, plugin]) => {\n        return { ...pluginMap, [key]: plugin };\n      }, {});\n  }\n\n  /**\n   * Get a list of plugins, filtering with an include list of plugins\n   * @param includeList\n   */\n  public getPluginsWithInclude(includeList: string[] = []): PluginConfigMap {\n    return Object.entries(this.pluginConfigMap)\n      .filter(([key]) => {\n        return includeList.includes(key);\n      })\n      .reduce((pluginMap, [key, plugin]) => {\n        return { ...pluginMap, [key]: plugin };\n      }, {});\n  }\n\n  /**\n   * Returns a map of {@link https://editorjs.io/api | EditorJS} tools to be initialized by the editor\n   * @param excludeTools Optional array of tools to exclude, if not passed all tools\n   */\n  public getTools(excludeTools: string[] = []): ToolSettingsMap {\n    return Object.entries(this.getPluginsWithExclude(excludeTools)).reduce(\n      (finalTools, [key, plugin]: [string, PluginConfig]) => {\n        const tool: any = {\n          class: plugin.plugin\n        };\n        if (plugin.shortcut) tool.shortcut = plugin.shortcut;\n        if (plugin.type === 'inline' || plugin.inlineToolbar) tool.inlineToolbar = true;\n        if (plugin.config) tool.config = plugin.config;\n        return { ...finalTools, [key]: tool };\n      },\n      {}\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxEditorJSPluginServiceModule.html":{"url":"modules/NgxEditorJSPluginServiceModule.html","title":"module - NgxEditorJSPluginServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxEditorJSPluginServiceModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxEditorJSPluginServiceModule\n\n\n\ncluster_NgxEditorJSPluginServiceModule_providers\n\n\n\n\nNgxEditorJSPluginService\n\nNgxEditorJSPluginService\n\n\n\nNgxEditorJSPluginServiceModule\n\nNgxEditorJSPluginServiceModule\n\nNgxEditorJSPluginServiceModule -->\n\nNgxEditorJSPluginService->NgxEditorJSPluginServiceModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/services/plugin-service.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NgxEditorJSPluginService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PluginClasses, PLUGIN_CONFIG } from '../types/plugins';\nimport { createPluginConfig } from '../util/plugin';\nimport { NgxEditorJSPluginService } from './plugin-service.service';\n\n@NgModule({\n  providers: [\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: undefined,\n      multi: true\n    },\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: undefined,\n      multi: true\n    },\n    {\n      provide: PluginClasses,\n      useFactory: createPluginConfig,\n      deps: [PLUGIN_CONFIG, EDITOR_JS_TOOL_INJECTOR]\n    },\n    NgxEditorJSPluginService\n  ]\n})\nexport class NgxEditorJSPluginServiceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NgxEditorJSService.html":{"url":"injectables/NgxEditorJSService.html","title":"injectable - NgxEditorJSService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NgxEditorJSService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts\n        \n\n            \n                Description\n            \n            \n                This handles the management of  EditorJS instances and their lifecycle.\nAll EditorJS instances are created outside of Angular using  NgZone  to ensure change detection is not triggered.\nOnce an instance is created, several  Observable values are also set up:\n\n isReady  Set when the editor instance is ready in the DOM\n hasSaved  Set when the editor .save() method has been called.\n lastChange  Set when a change happens, contains the OutputData from the Editor.\n\nAfter setup,  isReady  is set to true and the editor can be used within Angular.  There are some methods provided\nfor  save ,  update  and  clear  - and an  apiCall  method which allows\nfor any call to be made to EditorJS that matches it's API.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                apiCall\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                    Async\n                                createInstance\n                            \n                            \n                                    Public\n                                destroy\n                            \n                            \n                                    Public\n                                destroyInstance\n                            \n                            \n                                    Public\n                                getEditor\n                            \n                            \n                                    Public\n                                hasSaved\n                            \n                            \n                                    Public\n                                isReady\n                            \n                            \n                                    Public\n                                lastChange\n                            \n                            \n                                    Public\n                                save\n                            \n                            \n                                    Public\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(editorJs: EditorJSClass, config: NgxEditorJSModuleConfig, plugins: NgxEditorJSPluginService, zone: NgZone, ref: ApplicationRef)\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:61\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        editorJs\n                                                  \n                                                        \n                                                                        EditorJSClass\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The EditorJS class injected into the application and used to create new editor instances\n\n                                                        \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                        NgxEditorJSModuleConfig\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The configuration provided from the NgxEditorJSModule.forRoot method\n\n                                                        \n                                                \n                                                \n                                                        plugins\n                                                  \n                                                        \n                                                                        NgxEditorJSPluginService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The plugin service which provides all plugins injected into the application\n\n                                                        \n                                                \n                                                \n                                                        zone\n                                                  \n                                                        \n                                                                        NgZone\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Angular Zone service that allows the EditorJS methods to be run outside of Angular\n\n                                                        \n                                                \n                                                \n                                                        ref\n                                                  \n                                                        \n                                                                        ApplicationRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The ApplicationRef provided by Angular, used to trigger an application tick\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            apiCall\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    apiCall(options: InjectorApiCallOptions, ...args: any[])\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:138\n                \n            \n\n            \n                \n                    Type parameters :\n                    \n                        T\n                    \n                \n            \n\n            \n                \n                    A helper method to make calls to the  EditorJS API  of any instance.\nThe first argument is an object that you must pass the method name, and the holder ID of the container.\nAn optional namespace can be added for API calls such as blocks, caret, etc.\nThe second argument is any additional arguments as required by the API.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorApiCallOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The options for the API call to be made\n\n                                    \n                                \n                                \n                                    args\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Any arguments to be passed to the API call\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        An Observable of the API response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear(options: InjectorMethodOption)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:191\n                \n            \n\n\n            \n                \n                    Gets the  EditorJS instance for the passed holder and calls the clear method.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorMethodOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options to configure a method call against the EditorJS core API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createInstance(options: CreateEditorJSOptions)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:87\n                \n            \n\n\n            \n                \n                    Creates a new  EditorJS instance outside of the Angular zone and then adds it to the editor instances\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                CreateEditorJSOptions\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        A configuration passed to create an EditorJS instance\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A Promise when the editor has been created\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroy\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroy()\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:288\n                \n            \n\n\n            \n                \n                    Call this to destroy all subscriptions within the service\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            destroyInstance\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    destroyInstance(options: InjectorMethodOption)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:271\n                \n            \n\n\n            \n                \n                    Destroys a single instance of  EditorJS and all the subject values created for it\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorMethodOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options to configure a method call against the EditorJS core API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getEditor\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEditor(options: InjectorMethodOption)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:220\n                \n            \n\n\n            \n                \n                    Returns the underlying  EditorJS instance\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorMethodOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options to configure a method call against the EditorJS core API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            hasSaved\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hasSaved(options: InjectorMethodOption)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:260\n                \n            \n\n\n            \n                \n                    Subscribe to the hasSaved state change for the editor passed in the options\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorMethodOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options to configure a method call against the EditorJS core API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            isReady\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isReady(options: InjectorMethodOption)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:231\n                \n            \n\n\n            \n                \n                    Subscribe to the isReady state change for the editor passed in the options\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorMethodOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options to configure a method call against the EditorJS core API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            lastChange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    lastChange(options: InjectorMethodOption)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:242\n                \n            \n\n\n            \n                \n                    Subscribe to the lastChange state change for the editor passed in the options\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorMethodOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options to configure a method call against the EditorJS core API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            save\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    save(options: InjectorMethodOption)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:177\n                \n            \n\n\n            \n                \n                    Call the save method of an  EditorJS instance and sets the current value of the service to the result\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorMethodOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options for the method call\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(options: InjectorMethodOption)\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/services/editorjs.service.ts:204\n                \n            \n\n\n            \n                \n                    Gets the  EditorJS instance for the passed holder and calls the render method if blocks\nare passed. Optionally can disable the lastChange update - useful if doing actions\nsuch as resetting data.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                InjectorMethodOption\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Options to configure a method call against the EditorJS core API\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Observable>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ApplicationRef, Inject, Injectable, NgZone } from '@angular/core';\nimport EditorJS, { EditorConfig, OutputData } from '@editorjs/editorjs';\nimport { NgxEditorJSPluginService, ToolSettingsMap } from '@tinynodes/ngx-editorjs-plugins';\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, switchMap, take, tap } from 'rxjs/operators';\nimport { NgxEditorJSModuleConfig, NGX_EDITORJS_CONFIG } from '../types/config';\nimport { CreateEditorJSOptions } from '../types/editorjs-service';\nimport {\n  EditorJSClass,\n  EditorJSInstance,\n  InjectorApiCallOptions,\n  InjectorApiCallResponse,\n  InjectorMethodOption,\n  MAP_DEFAULTS\n} from '../types/injector';\nimport { ChangeMap, EditorMap, ReadyMap, SavedMap } from '../types/maps';\n\n/**\n * This handles the management of {@link https://editorjs.io/api | EditorJS} instances and their lifecycle.\n *\n * All `EditorJS` instances are created outside of Angular using {@link https://angular.io/api/core/NgZone | NgZone } to ensure change detection is not triggered.\n * Once an instance is created, several {@link https://angular.io/guide/observables | Observable} values are also set up:\n *\n *  - {@link #isReady | isReady } Set when the editor instance is ready in the DOM\n *  - {@link #hasSaved | hasSaved } Set when the editor `.save()` method has been called.\n *  - {@link #lastChange | lastChange } Set when a change happens, contains the `OutputData` from the Editor.\n *\n * After setup, {@link #isReady | isReady } is set to true and the editor can be used within Angular.  There are some methods provided\n * for {@link #save | save }, {@link #update | update } and {@link #clear | clear } - and an {@link #apiCall | apiCall } method which allows\n * for any call to be made to EditorJS that matches it's API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxEditorJSService {\n  /**\n   * Internal destroy subject for the service\n   */\n  private readonly onDestroy$ = new Subject();\n\n  /**\n   * Internal map of all {@link https://editorjs.io/api | EditorJS} instances\n   */\n  private readonly editorMap: EditorMap = {};\n\n  /**\n   * Internal map of all {@link https://editorjs.io/api | EditorJS} ready states\n   */\n  private readonly isReadyMap: ReadyMap = {};\n\n  /**\n   * Internal map of when {@link https://editorjs.io/api | EditorJS} save is called\n   */\n  private readonly hasSavedMap: SavedMap = {};\n\n  /**\n   * Internal map of all {@link https://editorjs.io/api | EditorJS} change states\n   */\n  private readonly lastChangeMap: ChangeMap = {};\n\n  private toolbarOpen = false;\n\n  /**\n   * @param editorJs The EditorJS class injected into the application and used to create new editor instances\n   * @param config The configuration provided from the NgxEditorJSModule.forRoot method\n   * @param plugins The plugin service which provides all plugins injected into the application\n   * @param zone The Angular Zone service that allows the EditorJS methods to be run outside of Angular\n   * @param ref The ApplicationRef provided by Angular, used to trigger an application tick\n   */\n  constructor(\n    @Inject(EditorJSInstance) private readonly editorJs: EditorJSClass,\n    @Inject(NGX_EDITORJS_CONFIG) private readonly config: NgxEditorJSModuleConfig,\n    private readonly plugins: NgxEditorJSPluginService,\n    private readonly zone: NgZone,\n    private readonly ref: ApplicationRef\n  ) {}\n\n  /**\n   * Creates a new {@link https://editorjs.io/api | EditorJS} instance outside of the Angular zone and then adds it to the editor instances\n   *\n   * @remark\n   * This method uses `async/await`\n   *\n   * @param options A configuration passed to create an EditorJS instance\n   * @returns A Promise when the editor has been created\n   */\n  public async createInstance(options: CreateEditorJSOptions): Promise {\n    const editorConfig: EditorConfig = {\n      ...this.config.editorjs,\n      ...options.config,\n      tools: this.getTools(options.excludeTools)\n    };\n\n    // Bind the editor onChange method from the config, otherwise use the local createOnChange method\n    editorConfig.onChange =\n      editorConfig.onChange && typeof editorConfig.onChange === 'function'\n        ? editorConfig.onChange\n        : this.createOnChange.call(this, { holder: editorConfig.holder as string });\n\n    // Bind the editor onReady method from the config, otherwise use the local createOnReady method\n    editorConfig.onReady =\n      editorConfig.onReady && typeof editorConfig.onReady === 'function'\n        ? editorConfig.onReady\n        : this.createOnReady.call(this, { holder: editorConfig.holder as string });\n\n    await this.zone.runOutsideAngular(async () => {\n      const editor = new this.editorJs(editorConfig);\n      const holder = editorConfig.holder as string;\n      await editor.isReady;\n      await this.zone.run(async () => {\n        await this.setupSubjects({ holder });\n        if (this.editorMap[holder]) {\n          this.editorMap[holder].next(editor);\n        } else {\n          this.editorMap[holder] = new BehaviorSubject(editor);\n        }\n        this.isReadyMap[holder].next(true);\n        this.ref.tick();\n      });\n    });\n  }\n\n  /**\n   * A helper method to make calls to the {@link https://editorjs.io/api | EditorJS API } of any instance.\n   * The first argument is an object that you must pass the `method` name, and the `holder` ID of the container.\n   * An optional `namespace` can be added for API calls such as `blocks`, `caret`, etc.\n   *\n   * The second argument is any additional arguments as required by the API.\n   *\n   * @remarks\n   * Unlike other methods an API call be made with a `.subscribe`, the result will be an observable value.\n   * If the value is a Promise it will be resolved first\n   *\n   * @param options The options for the API call to be made\n   * @param args Any arguments to be passed to the API call\n   * @returns An Observable of the API response\n   */\n  public apiCall(options: InjectorApiCallOptions, ...args: any[]): Observable> {\n    return this.getEditor(options).pipe(\n      take(1),\n      switchMap(async editor => {\n        let result: InjectorApiCallResponse = { ...options, result: undefined };\n\n        await this.zone.runOutsideAngular(async () => {\n          let method: any;\n          if (!options.namespace) {\n            method = editor[options.method];\n          } else {\n            method = editor[options.namespace][options.method];\n          }\n          if (!method) {\n            throw new Error(`No method ${options.method} ${options.namespace ? 'in ' + options.namespace : ''}`);\n          }\n          const methodCall = method.call(editor, ...args);\n          await this.zone.run(async () => {\n            if (!methodCall || (methodCall && !methodCall.then)) {\n              result = {\n                ...result,\n                result: typeof methodCall === 'undefined' ? {} : methodCall\n              };\n            } else {\n              const r = await methodCall;\n              result = { ...result, result: r };\n            }\n          });\n        });\n\n        return result;\n      })\n    );\n  }\n\n  /**\n   * Call the `save` method of an {@link https://editorjs.io/api | EditorJS} instance and sets the current value of the service to the result\n   * @param options Options for the method call\n   */\n  public save(options: InjectorMethodOption): Observable> {\n    return this.apiCall({ holder: options.holder, namespace: 'saver', method: 'save' }).pipe(\n      take(1),\n      tap((response: InjectorApiCallResponse) => {\n        this.hasSavedMap[options.holder].next(true);\n        this.lastChangeMap[options.holder].next(response.result);\n      })\n    );\n  }\n\n  /**\n   * Gets the {@link https://editorjs.io/api | EditorJS} instance for the passed holder and calls the `clear` method.\n   * @param options Options to configure a method call against the EditorJS core API\n   */\n  public clear(options: InjectorMethodOption): Observable> {\n    return this.apiCall({ holder: options.holder, namespace: 'blocks', method: 'clear' }).pipe(\n      take(1),\n      switchMap(response => (options.skipSave ? of(response) : this.save(options)))\n    );\n  }\n\n  /**\n   * Gets the {@link https://editorjs.io/api | EditorJS} instance for the passed holder and calls the render method if blocks\n   * are passed. Optionally can disable the `lastChange` update - useful if doing actions\n   * such as resetting data.\n   * @param options Options to configure a method call against the EditorJS core API\n   */\n  public update(options: InjectorMethodOption): Observable> {\n    const data = {\n      time: (options.data && options.data.time) || Date.now(),\n      version: (options.data && options.data.version) || this.editorJs && this.editorJs.version || '',\n      blocks: [...options.data.blocks]\n    };\n    return this.apiCall({ holder: options.holder, namespace: 'blocks', method: 'render' }, data).pipe(\n      take(1),\n      switchMap(response => (options.skipSave ? of(response) : this.save(options)))\n    );\n  }\n\n  /**\n   * Returns the underlying {@link https://editorjs.io/api | EditorJS} instance\n   * @param options Options to configure a method call against the EditorJS core API\n   */\n  public getEditor(options: InjectorMethodOption): Observable {\n    if (!this.editorMap[options.holder]) {\n      this.editorMap[options.holder] = new BehaviorSubject(undefined);\n    }\n    return this.editorMap[options.holder].pipe(filter(editor => typeof editor !== 'undefined'));\n  }\n\n  /**\n   * Subscribe to the `isReady` state change for the editor passed in the options\n   * @param options Options to configure a method call against the EditorJS core API\n   */\n  public isReady(options: InjectorMethodOption): Observable {\n    if (!this.isReadyMap[options.holder]) {\n      this.isReadyMap[options.holder] = new BehaviorSubject(false);\n    }\n    return this.isReadyMap[options.holder].asObservable();\n  }\n\n  /**\n   * Subscribe to the `lastChange` state change for the editor passed in the options\n   * @param options Options to configure a method call against the EditorJS core API\n   */\n  public lastChange(options: InjectorMethodOption): Observable {\n    if (!this.lastChangeMap[options.holder]) {\n      this.lastChangeMap[options.holder] = new BehaviorSubject({\n        time: 0,\n        blocks: [],\n        version: this.editorJs && this.editorJs.version || ''\n      });\n    }\n    return this.lastChangeMap[options.holder].pipe(\n      distinctUntilChanged((a, b) => (b && b.time && b.time === 0) || (a && b && (a.time && a.time === b.time))),\n      filter(hasChanged => typeof hasChanged !== 'undefined')\n    );\n  }\n\n  /**\n   * Subscribe to the `hasSaved` state change for the editor passed in the options\n   * @param options Options to configure a method call against the EditorJS core API\n   */\n  public hasSaved(options: InjectorMethodOption): Observable {\n    if (!this.hasSavedMap[options.holder]) {\n      this.hasSavedMap[options.holder] = new BehaviorSubject(false);\n    }\n    return this.hasSavedMap[options.holder].asObservable();\n  }\n\n  /**\n   * Destroys a single instance of {@link https://editorjs.io/api | EditorJS} and all the subject values created for it\n   * @param options Options to configure a method call against the EditorJS core API\n   */\n  public destroyInstance(options: InjectorMethodOption): void {\n    this.getEditor(options)\n      .pipe(take(1))\n      .subscribe(editor => {\n        this.zone.runOutsideAngular(() => {\n          editor.destroy();\n          this.zone.run(() => {\n            this.cleanupSubjects({ holder: options.holder });\n            this.ref.tick();\n          });\n        });\n      });\n  }\n\n  /**\n   * Call this to destroy all subscriptions within the service\n   */\n  public destroy() {\n    Object.keys(this.editorMap).forEach(holder => this.destroyInstance({ holder }));\n    this.onDestroy$.next(true);\n    this.onDestroy$.complete();\n  }\n\n  /**\n   * Internal method to create an default onChange method for {@link https://editorjs.io/api | EditorJS}\n   * @param options The InjectorMethodOption for this request\n   */\n  private createOnChange(options: InjectorMethodOption): (change: OutputData) => void {\n    if (!this.lastChangeMap[options.holder]) {\n      this.lastChangeMap[options.holder] = new BehaviorSubject({ blocks: [] });\n    }\n    return (change: OutputData) => {\n      if (change) {\n        this.lastChangeMap[options.holder].next(change);\n      }\n    };\n  }\n\n  /**\n   * Internal method to create an default onReady method for {@link https://editorjs.io/api | EditorJS}\n   * @param options The InjectorMethodOption for this request\n   */\n  private createOnReady(options: InjectorMethodOption): () => void {\n    if (!this.isReadyMap[options.holder]) {\n      this.isReadyMap[options.holder] = new BehaviorSubject(false);\n    }\n\n    return () => {\n      if (!this.isReadyMap[options.holder].value) {\n        this.isReadyMap[options.holder].next(true);\n      }\n    };\n  }\n\n  /**\n   * Sets up the `BehaviorSubject` values when an {@link https://editorjs.io/api | EditorJS} instance is created.  All the subjects are first created and set\n   * to default values.\n   * Once an EditorJS instance is ready these values can provide change and save state information\n   * @param options Options to configure a method call against the EditorJS core API\n   */\n  private async setupSubjects(options: InjectorMethodOption): Promise {\n    MAP_DEFAULTS.forEach(([mapKey, value]: [string, typeof value]) => {\n      if (!this[mapKey][options.holder]) {\n        this[mapKey][options.holder] = new BehaviorSubject(value);\n      }\n      this[mapKey][options.holder].next(value);\n    });\n  }\n\n  /**\n   * Handles cleaning up all the `BehaviorSubject` values once an {@link https://editorjs.io/api | EditorJS} instance has been destroyed\n   * @param options The options to pass to clean up the subjects\n   */\n  private cleanupSubjects(options: InjectorMethodOption) {\n    MAP_DEFAULTS.forEach(([mapKey]: [string]) => {\n      if (this[mapKey][options.holder]) {\n        this[mapKey][options.holder].complete();\n        this[mapKey][options.holder] = null;\n        delete this[mapKey][options.holder];\n      }\n    });\n    this.editorMap[options.holder].complete();\n    this.editorMap[options.holder] = null;\n    delete this.editorMap[options.holder];\n  }\n\n  /**\n   * Returns a map of {@link https://editorjs.io/api | EditorJS} tools to be initialized by the editor\n   * @param excludeTools Optional array of tools to exclude, if not passed all tools\n   */\n  private getTools(excludeTools: string[] = []): ToolSettingsMap {\n    return this.plugins.getTools(excludeTools);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxEditorjsPluginsModule.html":{"url":"modules/NgxEditorjsPluginsModule.html","title":"module - NgxEditorjsPluginsModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxEditorjsPluginsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxEditorjsPluginsModule\n\n\n\ncluster_NgxEditorjsPluginsModule_imports\n\n\n\ncluster_NgxEditorjsPluginsModule_exports\n\n\n\n\nNgxEditorJSPluginServiceModule\n\nNgxEditorJSPluginServiceModule\n\n\n\nNgxEditorjsPluginsModule\n\nNgxEditorjsPluginsModule\n\nNgxEditorjsPluginsModule -->\n\nNgxEditorJSPluginServiceModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginCodeModule\n\nPluginCodeModule\n\nNgxEditorjsPluginsModule -->\n\nPluginCodeModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginEmbedModule\n\nPluginEmbedModule\n\nNgxEditorjsPluginsModule -->\n\nPluginEmbedModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginHeaderModule\n\nPluginHeaderModule\n\nNgxEditorjsPluginsModule -->\n\nPluginHeaderModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginImageModule\n\nPluginImageModule\n\nNgxEditorjsPluginsModule -->\n\nPluginImageModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginInlineCodeModule\n\nPluginInlineCodeModule\n\nNgxEditorjsPluginsModule -->\n\nPluginInlineCodeModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginLinkModule\n\nPluginLinkModule\n\nNgxEditorjsPluginsModule -->\n\nPluginLinkModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginListModule\n\nPluginListModule\n\nNgxEditorjsPluginsModule -->\n\nPluginListModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginMarkerModule\n\nPluginMarkerModule\n\nNgxEditorjsPluginsModule -->\n\nPluginMarkerModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginParagraphModule\n\nPluginParagraphModule\n\nNgxEditorjsPluginsModule -->\n\nPluginParagraphModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginQuoteModule\n\nPluginQuoteModule\n\nNgxEditorjsPluginsModule -->\n\nPluginQuoteModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginSimpleImageModule\n\nPluginSimpleImageModule\n\nNgxEditorjsPluginsModule -->\n\nPluginSimpleImageModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginWarningModule\n\nPluginWarningModule\n\nNgxEditorjsPluginsModule -->\n\nPluginWarningModule->NgxEditorjsPluginsModule\n\n\n\n\n\nNgxEditorJSPluginServiceModule \n\nNgxEditorJSPluginServiceModule \n\nNgxEditorJSPluginServiceModule  -->\n\nNgxEditorjsPluginsModule->NgxEditorJSPluginServiceModule \n\n\n\n\n\nPluginCodeModule \n\nPluginCodeModule \n\nPluginCodeModule  -->\n\nNgxEditorjsPluginsModule->PluginCodeModule \n\n\n\n\n\nPluginEmbedModule \n\nPluginEmbedModule \n\nPluginEmbedModule  -->\n\nNgxEditorjsPluginsModule->PluginEmbedModule \n\n\n\n\n\nPluginHeaderModule \n\nPluginHeaderModule \n\nPluginHeaderModule  -->\n\nNgxEditorjsPluginsModule->PluginHeaderModule \n\n\n\n\n\nPluginImageModule \n\nPluginImageModule \n\nPluginImageModule  -->\n\nNgxEditorjsPluginsModule->PluginImageModule \n\n\n\n\n\nPluginInlineCodeModule \n\nPluginInlineCodeModule \n\nPluginInlineCodeModule  -->\n\nNgxEditorjsPluginsModule->PluginInlineCodeModule \n\n\n\n\n\nPluginLinkModule \n\nPluginLinkModule \n\nPluginLinkModule  -->\n\nNgxEditorjsPluginsModule->PluginLinkModule \n\n\n\n\n\nPluginListModule \n\nPluginListModule \n\nPluginListModule  -->\n\nNgxEditorjsPluginsModule->PluginListModule \n\n\n\n\n\nPluginMarkerModule \n\nPluginMarkerModule \n\nPluginMarkerModule  -->\n\nNgxEditorjsPluginsModule->PluginMarkerModule \n\n\n\n\n\nPluginParagraphModule \n\nPluginParagraphModule \n\nPluginParagraphModule  -->\n\nNgxEditorjsPluginsModule->PluginParagraphModule \n\n\n\n\n\nPluginQuoteModule \n\nPluginQuoteModule \n\nPluginQuoteModule  -->\n\nNgxEditorjsPluginsModule->PluginQuoteModule \n\n\n\n\n\nPluginSimpleImageModule \n\nPluginSimpleImageModule \n\nPluginSimpleImageModule  -->\n\nNgxEditorjsPluginsModule->PluginSimpleImageModule \n\n\n\n\n\nPluginWarningModule \n\nPluginWarningModule \n\nPluginWarningModule  -->\n\nNgxEditorjsPluginsModule->PluginWarningModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/ngx-editorjs-plugins.module.ts\n        \n\n\n        \n            Description\n        \n        \n            The NgxEditorjsPluginsModule provides several additional modules\nthat provide a way to easily plug in block and inline tools for EditorJS.\nImporting NgxEditorjsPluginsModule will include all modules, while it\nis also possible to import each individual module as required.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            NgxEditorJSPluginServiceModule\n                        \n                        \n                            PluginCodeModule\n                        \n                        \n                            PluginEmbedModule\n                        \n                        \n                            PluginHeaderModule\n                        \n                        \n                            PluginImageModule\n                        \n                        \n                            PluginInlineCodeModule\n                        \n                        \n                            PluginLinkModule\n                        \n                        \n                            PluginListModule\n                        \n                        \n                            PluginMarkerModule\n                        \n                        \n                            PluginParagraphModule\n                        \n                        \n                            PluginQuoteModule\n                        \n                        \n                            PluginSimpleImageModule\n                        \n                        \n                            PluginWarningModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxEditorJSPluginServiceModule\n                        \n                        \n                            PluginCodeModule\n                        \n                        \n                            PluginEmbedModule\n                        \n                        \n                            PluginHeaderModule\n                        \n                        \n                            PluginImageModule\n                        \n                        \n                            PluginInlineCodeModule\n                        \n                        \n                            PluginLinkModule\n                        \n                        \n                            PluginListModule\n                        \n                        \n                            PluginMarkerModule\n                        \n                        \n                            PluginParagraphModule\n                        \n                        \n                            PluginQuoteModule\n                        \n                        \n                            PluginSimpleImageModule\n                        \n                        \n                            PluginWarningModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { PluginCodeModule } from './plugins/code/code.module';\nimport { PluginEmbedModule } from './plugins/embed/embed.module';\nimport { PluginHeaderModule } from './plugins/header/header.module';\nimport { PluginImageModule } from './plugins/image/image.module';\nimport { PluginInlineCodeModule } from './plugins/inline-code/inline-code.module';\nimport { PluginLinkModule } from './plugins/link/link.module';\nimport { PluginListModule } from './plugins/list/list.module';\nimport { PluginMarkerModule } from './plugins/marker/marker.module';\nimport { PluginParagraphModule } from './plugins/paragraph/paragraph.module';\nimport { PluginQuoteModule } from './plugins/quote/quote.module';\nimport { PluginSimpleImageModule } from './plugins/simple-image/simple-image.module';\nimport { PluginWarningModule } from './plugins/warning/warning.module';\nimport { NgxEditorJSPluginServiceModule } from './services/plugin-service.module';\n\n/**\n * The `NgxEditorjsPluginsModule` provides several additional modules\n * that provide a way to easily plug in block and inline tools for EditorJS.\n *\n * Importing `NgxEditorjsPluginsModule` will include all modules, while it\n * is also possible to import each individual module as required.\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    NgxEditorJSPluginServiceModule,\n    PluginCodeModule,\n    PluginHeaderModule,\n    PluginImageModule,\n    PluginLinkModule,\n    PluginListModule,\n    PluginMarkerModule,\n    PluginParagraphModule,\n    PluginSimpleImageModule,\n    PluginInlineCodeModule,\n    PluginWarningModule,\n    PluginQuoteModule,\n    PluginEmbedModule\n  ],\n  exports: [\n    NgxEditorJSPluginServiceModule,\n    PluginCodeModule,\n    PluginHeaderModule,\n    PluginImageModule,\n    PluginLinkModule,\n    PluginListModule,\n    PluginMarkerModule,\n    PluginParagraphModule,\n    PluginSimpleImageModule,\n    PluginInlineCodeModule,\n    PluginWarningModule,\n    PluginQuoteModule,\n    PluginEmbedModule\n  ]\n})\nexport class NgxEditorjsPluginsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxTinynodesComponentsModule.html":{"url":"modules/NgxTinynodesComponentsModule.html","title":"module - NgxTinynodesComponentsModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxTinynodesComponentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxTinynodesComponentsModule\n\n\n\ncluster_NgxTinynodesComponentsModule_imports\n\n\n\ncluster_NgxTinynodesComponentsModule_exports\n\n\n\n\nNgxTinynodesMatJsonOutputModule\n\nNgxTinynodesMatJsonOutputModule\n\n\n\nNgxTinynodesComponentsModule\n\nNgxTinynodesComponentsModule\n\nNgxTinynodesComponentsModule -->\n\nNgxTinynodesMatJsonOutputModule->NgxTinynodesComponentsModule\n\n\n\n\n\nNgxTinynodesMatTagInputModule\n\nNgxTinynodesMatTagInputModule\n\nNgxTinynodesComponentsModule -->\n\nNgxTinynodesMatTagInputModule->NgxTinynodesComponentsModule\n\n\n\n\n\nNgxTinynodesMatJsonOutputModule \n\nNgxTinynodesMatJsonOutputModule \n\nNgxTinynodesMatJsonOutputModule  -->\n\nNgxTinynodesComponentsModule->NgxTinynodesMatJsonOutputModule \n\n\n\n\n\nNgxTinynodesMatTagInputModule \n\nNgxTinynodesMatTagInputModule \n\nNgxTinynodesMatTagInputModule  -->\n\nNgxTinynodesComponentsModule->NgxTinynodesMatTagInputModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-tinynodes-components/src/lib/ngx-tinynodes-components.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            NgxTinynodesMatJsonOutputModule\n                        \n                        \n                            NgxTinynodesMatTagInputModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxTinynodesMatJsonOutputModule\n                        \n                        \n                            NgxTinynodesMatTagInputModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxTinynodesMatTagInputModule } from './components/mat-tag-input/mat-tag-input.module';\nimport { NgxTinynodesMatJsonOutputModule } from './components/mat-json-output/mat-json-output.module';\n\n@NgModule({\n  imports: [ NgxTinynodesMatTagInputModule, NgxTinynodesMatJsonOutputModule ],\n  exports: [ NgxTinynodesMatTagInputModule, NgxTinynodesMatJsonOutputModule ]\n})\nexport class NgxTinynodesComponentsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/NgxTinynodesMatFieldComponent.html":{"url":"interfaces/NgxTinynodesMatFieldComponent.html","title":"interface - NgxTinynodesMatFieldComponent","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  NgxTinynodesMatFieldComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-tinynodes-components/src/lib/types/components.ts\n        \n\n\n            \n                Extends\n            \n            \n                        ControlValueAccessor\n            \n\n\n\n\n    \n\n\n    \n        import { ControlValueAccessor } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material';\nimport { AfterContentInit, DoCheck, OnDestroy, OnInit } from '@angular/core';\n\nexport interface NgxTinynodesMatFieldComponent extends ControlValueAccessor,\n  MatFormFieldControl,\n  OnInit,\n  OnDestroy,\n  DoCheck,\n  AfterContentInit {\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NgxTinynodesMatJsonOutputComponent.html":{"url":"components/NgxTinynodesMatJsonOutputComponent.html","title":"component - NgxTinynodesMatJsonOutputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  NgxTinynodesMatJsonOutputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    libs/ngx-tinynodes-components/src/lib/components/mat-json-output/mat-json-output.component.ts\n\n\n\n\n    \n        Implements\n    \n    \n                    OnChanges\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ngx-tinynodes-mat-json-output\n            \n\n\n\n\n            \n                templateUrl\n                mat-json-output.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                    Public\n                                toggleExpand\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                expand\n                            \n                            \n                                json\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(cd: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-tinynodes-components/src/lib/components/mat-json-output/mat-json-output.component.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                        ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        expand\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-tinynodes-components/src/lib/components/mat-json-output/mat-json-output.component.ts:14\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        json\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                        \n                            \n                                    Defined in libs/ngx-tinynodes-components/src/lib/components/mat-json-output/mat-json-output.component.ts:11\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            ngOnChanges\n                        \n                        \n                    \n                \n            \n            \n                \nngOnChanges()\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-tinynodes-components/src/lib/components/mat-json-output/mat-json-output.component.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toggleExpand\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toggleExpand()\n                \n            \n\n\n            \n                \n                    Defined in libs/ngx-tinynodes-components/src/lib/components/mat-json-output/mat-json-output.component.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'ngx-tinynodes-mat-json-output',\n  templateUrl: 'mat-json-output.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxTinynodesMatJsonOutputComponent implements OnChanges {\n\n  @Input()\n  json: any;\n\n  @Input()\n  expand = true;\n\n  constructor(private readonly cd: ChangeDetectorRef) {\n  }\n\n  public toggleExpand() {\n    this.expand = !this.expand;\n  }\n\n  ngOnChanges(): void {\n    this.cd.markForCheck();\n  }\n}\n\n    \n\n    \n        \n  \n    Output\n    Data from the EditorJS instance\n  \n  \n    {{expand ? 'Collapse JSON' : 'Expand JSON'}}\n  \n  \n    \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Output    Data from the EditorJS instance        {{expand ? \\'Collapse JSON\\' : \\'Expand JSON\\'}}          '\n    var COMPONENTS = [{'name': 'NgxEditorJSComponent', 'selector': 'ngx-editorjs'},{'name': 'NgxEditorJSMatFieldComponent', 'selector': 'ngx-editorjs-mat-field'},{'name': 'NgxTinynodesMatJsonOutputComponent', 'selector': 'ngx-tinynodes-mat-json-output'},{'name': 'NgxTinynodesMatTagInputComponent', 'selector': 'ngx-tinynodes-mat-tag-input'}];\n    var DIRECTIVES = [{'name': 'NgxEditorJSDirective', 'selector': '[ngxEditorJS]'}];\n    var ACTUAL_COMPONENT = {'name': 'NgxTinynodesMatJsonOutputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxTinynodesMatJsonOutputModule.html":{"url":"modules/NgxTinynodesMatJsonOutputModule.html","title":"module - NgxTinynodesMatJsonOutputModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxTinynodesMatJsonOutputModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxTinynodesMatJsonOutputModule\n\n\n\ncluster_NgxTinynodesMatJsonOutputModule_declarations\n\n\n\ncluster_NgxTinynodesMatJsonOutputModule_exports\n\n\n\n\nNgxTinynodesMatJsonOutputComponent\n\nNgxTinynodesMatJsonOutputComponent\n\n\n\nNgxTinynodesMatJsonOutputModule\n\nNgxTinynodesMatJsonOutputModule\n\nNgxTinynodesMatJsonOutputModule -->\n\nNgxTinynodesMatJsonOutputComponent->NgxTinynodesMatJsonOutputModule\n\n\n\n\n\nNgxTinynodesMatJsonOutputComponent \n\nNgxTinynodesMatJsonOutputComponent \n\nNgxTinynodesMatJsonOutputComponent  -->\n\nNgxTinynodesMatJsonOutputModule->NgxTinynodesMatJsonOutputComponent \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-tinynodes-components/src/lib/components/mat-json-output/mat-json-output.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NgxTinynodesMatJsonOutputComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxTinynodesMatJsonOutputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxTinynodesMatJsonOutputComponent } from './mat-json-output.component';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule, MatCardModule } from '@angular/material';\nimport { NgxJsonViewerModule } from 'ngx-json-viewer';\n\n@NgModule({\n  imports: [CommonModule, MatCardModule, MatButtonModule, NgxJsonViewerModule],\n  declarations: [ NgxTinynodesMatJsonOutputComponent ],\n  exports: [ NgxTinynodesMatJsonOutputComponent ]\n})\nexport class NgxTinynodesMatJsonOutputModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NgxTinynodesMatTagInputModule.html":{"url":"modules/NgxTinynodesMatTagInputModule.html","title":"module - NgxTinynodesMatTagInputModule","body":"\n                   \n\n\n\n\n    Modules\n    NgxTinynodesMatTagInputModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxTinynodesMatTagInputModule\n\n\n\ncluster_NgxTinynodesMatTagInputModule_declarations\n\n\n\ncluster_NgxTinynodesMatTagInputModule_NgxTinynodesMatTagInputComponent_providers\n\n\n\ncluster_NgxTinynodesMatTagInputModule_exports\n\n\n\n\nNgxTinynodesMatTagInputComponent\n\nNgxTinynodesMatTagInputComponent\n\n\n\nNgxTinynodesMatTagInputModule\n\nNgxTinynodesMatTagInputModule\n\nNgxTinynodesMatTagInputModule -->\n\nNgxTinynodesMatTagInputComponent->NgxTinynodesMatTagInputModule\n\n\n\n\n\nNgxTinynodesMatTagInputComponent \n\nNgxTinynodesMatTagInputComponent \n\nNgxTinynodesMatTagInputComponent  -->\n\nNgxTinynodesMatTagInputModule->NgxTinynodesMatTagInputComponent \n\n\n\n\n\nTAG_COMPONENT_VALUE_ACCESSOR\n\nTAG_COMPONENT_VALUE_ACCESSOR\n\nNgxTinynodesMatTagInputComponent -->\n\nTAG_COMPONENT_VALUE_ACCESSOR->NgxTinynodesMatTagInputComponent\n\n\n\n\n\nTAG_COMPONENT_FIELD_CONTROL\n\nTAG_COMPONENT_FIELD_CONTROL\n\nNgxTinynodesMatTagInputComponent -->\n\nTAG_COMPONENT_FIELD_CONTROL->NgxTinynodesMatTagInputComponent\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-tinynodes-components/src/lib/components/mat-tag-input/mat-tag-input.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            NgxTinynodesMatTagInputComponent\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NgxTinynodesMatTagInputComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxTinynodesMatTagInputComponent } from './mat-tag-input.component';\nimport { MatChipsModule, MatIconModule } from '@angular/material';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [FormsModule,CommonModule, MatChipsModule, MatIconModule],\n  declarations: [ NgxTinynodesMatTagInputComponent ],\n  exports: [ NgxTinynodesMatTagInputComponent ]\n})\nexport class NgxTinynodesMatTagInputModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paragraph.html":{"url":"interfaces/Paragraph.html","title":"interface - Paragraph","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Paragraph\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                Default data type for a paragraph block\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        text\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The paragraph text\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParagraphBlock.html":{"url":"interfaces/ParagraphBlock.html","title":"interface - ParagraphBlock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ParagraphBlock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n        \n\n            \n                Description\n            \n            \n                Interface for a paragraph block\n\n            \n\n            \n                Extends\n            \n            \n                        Block\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                            \n                                \n                                    The EditorJS block type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Block {\n  /**\n   * The EditorJS block type\n   */\n  type: string;\n\n  /**\n   * The data interface for the block type\n   */\n  data: T;\n\n  /**\n   * Additional properties on the type\n   */\n  [key: string]: any;\n}\n\n/**\n * Available list styles, supports `ordered` and `unordered`.\n * A custom string can also be added\n */\nexport type ListStyle = 'ordered' | 'unordered' | string;\n\n/**\n * Default data type for a list block\n */\nexport interface List {\n  /**\n   * The list style\n   */\n  style: ListStyle;\n  /**\n   * List items of type T\n   */\n  items: T[];\n}\n\n/**\n * The default list block is provided by the EditorJS list plugin\n */\nexport interface ListBlock extends Block> {\n  /**\n   * The EditorJS block type\n   */\n  type: 'list';\n}\n\n/**\n * Default data type for a paragraph block\n */\ninterface Paragraph {\n  /**\n   * The paragraph text\n   */\n  text: string;\n}\n\n/**\n * Interface for a paragraph block\n */\nexport interface ParagraphBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'paragraph';\n}\n\n/**\n * Default data type for a header block\n */\ninterface Header {\n  /**\n   * The header text\n   */\n  text: string;\n  /**\n   * The header level from 1-6\n   */\n  level: number;\n}\n\n/**\n * Interface for a header block\n */\nexport interface HeaderBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'header';\n}\n\n/**\n * Default data type for a header block\n */\nexport interface Image {\n  /**\n   * The image URL\n   */\n  url: string;\n  /**\n   * Optional image caption\n   */\n  caption?: string;\n  /**\n   * Optional border property\n   */\n  withBorder?: boolean;\n\n  /**\n   * Optional background property\n   */\n  withBackground?: boolean;\n\n  /**\n   * Optional stretch property\n   */\n  stretched?: boolean;\n}\n\n/**\n * Interface for a image block\n */\nexport interface ImageBlock extends Block {\n  /**\n   * The EditorJS block type\n   */\n  type: 'image';\n}\n\n/**\n * Type of all the basic block type\n */\nexport type BlockTypes = ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block;\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginCodeModule.html":{"url":"modules/PluginCodeModule.html","title":"module - PluginCodeModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginCodeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/code/code.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginClasses, PluginTypes } from '../../types/plugins';\nimport Code from '@editorjs/code';\nimport { createPluginConfig } from '../../util/plugin';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/code) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Code,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'code',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Code'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginCodeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PluginConfig.html":{"url":"interfaces/PluginConfig.html","title":"interface - PluginConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PluginConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts\n        \n\n            \n                Description\n            \n            \n                A plugin configuration object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        blockData\n                                \n                                \n                                            Optional\n                                        config\n                                \n                                \n                                            Optional\n                                        description\n                                \n                                \n                                            Optional\n                                        inlineToolbar\n                                \n                                \n                                        key\n                                \n                                \n                                        plugin\n                                \n                                \n                                        pluginName\n                                \n                                \n                                            Optional\n                                        shortcut\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blockData\n                                    \n                                \n                                \n                                    \n                                        blockData:         BlockData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BlockData\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional block data, used to define the block data for this type\nand used as a default\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        config\n                                    \n                                \n                                \n                                    \n                                        config:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional  custom configuration to pass to EditorJS\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                    \n                                \n                                \n                                    \n                                        description:         PluginProperty\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PluginProperty\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional description for the plugin\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        inlineToolbar\n                                    \n                                \n                                \n                                    \n                                        inlineToolbar:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    If a block tool, you can also set this to true if it contains inline tool support\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        key\n                                    \n                                \n                                \n                                    \n                                        key:         PluginProperty\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PluginProperty\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The key to use for the plugin\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        plugin\n                                    \n                                \n                                \n                                    \n                                        plugin:         EditorJSPlugin | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         EditorJSPlugin | undefined\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The plugin for the editor\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pluginName\n                                    \n                                \n                                \n                                    \n                                        pluginName:         PluginProperty\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PluginProperty\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Label for displaying the plugin name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        shortcut\n                                    \n                                \n                                \n                                    \n                                        shortcut:         PluginProperty\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PluginProperty\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional shortcut for the plugin\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         PluginProperty\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         PluginProperty\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Specifies the type of plugin for the plugin provider\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport { ToolSettings, ToolConstructable } from '@editorjs/editorjs';\n\n/**\n * Block Data interface\n */\nexport interface BlockData {\n  [key: string]: any;\n}\n\n/**\n * The types of plugins supported, currently block and inline\n */\nexport enum PluginTypes {\n  /**\n   * A EditorJS block plugin\n   */\n  Block = 'block',\n  /**\n   * A EditorJS inline plugin\n   */\n  Inline = 'inline'\n}\n\n/**\n * The types of plugins supported via the plugin `type` property\n */\nexport type PluginType = PluginTypes.Block | PluginTypes.Inline | string;\n\n/**\n * A plugin property\n */\nexport type PluginProperty = string;\n\n/**\n * The EditorJS tool settings for this plugin\n */\nexport type EditorJSPlugin = ToolConstructable | ToolSettings;\n\n/**\n * A map of all the tools settings\n */\nexport interface ToolSettingsMap {\n  /**\n   * The key of the plugin and the plugin exported tool settings\n   */\n  [key: string]: EditorJSPlugin;\n}\n\n/**\n * A plugin configuration object\n */\nexport interface PluginConfig {\n  /**\n   * Specifies the type of plugin for the plugin provider\n   */\n  type: PluginProperty;\n  /**\n   * The key to use for the plugin\n   */\n  key: PluginProperty;\n  /**\n   * Label for displaying the plugin name\n   */\n  pluginName: PluginProperty;\n  /**\n   * Optional description for the plugin\n   */\n  description?: PluginProperty;\n  /**\n   * Optional shortcut for the plugin\n   */\n  shortcut?: PluginProperty;\n  /**\n   * Optional {@link https://editorjs.io/provide-custom-configuration | custom configuration} to pass to EditorJS\n   */\n  config?: any;\n\n  /**\n   * If a block tool, you can also set this to true if it contains inline tool support\n   */\n  inlineToolbar?: boolean;\n  /**\n   * Optional block data, used to define the block data for this type\n   * and used as a default\n   */\n  blockData?: BlockData;\n  /**\n   * The plugin for the editor\n   */\n  plugin: EditorJSPlugin | undefined;\n}\n\n/**\n * The Injection token for initial plugins as defined in the ngx-editorjs module\n */\nexport const EDITOR_JS_TOOL_INJECTOR = new InjectionToken('EDITOR_JS_TOOL_INJECTOR');\n\n/**\n * Injection token for a plugin config\n */\nexport const PLUGIN_CONFIG = new InjectionToken('PLUGIN_CONFIG');\n\n/**\n * A map of plugin configs\n */\nexport interface PluginConfigMap {\n  /**\n   * A plugin config per key\n   */\n  [key: string]: PluginConfig;\n}\n\n/**\n * Injection token for the plugin config map\n */\nexport const PluginClasses = new InjectionToken('PluginClasses');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PluginConfigMap.html":{"url":"interfaces/PluginConfigMap.html","title":"interface - PluginConfigMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PluginConfigMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts\n        \n\n            \n                Description\n            \n            \n                A map of plugin configs\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        PluginConfig\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts:107\n                            \n                        \n                \n                    \n                        A plugin config per key\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport { ToolSettings, ToolConstructable } from '@editorjs/editorjs';\n\n/**\n * Block Data interface\n */\nexport interface BlockData {\n  [key: string]: any;\n}\n\n/**\n * The types of plugins supported, currently block and inline\n */\nexport enum PluginTypes {\n  /**\n   * A EditorJS block plugin\n   */\n  Block = 'block',\n  /**\n   * A EditorJS inline plugin\n   */\n  Inline = 'inline'\n}\n\n/**\n * The types of plugins supported via the plugin `type` property\n */\nexport type PluginType = PluginTypes.Block | PluginTypes.Inline | string;\n\n/**\n * A plugin property\n */\nexport type PluginProperty = string;\n\n/**\n * The EditorJS tool settings for this plugin\n */\nexport type EditorJSPlugin = ToolConstructable | ToolSettings;\n\n/**\n * A map of all the tools settings\n */\nexport interface ToolSettingsMap {\n  /**\n   * The key of the plugin and the plugin exported tool settings\n   */\n  [key: string]: EditorJSPlugin;\n}\n\n/**\n * A plugin configuration object\n */\nexport interface PluginConfig {\n  /**\n   * Specifies the type of plugin for the plugin provider\n   */\n  type: PluginProperty;\n  /**\n   * The key to use for the plugin\n   */\n  key: PluginProperty;\n  /**\n   * Label for displaying the plugin name\n   */\n  pluginName: PluginProperty;\n  /**\n   * Optional description for the plugin\n   */\n  description?: PluginProperty;\n  /**\n   * Optional shortcut for the plugin\n   */\n  shortcut?: PluginProperty;\n  /**\n   * Optional {@link https://editorjs.io/provide-custom-configuration | custom configuration} to pass to EditorJS\n   */\n  config?: any;\n\n  /**\n   * If a block tool, you can also set this to true if it contains inline tool support\n   */\n  inlineToolbar?: boolean;\n  /**\n   * Optional block data, used to define the block data for this type\n   * and used as a default\n   */\n  blockData?: BlockData;\n  /**\n   * The plugin for the editor\n   */\n  plugin: EditorJSPlugin | undefined;\n}\n\n/**\n * The Injection token for initial plugins as defined in the ngx-editorjs module\n */\nexport const EDITOR_JS_TOOL_INJECTOR = new InjectionToken('EDITOR_JS_TOOL_INJECTOR');\n\n/**\n * Injection token for a plugin config\n */\nexport const PLUGIN_CONFIG = new InjectionToken('PLUGIN_CONFIG');\n\n/**\n * A map of plugin configs\n */\nexport interface PluginConfigMap {\n  /**\n   * A plugin config per key\n   */\n  [key: string]: PluginConfig;\n}\n\n/**\n * Injection token for the plugin config map\n */\nexport const PluginClasses = new InjectionToken('PluginClasses');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginEmbedModule.html":{"url":"modules/PluginEmbedModule.html","title":"module - PluginEmbedModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginEmbedModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/embed/embed.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginTypes } from '../../types/plugins';\nimport Embed from '@editorjs/embed';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/paragraph) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Embed,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'embed',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Embed Block',\n        inlineToolbar: true\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginEmbedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginHeaderModule.html":{"url":"modules/PluginHeaderModule.html","title":"module - PluginHeaderModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginHeaderModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/header/header.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS header block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginTypes } from '../../types/plugins';\nimport Header from '@editorjs/header';\n\n/**\n * A module that provides the default EditorJS header block tool.\n * See [the GitHub repo](https://github.com/editor-js/header) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Header,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'header',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Header'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginHeaderModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginImageModule.html":{"url":"modules/PluginImageModule.html","title":"module - PluginImageModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginImageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/image/image.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginClasses, PluginTypes } from '../../types/plugins';\n\nimport Image from '@editorjs/image';\nimport { createPluginConfig } from '../../util/plugin';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/image) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Image,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'image',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Image'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginImageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginInlineCodeModule.html":{"url":"modules/PluginInlineCodeModule.html","title":"module - PluginInlineCodeModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginInlineCodeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/inline-code/inline-code.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginTypes } from '../../types/plugins';\nimport InlineCode from '@editorjs/inline-code';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/paragraph) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: InlineCode,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'inline-code',\n        type: PluginTypes.Inline,\n        pluginName: 'EditorJS Inline Code',\n        shortcut: 'CTRL+SHIFT+C'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginInlineCodeModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginLinkModule.html":{"url":"modules/PluginLinkModule.html","title":"module - PluginLinkModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginLinkModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/link/link.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginClasses, PluginTypes } from '../../types/plugins';\n\nimport Link from '@editorjs/link';\nimport { createPluginConfig } from '../../util/plugin';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/image) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Link,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'link',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Link'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginLinkModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginListModule.html":{"url":"modules/PluginListModule.html","title":"module - PluginListModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginListModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/list/list.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginClasses, PluginTypes } from '../../types/plugins';\n\nimport List from '@editorjs/list';\nimport { createPluginConfig } from '../../util/plugin';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/image) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: List,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'list',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS List'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginMarkerModule.html":{"url":"modules/PluginMarkerModule.html","title":"module - PluginMarkerModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginMarkerModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/marker/marker.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginClasses, PluginTypes } from '../../types/plugins';\nimport Marker from '@editorjs/paragraph';\nimport { createPluginConfig } from '../../util/plugin';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/paragraph) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Marker,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'paragraph',\n        type: PluginTypes.Inline,\n        pluginName: 'EditorJS Marker',\n        shortcut: 'CTRL+SHIFT+M'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginMarkerModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginParagraphModule.html":{"url":"modules/PluginParagraphModule.html","title":"module - PluginParagraphModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginParagraphModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/paragraph/paragraph.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginTypes } from '../../types/plugins';\nimport Paragraph from '@editorjs/paragraph';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/paragraph) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Paragraph,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'paragraph',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Paragraph'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginParagraphModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginQuoteModule.html":{"url":"modules/PluginQuoteModule.html","title":"module - PluginQuoteModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginQuoteModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/quote/quote.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginTypes } from '../../types/plugins';\nimport Quote from '@editorjs/quote';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/paragraph) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Quote,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'quote',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Quote Tool',\n        inlineToolbar: true\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginQuoteModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginSimpleImageModule.html":{"url":"modules/PluginSimpleImageModule.html","title":"module - PluginSimpleImageModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginSimpleImageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/simple-image/simple-image.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginClasses, PluginTypes } from '../../types/plugins';\n\nimport SimpleImage from '@editorjs/simple-image';\nimport { createPluginConfig } from '../../util/plugin';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/image) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: SimpleImage,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'simpleimage',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Simple Image'\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginSimpleImageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PluginWarningModule.html":{"url":"modules/PluginWarningModule.html","title":"module - PluginWarningModule","body":"\n                   \n\n\n\n\n    Modules\n    PluginWarningModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/plugins/warning/warning.module.ts\n        \n\n\n        \n            Description\n        \n        \n            A module that provides the default EditorJS  block tool.\nSee the GitHub repo for API details\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { EDITOR_JS_TOOL_INJECTOR, PLUGIN_CONFIG, PluginTypes } from '../../types/plugins';\nimport Warning from '@editorjs/warning';\n\n/**\n * A module that provides the default EditorJS `` block tool.\n * See [the GitHub repo](https://github.com/editor-js/paragraph) for API details\n */\n@NgModule({\n  providers: [\n    {\n      provide: EDITOR_JS_TOOL_INJECTOR,\n      useValue: Warning,\n      multi: true\n    },\n    {\n      provide: PLUGIN_CONFIG,\n      useValue: {\n        key: 'warning',\n        type: PluginTypes.Block,\n        pluginName: 'EditorJS Warning Block',\n        inlineToolbar: true\n      },\n      multi: true\n    }\n  ]\n})\nexport class PluginWarningModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReadyMap.html":{"url":"interfaces/ReadyMap.html","title":"interface - ReadyMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ReadyMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts\n        \n\n            \n                Description\n            \n            \n                A map containing BehaviorSubject values of the ready state of EditorJS\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts:18\n                            \n                        \n                \n                    \n                        A map key containing a BehaviorSubject\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import EditorJS, { OutputData } from '@editorjs/editorjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { Block } from './blocks';\n\n/**\n * A map containing instances of `BehaviorSubject`\n */\nexport interface EditorMap {\n  /**\n   * A map key containing `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the ready state of EditorJS\n */\nexport interface ReadyMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the save state of EditorJS\n */\nexport interface SavedMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * An EditorJS change event\n */\nexport interface EditorJSChange {\n  /**\n   * Time of the change\n   */\n  time: number;\n  /**\n   * Blocks in the change\n   */\n  blocks: Block[];\n}\n\n/**\n * A map containing `BehaviorSubject` which is the last save from the EditorJS instance\n */\nexport interface ChangeMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SavedMap.html":{"url":"interfaces/SavedMap.html","title":"interface - SavedMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  SavedMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts\n        \n\n            \n                Description\n            \n            \n                A map containing BehaviorSubject values of the save state of EditorJS\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    BehaviorSubject\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs/src/lib/types/maps.ts:28\n                            \n                        \n                \n                    \n                        A map key containing a BehaviorSubject\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import EditorJS, { OutputData } from '@editorjs/editorjs';\nimport { BehaviorSubject } from 'rxjs';\nimport { Block } from './blocks';\n\n/**\n * A map containing instances of `BehaviorSubject`\n */\nexport interface EditorMap {\n  /**\n   * A map key containing `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the ready state of EditorJS\n */\nexport interface ReadyMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * A map containing `BehaviorSubject` values of the save state of EditorJS\n */\nexport interface SavedMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n/**\n * An EditorJS change event\n */\nexport interface EditorJSChange {\n  /**\n   * Time of the change\n   */\n  time: number;\n  /**\n   * Blocks in the change\n   */\n  blocks: Block[];\n}\n\n/**\n * A map containing `BehaviorSubject` which is the last save from the EditorJS instance\n */\nexport interface ChangeMap {\n  /**\n   * A map key containing a `BehaviorSubject`\n   */\n  [key: string]: BehaviorSubject;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ToolSettingsMap.html":{"url":"interfaces/ToolSettingsMap.html","title":"interface - ToolSettingsMap","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  ToolSettingsMap\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts\n        \n\n            \n                Description\n            \n            \n                A map of all the tools settings\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        EditorJSPlugin\n\n                    \n                \n                        \n                            \n                                Defined in libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts:43\n                            \n                        \n                \n                    \n                        The key of the plugin and the plugin exported tool settings\n\n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { InjectionToken } from '@angular/core';\nimport { ToolSettings, ToolConstructable } from '@editorjs/editorjs';\n\n/**\n * Block Data interface\n */\nexport interface BlockData {\n  [key: string]: any;\n}\n\n/**\n * The types of plugins supported, currently block and inline\n */\nexport enum PluginTypes {\n  /**\n   * A EditorJS block plugin\n   */\n  Block = 'block',\n  /**\n   * A EditorJS inline plugin\n   */\n  Inline = 'inline'\n}\n\n/**\n * The types of plugins supported via the plugin `type` property\n */\nexport type PluginType = PluginTypes.Block | PluginTypes.Inline | string;\n\n/**\n * A plugin property\n */\nexport type PluginProperty = string;\n\n/**\n * The EditorJS tool settings for this plugin\n */\nexport type EditorJSPlugin = ToolConstructable | ToolSettings;\n\n/**\n * A map of all the tools settings\n */\nexport interface ToolSettingsMap {\n  /**\n   * The key of the plugin and the plugin exported tool settings\n   */\n  [key: string]: EditorJSPlugin;\n}\n\n/**\n * A plugin configuration object\n */\nexport interface PluginConfig {\n  /**\n   * Specifies the type of plugin for the plugin provider\n   */\n  type: PluginProperty;\n  /**\n   * The key to use for the plugin\n   */\n  key: PluginProperty;\n  /**\n   * Label for displaying the plugin name\n   */\n  pluginName: PluginProperty;\n  /**\n   * Optional description for the plugin\n   */\n  description?: PluginProperty;\n  /**\n   * Optional shortcut for the plugin\n   */\n  shortcut?: PluginProperty;\n  /**\n   * Optional {@link https://editorjs.io/provide-custom-configuration | custom configuration} to pass to EditorJS\n   */\n  config?: any;\n\n  /**\n   * If a block tool, you can also set this to true if it contains inline tool support\n   */\n  inlineToolbar?: boolean;\n  /**\n   * Optional block data, used to define the block data for this type\n   * and used as a default\n   */\n  blockData?: BlockData;\n  /**\n   * The plugin for the editor\n   */\n  plugin: EditorJSPlugin | undefined;\n}\n\n/**\n * The Injection token for initial plugins as defined in the ngx-editorjs module\n */\nexport const EDITOR_JS_TOOL_INJECTOR = new InjectionToken('EDITOR_JS_TOOL_INJECTOR');\n\n/**\n * Injection token for a plugin config\n */\nexport const PLUGIN_CONFIG = new InjectionToken('PLUGIN_CONFIG');\n\n/**\n * A map of plugin configs\n */\nexport interface PluginConfigMap {\n  /**\n   * A plugin config per key\n   */\n  [key: string]: PluginConfig;\n}\n\n/**\n * Injection token for the plugin config map\n */\nexport const PluginClasses = new InjectionToken('PluginClasses');\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nTinynodes Changelog\n\nThis changelog is related to the overall site. You can also find changelogs for libraries under the library docs\n\n\nUNRELEASED\nToday @tinynodes/ngx-editorjs@3.0.0 has been released, along with @tinynodes/ngx-editorjs-plugins@2.0.0\nThe plugin architecture of the components has been re-written so that plugins are just NgModule classes\nthat provide multi providers for injecting plugins and their configuration.  These are merged into a map\nthat the NgxEditorJSPluginService now provides, and provides methods to getting tool options for instances.\nThis means the plugin module is now a dependency of the project.\nInternally there is some tidy-up related to this, and better async/await handling of the instance creation\nalong with API calls.  The Material demo \nhas been updated as well with improvements on using the component in an application.\nWednesday, 22nd May 2019\nToday @tinynodes/ngx-editorjs@2.0.0 has been released. The major bump is due to underlying changes that may be breaking - the entire service has been improved with better control over the EditorJS interface. Also in this release the exiting component has been upgraded to work with Angular Forms, and there is a new Material Form Field component provided too.\nThe demo has also been updated to reflect the new features of this, and a new demo added for the Material component.\nWednesday, 15th May 2019\nToday I have released @tinynodes/ngx-editorjs@1.3.2. This will be without a Forms component. In this release the main change is internally I'm using a new EditorJS Injector module I've created to handle managing the underlying instance. There are also a lot of documentation improvements and a completly new updated demo site.\nMonday, 13th May 2019\nToday I have released @tinynodes/ngx-editorjs@1.2.0. For now I've removed any default plugins from core package, now all plugins must be added at the application level - this can be see in the demo app.\nSunday, 12th May 2019\nThe first devlog is to report that currently version 1.2 has been delayed due to current build issues.\nA bug report has been filed on @nrwl/nx project.\nIn 1.2 there is a new @tinynodes/ngx-editorjs-plugins module that provides exports for several common EditorJS plugins and will be expanded to cover all the officially released plugins.\nWith this change the current build scripts break, and until it is resolved this will block the release.\nIn the meantime I'll continue to work on this small demo site, making it more useful as a good example of an Angular app.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"contributing.html":{"url":"contributing.html","title":"getting-started - contributing","body":"\n                   \n\nContributing\nWhen contributing to this repository, please first discuss the change you wish to make via issue,\nemail, or any other method with the owners of this repository before making a change.\nPlease note we have a code of conduct, please follow it in all your interactions with the project.\nPull Request Process\n\nEnsure any install or build dependencies are removed before the end of the layer when doing a\nbuild.\nUpdate the README.md with details of changes to the interface, this includes new environment\nvariables, exposed ports, useful file locations and container parameters.\nIncrease the version numbers in any examples files and the README.md to the new version that this\nPull Request would represent. The versioning scheme we use is SemVer.\nYou may merge the Pull Request in once you have the sign-off of two other developers, or if you\ndo not have permission to do that, you may request the second reviewer to merge it for you.\n\nCode of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\nadvances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic\naddress, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a\nprofessional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\nScope\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at me@tane.dev. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at http://contributor-covenant.org/version/1/4\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ~8.1.3\n        \n            @angular/cdk : ~8.1.2\n        \n            @angular/common : ~8.1.3\n        \n            @angular/compiler : ~8.1.3\n        \n            @angular/core : ~8.1.3\n        \n            @angular/flex-layout : ~8.0.0-beta.26\n        \n            @angular/forms : ~8.1.3\n        \n            @angular/material : ~8.1.2\n        \n            @angular/platform-browser : ~8.1.3\n        \n            @angular/platform-browser-dynamic : ~8.1.3\n        \n            @angular/router : ~8.1.3\n        \n            @ngrx/effects : ~8.1.0\n        \n            @ngrx/store : ~8.1.0\n        \n            core-js : ~3.1.4\n        \n            hammerjs : ~2.0.8\n        \n            install : ~0.13.0\n        \n            ngx-hideable-header : 0.0.5\n        \n            ngx-json-viewer : ~2.4.0\n        \n            rxjs : ~6.5.2\n        \n            zone.js : ~0.10.0\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PluginTypes   (libs/.../plugins.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts\n    \n        \n            \n                \n                    \n                        \n                        PluginTypes\n                    \n                \n                    \n                        \n                            The types of plugins supported, currently block and inline\n\n                        \n                    \n                        \n                            \n                                 Block\n                            \n                        \n                        \n                            \n                                Value : block\n                            \n                        \n                        \n                            \n                                 Inline\n                            \n                        \n                        \n                            \n                                Value : inline\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createEditorJSConfig   (libs/.../editor-config.ts)\n                        \n                        \n                            createEditorJSInstance   (libs/.../editorjs.module.ts)\n                        \n                        \n                            createModuleConfig   (libs/.../module-config.ts)\n                        \n                        \n                            createPluginConfig   (libs/.../plugin.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/ngx-editorjs/ngx-editorjs/src/lib/config/editor-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createEditorJSConfig\n                        \n                        \n                    \n                \n            \n            \n                \ncreateEditorJSConfig(inputConfig?)\n                \n            \n\n\n\n\n            \n                \n                    Creates an EditorJS configuration, only returning keys that are set\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    inputConfig\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional config to use to set values\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     EditorConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    libs/ngx-editorjs/ngx-editorjs/src/lib/containers/editorjs/editorjs.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createEditorJSInstance\n                        \n                        \n                    \n                \n            \n            \n                \ncreateEditorJSInstance(editorjs: any)\n                \n            \n\n\n\n\n            \n                \n                    Factory function to return the EditorJS base class\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    editorjs\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    libs/ngx-editorjs/ngx-editorjs/src/lib/config/module-config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createModuleConfig\n                        \n                        \n                    \n                \n            \n            \n                \ncreateModuleConfig(config?)\n                \n            \n\n\n\n\n            \n                \n                    Method to return an module configuration\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    config\n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional module configurations\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         NgxEditorJSModuleConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/util/plugin.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            createPluginConfig\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePluginConfig(pluginConfigs, plugins)\n                \n            \n\n\n\n\n            \n                \n                    Factory function to create the plugin config map for the plugin service\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pluginConfigs\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The array of plugin configuration objects passed to this factory\n\n                                    \n                                \n                                \n                                    plugins\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The array of EditorJS plugins that are passed to this factory\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nNgx-Tinynodes\nThis repository is a collection of Angular components and demos with full documentation.\nSee the Changelog for the\ndevelopment diary of this site, or visit the documentation of libraries.\nYou can also find a fully searchable API documentation for all @tinynode components.\nLinks\n\nRepository\nDocumentation\nDemo Application Site\nNPM Collection\n\nLibraries\nngx-editorjs\nThis library provides Angular support for EditorJS. Inside the module you will find:\n\nNgxEditorJSDirective - An Angular Directive used to attach an EditorJS instance to any block DOM element\nNgxEditorJSComponent - An out-of-the-box Angular component that is Reactive Forms compatible\nNgxEditorJSMaterialFieldComponent An Angular Material Form Field component that provides all the required properties and life-cycle events required. See the Form Demo on an example usage\nNgxEditorJSService - A Service that can be injected into an application to provide a interface to interact with EditorJS instances. Underneath are the private NgxEditorJSPluginService and NgxEditorJSInstanceService services. These are private but can be imported via ɵNgxEditorJSPluginService and ɵNgxEditorJSInstanceService from the library if you want to use them.\n\nWithin these components you will be able to access the underlying EditorJS instance, for use see the EditorJS API Docs\nBelow are the dependencies to use the features.\n@tinynodes/ngx-editorjs\nThis project provides a set of features for using EditorJS within Angular 7+\n\nReadme\nChangelog\nDemo\nProject Folder\n\n@tinynodes/ngx-editorjs-plugins\nThis project provides the plugin service module that exports handles\n plugins for @tinynodes/ngx-editorjs. The module also ships a set of default\n plugins and documentation on how to add new ones easily.\n\nReadme\nChangelog\nProject Folder\n\nDevelopment Information\nThis repository is run by Tane Piper and was generated using Nx.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nTinynodes General MIT Licence\nCopyright 2019 Tane Piper me@tane.dev\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        NgxEditorJSComponentModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxEditorJSMatFieldModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxEditorJSModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxEditorJSPluginServiceModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxEditorjsPluginsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxTinynodesComponentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxTinynodesMatJsonOutputModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NgxTinynodesMatTagInputModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginCodeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginEmbedModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginEmbedModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginHeaderModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginImageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginInlineCodeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginLinkModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginListModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginMarkerModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginParagraphModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginQuoteModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginSimpleImageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PluginWarningModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NgxEditorJSComponentModule\n\n\n\ncluster_NgxEditorJSComponentModule_declarations\n\n\n\ncluster_NgxEditorJSComponentModule_NgxEditorJSComponent_providers\n\n\n\ncluster_NgxEditorJSComponentModule_exports\n\n\n\ncluster_NgxEditorJSComponentModule_providers\n\n\n\ncluster_NgxEditorJSMatFieldModule\n\n\n\ncluster_NgxEditorJSMatFieldModule_declarations\n\n\n\ncluster_NgxEditorJSMatFieldModule_NgxEditorJSMatFieldComponent_providers\n\n\n\ncluster_NgxEditorJSMatFieldModule_exports\n\n\n\ncluster_NgxEditorJSModule\n\n\n\ncluster_NgxEditorJSModule_exports\n\n\n\ncluster_NgxEditorJSPluginServiceModule\n\n\n\ncluster_NgxEditorJSPluginServiceModule_providers\n\n\n\ncluster_NgxEditorjsPluginsModule\n\n\n\ncluster_NgxEditorjsPluginsModule_imports\n\n\n\ncluster_NgxEditorjsPluginsModule_exports\n\n\n\ncluster_NgxTinynodesComponentsModule\n\n\n\ncluster_NgxTinynodesComponentsModule_imports\n\n\n\ncluster_NgxTinynodesComponentsModule_exports\n\n\n\ncluster_NgxTinynodesMatJsonOutputModule\n\n\n\ncluster_NgxTinynodesMatJsonOutputModule_declarations\n\n\n\ncluster_NgxTinynodesMatJsonOutputModule_exports\n\n\n\ncluster_NgxTinynodesMatTagInputModule\n\n\n\ncluster_NgxTinynodesMatTagInputModule_declarations\n\n\n\ncluster_NgxTinynodesMatTagInputModule_NgxTinynodesMatTagInputComponent_providers\n\n\n\ncluster_NgxTinynodesMatTagInputModule_exports\n\n\n\n\nNgxEditorJSComponent\n\nNgxEditorJSComponent\n\n\n\nNgxEditorJSComponentModule\n\nNgxEditorJSComponentModule\n\nNgxEditorJSComponentModule -->\n\nNgxEditorJSComponent->NgxEditorJSComponentModule\n\n\n\n\n\nNgxEditorJSDirective\n\nNgxEditorJSDirective\n\nNgxEditorJSComponentModule -->\n\nNgxEditorJSDirective->NgxEditorJSComponentModule\n\n\n\n\n\nNgxEditorJSComponent \n\nNgxEditorJSComponent \n\nNgxEditorJSComponent  -->\n\nNgxEditorJSComponentModule->NgxEditorJSComponent \n\n\n\n\n\nNgxEditorJSDirective \n\nNgxEditorJSDirective \n\nNgxEditorJSDirective  -->\n\nNgxEditorJSComponentModule->NgxEditorJSDirective \n\n\n\n\n\nEDITORJS_FORM_VALUE_ACCESSOR\n\nEDITORJS_FORM_VALUE_ACCESSOR\n\nNgxEditorJSComponent -->\n\nEDITORJS_FORM_VALUE_ACCESSOR->NgxEditorJSComponent\n\n\n\n\n\nNgxEditorJSService\n\nNgxEditorJSService\n\nNgxEditorJSComponentModule -->\n\nNgxEditorJSService->NgxEditorJSComponentModule\n\n\n\n\n\nNgxEditorJSMatFieldComponent\n\nNgxEditorJSMatFieldComponent\n\n\n\nNgxEditorJSMatFieldModule\n\nNgxEditorJSMatFieldModule\n\nNgxEditorJSMatFieldModule -->\n\nNgxEditorJSMatFieldComponent->NgxEditorJSMatFieldModule\n\n\n\n\n\nNgxEditorJSMatFieldComponent \n\nNgxEditorJSMatFieldComponent \n\nNgxEditorJSMatFieldComponent  -->\n\nNgxEditorJSMatFieldModule->NgxEditorJSMatFieldComponent \n\n\n\n\n\nNgxEditorJSModule\n\nNgxEditorJSModule\n\nNgxEditorJSModule -->\n\nNgxEditorJSMatFieldModule->NgxEditorJSModule\n\n\n\n\n\nEDITORJS_MATERIAL_FIELD_CONTROL\n\nEDITORJS_MATERIAL_FIELD_CONTROL\n\nNgxEditorJSMatFieldComponent -->\n\nEDITORJS_MATERIAL_FIELD_CONTROL->NgxEditorJSMatFieldComponent\n\n\n\n\n\nNgxEditorJSMatFieldModule \n\nNgxEditorJSMatFieldModule \n\nNgxEditorJSMatFieldModule  -->\n\nNgxEditorJSModule->NgxEditorJSMatFieldModule \n\n\n\n\n\nNgxEditorJSPluginService\n\nNgxEditorJSPluginService\n\n\n\nNgxEditorJSPluginServiceModule\n\nNgxEditorJSPluginServiceModule\n\nNgxEditorJSPluginServiceModule -->\n\nNgxEditorJSPluginService->NgxEditorJSPluginServiceModule\n\n\n\n\n\nNgxEditorjsPluginsModule\n\nNgxEditorjsPluginsModule\n\nNgxEditorjsPluginsModule -->\n\nNgxEditorJSPluginServiceModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginCodeModule\n\nPluginCodeModule\n\nNgxEditorjsPluginsModule -->\n\nPluginCodeModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginEmbedModule\n\nPluginEmbedModule\n\nNgxEditorjsPluginsModule -->\n\nPluginEmbedModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginHeaderModule\n\nPluginHeaderModule\n\nNgxEditorjsPluginsModule -->\n\nPluginHeaderModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginImageModule\n\nPluginImageModule\n\nNgxEditorjsPluginsModule -->\n\nPluginImageModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginInlineCodeModule\n\nPluginInlineCodeModule\n\nNgxEditorjsPluginsModule -->\n\nPluginInlineCodeModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginLinkModule\n\nPluginLinkModule\n\nNgxEditorjsPluginsModule -->\n\nPluginLinkModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginListModule\n\nPluginListModule\n\nNgxEditorjsPluginsModule -->\n\nPluginListModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginMarkerModule\n\nPluginMarkerModule\n\nNgxEditorjsPluginsModule -->\n\nPluginMarkerModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginParagraphModule\n\nPluginParagraphModule\n\nNgxEditorjsPluginsModule -->\n\nPluginParagraphModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginQuoteModule\n\nPluginQuoteModule\n\nNgxEditorjsPluginsModule -->\n\nPluginQuoteModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginSimpleImageModule\n\nPluginSimpleImageModule\n\nNgxEditorjsPluginsModule -->\n\nPluginSimpleImageModule->NgxEditorjsPluginsModule\n\n\n\n\n\nPluginWarningModule\n\nPluginWarningModule\n\nNgxEditorjsPluginsModule -->\n\nPluginWarningModule->NgxEditorjsPluginsModule\n\n\n\n\n\nNgxEditorJSPluginServiceModule \n\nNgxEditorJSPluginServiceModule \n\nNgxEditorJSPluginServiceModule  -->\n\nNgxEditorjsPluginsModule->NgxEditorJSPluginServiceModule \n\n\n\n\n\nPluginCodeModule \n\nPluginCodeModule \n\nPluginCodeModule  -->\n\nNgxEditorjsPluginsModule->PluginCodeModule \n\n\n\n\n\nPluginEmbedModule \n\nPluginEmbedModule \n\nPluginEmbedModule  -->\n\nNgxEditorjsPluginsModule->PluginEmbedModule \n\n\n\n\n\nPluginHeaderModule \n\nPluginHeaderModule \n\nPluginHeaderModule  -->\n\nNgxEditorjsPluginsModule->PluginHeaderModule \n\n\n\n\n\nPluginImageModule \n\nPluginImageModule \n\nPluginImageModule  -->\n\nNgxEditorjsPluginsModule->PluginImageModule \n\n\n\n\n\nPluginInlineCodeModule \n\nPluginInlineCodeModule \n\nPluginInlineCodeModule  -->\n\nNgxEditorjsPluginsModule->PluginInlineCodeModule \n\n\n\n\n\nPluginLinkModule \n\nPluginLinkModule \n\nPluginLinkModule  -->\n\nNgxEditorjsPluginsModule->PluginLinkModule \n\n\n\n\n\nPluginListModule \n\nPluginListModule \n\nPluginListModule  -->\n\nNgxEditorjsPluginsModule->PluginListModule \n\n\n\n\n\nPluginMarkerModule \n\nPluginMarkerModule \n\nPluginMarkerModule  -->\n\nNgxEditorjsPluginsModule->PluginMarkerModule \n\n\n\n\n\nPluginParagraphModule \n\nPluginParagraphModule \n\nPluginParagraphModule  -->\n\nNgxEditorjsPluginsModule->PluginParagraphModule \n\n\n\n\n\nPluginQuoteModule \n\nPluginQuoteModule \n\nPluginQuoteModule  -->\n\nNgxEditorjsPluginsModule->PluginQuoteModule \n\n\n\n\n\nPluginSimpleImageModule \n\nPluginSimpleImageModule \n\nPluginSimpleImageModule  -->\n\nNgxEditorjsPluginsModule->PluginSimpleImageModule \n\n\n\n\n\nPluginWarningModule \n\nPluginWarningModule \n\nPluginWarningModule  -->\n\nNgxEditorjsPluginsModule->PluginWarningModule \n\n\n\n\n\nNgxTinynodesMatJsonOutputModule\n\nNgxTinynodesMatJsonOutputModule\n\n\n\nNgxTinynodesComponentsModule\n\nNgxTinynodesComponentsModule\n\nNgxTinynodesComponentsModule -->\n\nNgxTinynodesMatJsonOutputModule->NgxTinynodesComponentsModule\n\n\n\n\n\nNgxTinynodesMatJsonOutputComponent \n\nNgxTinynodesMatJsonOutputComponent \n\nNgxTinynodesMatJsonOutputComponent  -->\n\nNgxTinynodesMatJsonOutputModule->NgxTinynodesMatJsonOutputComponent \n\n\n\n\n\nNgxTinynodesMatTagInputModule\n\nNgxTinynodesMatTagInputModule\n\nNgxTinynodesComponentsModule -->\n\nNgxTinynodesMatTagInputModule->NgxTinynodesComponentsModule\n\n\n\n\n\nNgxTinynodesMatTagInputComponent \n\nNgxTinynodesMatTagInputComponent \n\nNgxTinynodesMatTagInputComponent  -->\n\nNgxTinynodesMatTagInputModule->NgxTinynodesMatTagInputComponent \n\n\n\n\n\nNgxTinynodesMatJsonOutputModule \n\nNgxTinynodesMatJsonOutputModule \n\nNgxTinynodesMatJsonOutputModule  -->\n\nNgxTinynodesComponentsModule->NgxTinynodesMatJsonOutputModule \n\n\n\n\n\nNgxTinynodesMatTagInputModule \n\nNgxTinynodesMatTagInputModule \n\nNgxTinynodesMatTagInputModule  -->\n\nNgxTinynodesComponentsModule->NgxTinynodesMatTagInputModule \n\n\n\n\n\nNgxTinynodesMatJsonOutputComponent\n\nNgxTinynodesMatJsonOutputComponent\n\nNgxTinynodesMatJsonOutputModule -->\n\nNgxTinynodesMatJsonOutputComponent->NgxTinynodesMatJsonOutputModule\n\n\n\n\n\nNgxTinynodesMatTagInputComponent\n\nNgxTinynodesMatTagInputComponent\n\nNgxTinynodesMatTagInputModule -->\n\nNgxTinynodesMatTagInputComponent->NgxTinynodesMatTagInputModule\n\n\n\n\n\nTAG_COMPONENT_VALUE_ACCESSOR\n\nTAG_COMPONENT_VALUE_ACCESSOR\n\nNgxTinynodesMatTagInputComponent -->\n\nTAG_COMPONENT_VALUE_ACCESSOR->NgxTinynodesMatTagInputComponent\n\n\n\n\n\nTAG_COMPONENT_FIELD_CONTROL\n\nTAG_COMPONENT_FIELD_CONTROL\n\nNgxTinynodesMatTagInputComponent -->\n\nTAG_COMPONENT_FIELD_CONTROL->NgxTinynodesMatTagInputComponent\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        21 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Components\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    28 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"todo.html":{"url":"todo.html","title":"getting-started - todo","body":"\n                   \n\nngx-tinynodes Todo\nGeneral Todos\n\n Add CI pipeline for publishing modules\n Publish doc changes and tags back to repo\n\nngx-editorjs\n\n Add full EditorJS config support\n Add config options as @Input on component and directive\n Add autosave option support to module config\n Expose EditorJS CoreAPI via service helpers (e.g. blocks, selection, etc)\n Provide peer-dependency ngrx/effects via library to control service\n\nngx-editorjs-demo\n\n Add store for page\n Add controls for setting editor\n Add Save feature\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlockTypes   (libs/.../blocks.ts)\n                        \n                        \n                            EditorJSPlugin   (libs/.../plugins.ts)\n                        \n                        \n                            ListStyle   (libs/.../blocks.ts)\n                        \n                        \n                            PluginProperty   (libs/.../plugins.ts)\n                        \n                        \n                            PluginType   (libs/.../plugins.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/ngx-editorjs/ngx-editorjs/src/lib/types/blocks.ts\n    \n    \n        \n            \n                \n                    \n                    BlockTypes\n                \n            \n            \n                \n                    Type of all the basic block type\n\n                \n            \n            \n                \n                        ParagraphBlock | HeaderBlock | ImageBlock | ListBlock | Block\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ListStyle\n                \n            \n            \n                \n                    Available list styles, supports ordered and unordered.\nA custom string can also be added\n\n                \n            \n            \n                \n                        \"ordered\" | \"unordered\" | string\n\n                \n            \n        \n    \n    libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts\n    \n    \n        \n            \n                \n                    \n                    EditorJSPlugin\n                \n            \n            \n                \n                    The EditorJS tool settings for this plugin\n\n                \n            \n            \n                \n                        ToolConstructable | ToolSettings\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PluginProperty\n                \n            \n            \n                \n                    A plugin property\n\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PluginType\n                \n            \n            \n                \n                    The types of plugins supported via the plugin type property\n\n                \n            \n            \n                \n                            PluginTypes.Block | PluginTypes.Inline | string\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            context   (libs/.../test.ts)\n                        \n                        \n                            DEFAULT_HOLDER_ID   (libs/.../editor-config.ts)\n                        \n                        \n                            EDITIOR_JS_INSTANCE   (libs/.../config.ts)\n                        \n                        \n                            EDITOR_JS_TOOL_INJECTOR   (libs/.../plugins.ts)\n                        \n                        \n                            EDITORJS_FORM_VALUE_ACCESSOR   (libs/.../editorjs.component.ts)\n                        \n                        \n                            EDITORJS_MATERIAL_FIELD_CONTROL   (libs/.../editorjs-mat-field.component.ts)\n                        \n                        \n                            EDITORJS_MODULE_IMPORT   (libs/.../injector.ts)\n                        \n                        \n                            EditorJSInstance   (libs/.../injector.ts)\n                        \n                        \n                            FOR_ROOT_OPTIONS_TOKEN   (libs/.../config.ts)\n                        \n                        \n                            MAP_DEFAULTS   (libs/.../injector.ts)\n                        \n                        \n                            NGX_EDITORJS_CONFIG   (libs/.../config.ts)\n                        \n                        \n                            PLUGIN_CONFIG   (libs/.../plugins.ts)\n                        \n                        \n                            PluginClasses   (libs/.../plugins.ts)\n                        \n                        \n                            require   (libs/.../test.ts)\n                        \n                        \n                            TAG_COMPONENT_FIELD_CONTROL   (libs/.../mat-tag-input.component.ts)\n                        \n                        \n                            TAG_COMPONENT_VALUE_ACCESSOR   (libs/.../mat-tag-input.component.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    libs/ngx-tinynodes-components/src/test.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            context\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : require.context('./', true, /\\.spec\\.ts$/)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            require\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    libs/ngx-editorjs/ngx-editorjs/src/lib/config/editor-config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            DEFAULT_HOLDER_ID\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'editor-js'\n                        \n                    \n\n                \n                    \n                        The default holder ID to attach EditorJS to\n\n                    \n                \n\n            \n        \n\n    libs/ngx-editorjs/ngx-editorjs/src/lib/types/config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EDITIOR_JS_INSTANCE\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('EDITIOR_JS_INSTANCE')\n                        \n                    \n\n                \n                    \n                        Get the EditorJS instance injected into the app\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            FOR_ROOT_OPTIONS_TOKEN\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('FOR_ROOT_OPTIONS_TOKEN')\n                        \n                    \n\n                \n                    \n                        Internal token for injecting the NgxEditorJSConfig into the config factory\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            NGX_EDITORJS_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('NGX_EDITORJS_CONFIG')\n                        \n                    \n\n                \n                    \n                        Injection token provied for NgxEditorJSConfig\n\n                    \n                \n\n            \n        \n\n    libs/ngx-editorjs/ngx-editorjs-plugins/src/lib/types/plugins.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EDITOR_JS_TOOL_INJECTOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('EDITOR_JS_TOOL_INJECTOR')\n                        \n                    \n\n                \n                    \n                        The Injection token for initial plugins as defined in the ngx-editorjs module\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PLUGIN_CONFIG\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('PLUGIN_CONFIG')\n                        \n                    \n\n                \n                    \n                        Injection token for a plugin config\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PluginClasses\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('PluginClasses')\n                        \n                    \n\n                \n                    \n                        Injection token for the plugin config map\n\n                    \n                \n\n            \n        \n\n    libs/ngx-editorjs/ngx-editorjs/src/lib/containers/editorjs/editorjs.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EDITORJS_FORM_VALUE_ACCESSOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Provider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgxEditorJSComponent),\n  multi: true\n}\n                        \n                    \n\n                \n                    \n                        The NgxEditorJSBaseComponent Provider for NG_VALUE_ACCESSOR\n\n                    \n                \n\n            \n        \n\n    libs/ngx-editorjs/ngx-editorjs/src/lib/containers/editorjs-mat-field/editorjs-mat-field.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EDITORJS_MATERIAL_FIELD_CONTROL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Provider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: MatFormFieldControl,\n  useExisting: forwardRef(() => NgxEditorJSMatFieldComponent),\n  multi: true\n}\n                        \n                    \n\n                \n                    \n                        Provider for the EditorJS Material Field Component\n\n                    \n                \n\n            \n        \n\n    libs/ngx-editorjs/ngx-editorjs/src/lib/types/injector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EDITORJS_MODULE_IMPORT\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('EDITORJS_MODULE_IMPORT')\n                        \n                    \n\n                \n                    \n                        Injection token for the EditorJS class\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            EditorJSInstance\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new InjectionToken('EditorJSInstance')\n                        \n                    \n\n                \n                    \n                        The EditorJS class injector\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            MAP_DEFAULTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  ['lastChangeMap', { time: 0, blocks: [], version: typeof EditorJS !== 'undefined' && EditorJS.version || ''}],\n  ['isReadyMap', false],\n  ['hasSavedMap', false]\n]\n                        \n                    \n\n                \n                    \n                        Default values for each internal map\n\n                    \n                \n\n            \n        \n\n    libs/ngx-tinynodes-components/src/lib/components/mat-tag-input/mat-tag-input.component.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TAG_COMPONENT_FIELD_CONTROL\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Provider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: MatFormFieldControl,\n  useExisting: forwardRef(() => NgxTinynodesMatTagInputComponent),\n  multi: true\n}\n                        \n                    \n\n                \n                    \n                        Provider for Material field support\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            TAG_COMPONENT_VALUE_ACCESSOR\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Provider\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => NgxTinynodesMatTagInputComponent),\n  multi: true\n}\n                        \n                    \n\n                \n                    \n                        Tag Value Accessor\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
